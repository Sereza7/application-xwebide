<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc reference="WebIDECode.WebIDE_wiki" locale="">
  <web>WebIDECode</web>
  <name>WebIDE_wiki</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>WebIDECode.LogicalTree</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1465294200000</creationDate>
  <date>1467809654000</date>
  <contentUpdateDate>1465374088000</contentUpdateDate>
  <version>1.1</version>
  <title>WebIDE_wiki</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WebIDECode.WebIDE_wiki</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>386d6398-942a-4785-bc32-0d280e758a25</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>//---------- WikiEditor Module ----------
/**
 * ----- Internal variable -----
 * currentLocale
 *   The language of the page edited in the current tab
 * ----- Internal methods -----
 * _addModalShortcut()
 *   Add shortcuts when the "page" modal is opened
 * _setCurrentLocale()
 *   Set the value of currentLocale
 */
define(['jquery'], function($) {
  return {
    init : function(WebIDE, Hierarchy, SH, Translations, Modules) {

      var WikiEditor = {};

      var editor = WikiEditor.editor = 'wiki';
      var currentLocale = WikiEditor.currentLocale = '';
      var load = WikiEditor.load = function(loadAllTabs) {
        if(WebIDE.currentEditor === editor) {
          WebIDE.setLoadingState(true);
          var urlSpaces = WebIDE.getCurrentSpace(false, true);
          var urlPage = WebIDE.getCurrentPage(false);
          var locale = (currentLocale &amp;&amp; currentLocale !== '') ? currentLocale : 'default';
          $.ajax({
            url: WebIDE.wikiViewURL+urlSpaces+"/"+urlPage+"?xpage=plain&amp;raw=2&amp;language="+locale,
            type: "GET",
            contentType: "plain/text",
          }).success(function(dataContent){
            var tabId = WebIDE.getTabId(WebIDE.currentEditor, WebIDE.getCurrentSpace(false), WebIDE.getCurrentPage(false), getParameters());
            var jQueryTabId = '#'+tabId;
            var tabNumberId = WebIDE.getTabNumber(jQueryTabId);
            var rawtitle = decodeURIComponent(WebIDE.getRawTitle(WebIDE.getCurrentSpace(false), WebIDE.getCurrentPage(false), locale));
            var parentPage = decodeURIComponent(WebIDE.getParentPage(WebIDE.getCurrentSpace(false), WebIDE.getCurrentPage(false), locale));
            var isHidden = _getHidden(WebIDE.getCurrentSpace(false), WebIDE.getCurrentPage(false), locale);
            var menuBlock = WebIDE.initOtherFieldsBlock($(jQueryTabId), jQueryTabId, 1, Translations.panel.advanced);
            var relatedElementsBlock = WebIDE.initOtherFieldsBlock($(jQueryTabId), jQueryTabId, 2, Translations.panel.related);
            WebIDE.initOtherFieldsBlock($(jQueryTabId), jQueryTabId, 3, Translations.panel.shortcuts);
            _loadRelatedElements(WebIDE.getCurrentSpace(false), WebIDE.getCurrentPage(false), relatedElementsBlock);
            $(jQueryTabId).append('&lt;div class="editorWikiTabContent"&gt;&lt;div class="editorPropertyLabel"&gt;&lt;p class="editorWikiTitleLabel"&gt;'+Translations.wiki.title+'&lt;/p&gt;&lt;/div&gt; &lt;input type="text" class="editorWikiTitle" value="'+rawtitle+'" /&gt;&lt;div class="editorPropertyLabel"&gt;&lt;p class="editorWikiTitleLabel"&gt;'+Translations.wiki.content+'&lt;/p&gt;&lt;/div&gt;&lt;textarea id="content_'+tabId+'"&gt;&lt;/textarea&gt;&lt;/div&gt;');
            $(jQueryTabId+' &gt; .editorWikiTabContent &gt; textarea').val(dataContent);
            var advancedFieldBlock = $(menuBlock).find('.editorOtherFieldsBlockContent');
            var addHidden = '';
            var hiddenState = '0';
            if(isHidden === "true") {
              addHidden = ' checked="checked"';
              hiddenState = '1';
            }
            $(advancedFieldBlock).append('&lt;div class="editorPropertyLabel"&gt;&lt;p&gt;'+Translations.wiki.parent+'&lt;/p&gt;&lt;/div&gt; &lt;input type="text" class="editorWikiParent" value="'+parentPage+'" size="45"/&gt;&lt;br&gt;&lt;div class="editorPropertyLabel"&gt;&lt;p&gt;'+Translations.wiki.hidden+'&lt;/p&gt;&lt;/div&gt; &lt;input type="checkbox" class="editorWikiHidden" '+addHidden+'/&gt;&lt;input type="hidden" class="editorWikiHiddenSaved" value="'+hiddenState+'"/&gt;');
            if(WebIDE.syntaxHighlighting) {
              // Add the CodeMirror editor
              initCodeMirror(tabId);
            }
            WebIDE.setSavedContent(tabNumberId);
            WebIDE.setLoadingState(false, Translations.states.loaded, 2500);
            if(loadAllTabs) {
              WebIDE.continueLoadAll();
            }
          }).error(function(xhr) {
            var tabId = WebIDE.getTabId(WebIDE.currentEditor, WebIDE.getCurrentSpace(false), WebIDE.getCurrentPage(false), getParameters());
            var jQueryTabId = '#'+tabId;
            var tabNumberId = WebIDE.getTabNumber(jQueryTabId);
            WebIDE.removeTab($('.editorTabButton[data-tabnumber="'+tabNumberId+'"]'), tabNumberId);
            WebIDE.setLoadingState(false, Translations.states.loadingError+'"'+WebIDE.getCurrentSpace(false)+'.'+WebIDE.getCurrentPage(false)+'": '+xhr.statusText, 4000, 'red');
            if(loadAllTabs) {
              WebIDE.continueLoadAll();
            }
          });
        }
      };
      var save = WikiEditor.save = function(tabNumberId, changeSavedContent, continueEditing, saveAll) {
        if(!WebIDE.SAVING || saveAll) {
          if(!saveAll) {
            WebIDE.setSavingState(true);
          }
          var tabButtonElement = $('.editorTabButton[data-tabnumber="'+tabNumberId+'"]');
          var page = $(tabButtonElement).attr('data-page');
          var space = $(tabButtonElement).attr('data-space');
          var locale = $(tabButtonElement).attr('data-locale');
          var jQueryTabId = '#'+WebIDE.getTabId(editor, $(tabButtonElement).attr('data-space'), $(tabButtonElement).attr('data-page'), getParameters());
          var restSpaces = WebIDE.getRestSpacesString(space);
          var restLocale = (locale === 'default' || locale === '') ? '' : '/translations/'+locale;
          var fileTitle = WebIDE.getCurrentTitle(jQueryTabId);
          var fileContent = WebIDE.getCurrentContent(tabNumberId);
          var fileParent = WebIDE.getCurrentParent(jQueryTabId);
          var hiddenState = $(jQueryTabId+' .editorWikiHidden').is(':checked') ? 1 : 0;
          var form_token = WebIDE.getDocumentReferenceData('form_token');
          $.ajax({
            url: '/'+XWiki.webapppath+XWiki.servletpath+'save/'+WebIDE.getURLSpacesString(space)+'/'+page,
            type: 'POST',
            data: 'language='+locale+'&amp;form_token='+form_token+'&amp;xhidden='+hiddenState+'&amp;title='+encodeURIComponent(fileTitle)+'&amp;content='+encodeURIComponent(fileContent)+'&amp;parent='+encodeURIComponent(fileParent),
            contentType: "application/x-www-form-urlencoded",
          }).error(function(xhr, errorStatus){
            if(!saveAll) {
              WebIDE.setSavingState(false, xhr.statusText, 4000, 'red');
              return false;
            }
            else {
              WebIDE.continueSaveAll(false, xhr, space, page);
            }
          }).success(function(data){
            if(changeSavedContent) {
              WebIDE.setSavedContent(tabNumberId);
            }
            WebIDE.setStar(false, tabNumberId);
            if(!saveAll) {
              WebIDE.setSavingState(false, Translations.states.saved, 2500);
              if(continueEditing) return true;
              else window.location.href = WebIDE.wikiViewURL+space+'/'+page;
            }
            else {
              WebIDE.continueSaveAll(true);
            }
          });
        }
      };
      var getParameters = WikiEditor.getParameters = function() {
        var locale = currentLocale || 'default';
        return [locale];
      };
      var setParameters = WikiEditor.setParameters = function(parameters) {
        var locale = parameters[0] || 'default';
        _setCurrentLocale(locale);
      };
      var resetParameters = WikiEditor.resetParameters = function() {
        _setCurrentLocale(null);
      };
      var getTabButtonParameters = WikiEditor.getTabButtonParameters = function(parameters) {
        return 'data-locale="'+parameters[0]+'"';
      };
      var getParametersFromTab = WikiEditor.getParametersFromTab = function(tabButton) {
        return [$(tabButton).attr('data-locale')];
      };
      var getMenuElement = WikiEditor.getMenuElement = function(folder, file, parameters) {
        return $('.editPage[data-space="'+folder+'"][data-page="'+file+'"][data-locale="'+parameters[0]+'"]')
      };
      var getTabName = WikiEditor.getTabName = function(folder, file, parameters) {
        return (parameters[0] &amp;&amp; parameters[0] !== 'default') ? '('+parameters[0]+') '+file+' ('+decodeURIComponent(folder)+')' : file+' ('+decodeURIComponent(folder)+')';
      };
      var getCurrentContent = WikiEditor.getCurrentContent = function (tabElement) {
        var tabWikiElement = $(tabElement).find('textarea:first');
        return $(tabWikiElement).val();
      };
      var initCodeMirror = WikiEditor.initCodeMirror = function(tabId) {
        SH.initCodeMirror('#content_'+tabId, XWiki.docsyntax, WebIDE.codeMirrorParams);
      };
      var initHash = WikiEditor.initHash = function(hashArray) {
        if(hashArray.size() === 6) {
          setParameters([hashArray[5]]);
        }
      };
      var setDeleteButton = WikiEditor.setDeleteButton = function() {
        $('#hierarchyDeleteButtonIDE').val(Translations.commons.deleteAction);
        $('#hierarchyDeleteButtonIDE').off('click');
        $('#hierarchyDeleteButtonIDE').on('click', function() {
          $('#editorDeletedPageModalInfo').html(WebIDE.getCurrentSpace(false)+' - '+WebIDE.getCurrentPage(false));
          $('#editorDeletePageConfirmed').attr('data-page', WebIDE.getCurrentPage(false));
          $('#editorDeletePageConfirmed').attr('data-space', WebIDE.getCurrentSpace(false));
          var locale = currentLocale || 'default';
          $('#editorDeletePageConfirmed').attr('data-locale', locale);
          if(WebIDE.bootstrap()) {
            $('#editorDeletePageModal').modal('show');
          }
          else {
            WebIDE.openModalNoBootstrap('#editorDeletePageModal');
          }
        });
      };
      /**
       * Contains all events that have to be registered again each time the hierarchy is updated (mostly "click" events on elements in the hierarchy) :
       */
      var initMenu = WikiEditor.initMenu = function() {
        // Add a page (if no bootstrap) / Change the folder to use when adding a new page
        $('.newPage').off('click');
        $('.newPage').on('click', function(e){
          e.preventDefault();
          var modal = true;
          $('#hierarchyAddPageTypeBlock').hide();
          $('#hierarchyAddPageLocaleBlock').hide();
          $('#hierarchyNewPageName').attr('disabled', false);
          $('#hierarchyPageFolder').attr('disabled', false);
          var folder = $(this).attr('data-space') || '';
          var file = $(this).attr('data-page') || '';
          file = encodeURIComponent(file);

          $('#hierarchyPageFolder').val(folder);
          $('#hierarchyNewPageName').val(file);

          if($(this).hasClass('newLanguage')) {
            $('#hierarchyAddPageTitle').html(Translations.wiki.modalAddLanguage);
            $('#hierarchyAddPage').attr('data-type', 'language');
            $('#hierarchyNewPageName').attr('disabled', true);
            $('#hierarchyPageFolder').attr('disabled', true);
            $('#hierarchyAddPageLocaleBlock').show();
          }
          else {
            // If there are classes in the project, ask for item or content page
            if($('#hierarchyUpdatedClassList').length &amp;&amp; !$('#hierarchyUpdatedClassList').is(':empty')) {
              $('#hierarchyAddPageTypeBlock').show();
            }
            $('#hierarchyAddPageTitle').html(Translations.wiki.modalAddPage);
            $('#hierarchyAddPage').attr('data-type', 'page');
          }
          if(!WebIDE.bootstrap() &amp;&amp; modal) {
            WebIDE.openModalNoBootstrap('#hierarchyPageModal');
            _addModalShortcut();
          }
        });
        // User wants to edit a new page
        $('.editPage').off('click');
        $('.editPage').on('click', function(e){
          e.preventDefault();
          if(!WebIDE.SAVING &amp;&amp; !WebIDE.LOADING) {
            var folder = $(this).attr('data-space');
            var file = $(this).attr('data-page');
            var locale = $(this).attr('data-locale') || 'default';
            WebIDE.goToNewPage(editor, file, folder, [locale]);
          }
        });
        // User wants to delete a page
        $('.deletePage').off('click');
        $('.deletePage').on('click', function(e){
          e.preventDefault();
          if(!WebIDE.SAVING &amp;&amp; !WebIDE.LOADING) {
            var folder = $(this).attr('data-space');
            var file = $(this).attr('data-page');
            var locale = $(this).attr('data-locale') || 'default';
            $('#editorDeletedPageModalInfo').html(folder+' - '+file);
            $('#editorDeletePageConfirmed').attr('data-page', file);
            $('#editorDeletePageConfirmed').attr('data-space', folder);
            $('#editorDeletePageConfirmed').attr('data-locale', locale);
            if(WebIDE.bootstrap()) {
              $('#editorDeletePageModal').modal('show');
            }
            else {
              WebIDE.openModalNoBootstrap('#editorDeletePageModal');
            }
          }
        });
      };
      /**
      * Initialize the modals (with or without Bootstrap) and their one-time events (shown, hidden, clicks)
      */
      var initModals = WikiEditor.initModals = function() {
        $('#hierarchyPageModal').on('shown.bs.modal', _addModalShortcut);
        $('#hierarchyPageModal').on('hidden.bs.modal', WebIDE.removeEnterShortcut);
        // Modals click events :
        $('#hierarchyAddPage').on('click', function(e){
          $('body').removeClass('modal-open');
          e.preventDefault();
          var folder = $('#hierarchyPageFolder').val();
          var file = encodeURIComponent($('#hierarchyNewPageName').val());
          if(folder &amp;&amp; file &amp;&amp; folder.trim() &amp;&amp; file.trim()) {
            // Check if it is a page, a class, a sheet or a template :
            var type = 'page';
            if($('#hierarchyAddPage').attr('data-type')) {
              type = $('#hierarchyAddPage').attr('data-type');
            }
            // Fix name with best practices
            file = WebIDE.fixName(file, type);
            // Check if item page
            var itemvalue;
            if(type === 'page' &amp;&amp; $('input[type=radio][name=hierarchyAddPageType]:checked').val() === 'item') {
              type = 'item';
              itemvalue = $('#hierarchyAddPageItem').val();
            }
            // Check if it is a translation
            else if(type === 'language') {
              itemvalue = $('#hierarchyAddPageLocale').val();
            }
            add(folder, file, type, itemvalue);
          }
          else {
            $('#hierarchyPageModalError').html(Translations.commons.modalError).show().delay(4000).queue(function(n) {
              $(this).hide().html('');
              n();
            });
          }
        });
        $('#editorDeletePageConfirmed').click(function(e){
          $('body').removeClass('modal-open');
          e.preventDefault();
          remove($(this).attr('data-space'), $(this).attr('data-page'), $(this).attr('data-locale'));
        });
      };
      /**
       * Delete a page from the wiki :
       * @input String folder, String file, String locale
       */
      var remove = WikiEditor.remove = function(space, page, locale) {
        if(!WebIDE.LOADING) {
          WebIDE.setLoadingState(true, Translations.commons.deleting);
          var restSpaces = WebIDE.getRestSpacesString(space);
          var addRestLanguage = '';
          if(locale &amp;&amp; locale !== 'default') {
            addRestLanguage = '/translations/'+locale;
          }
          var restPage = page;
          $.ajax({
            url: "/"+XWiki.webapppath+"rest/wikis/"+WebIDE.getDocumentReferenceData('wiki')+"/"+restSpaces+"/pages/"+restPage+addRestLanguage,
            type: "DELETE",
            contentType: "plain/text",
          }).success(function(){
            // Remove all tabs related to that page if default language is deleted, or only the correct tab if another language is deleted
            if(!locale || locale === 'default') {
              var selector = '_'+encodeURIComponent(space).replace(/\./g, '2E').replace(/%/g, '')+'_'+encodeURIComponent(page).replace(/\./g, '2E').replace(/%/g, '');
              var elements = $('.editorTab[id*="'+selector+'"]');
              elements.each(function(i, elmt) {
                var tabNumberId = $(elmt).attr('data-tabnumber');
                var element = $('.editorTabButton[data-tabnumber="'+tabNumberId+'"]');
                WebIDE.removeTab(element, tabNumberId);
              });
            }
            else {
              var tabId = WebIDE.getTabId(WebIDE.currentEditor, WebIDE.getCurrentSpace(false), WebIDE.getCurrentPage(false), Modules[WebIDE.currentEditor].getParameters());
              var jQueryTabId = '#'+tabId;
              var tabNumberId = WebIDE.getTabNumber(jQueryTabId);
              var element = $('.editorTabButton[data-tabnumber="'+tabNumberId+'"]');
              WebIDE.removeTab(element, tabNumberId);
            }
            Hierarchy.reload();
            if(WebIDE.bootstrap()) {
              $('#editorDeletePageModal').modal('hide');
            }
            else {
              WebIDE.closeModalNoBootstrap();
            }
            WebIDE.setLoadingState(false, Translations.commons.deleted, 2500);
          }).error(function(xhr){
            WebIDE.setLoadingState(false, xhr.statusText, 2500);
          });
        }
      };
      /**
       * Add a page in a folder :
       * 1/ Check that the page doesn't already exists
       * 2/ Create the page in the wiki
       * 3/ Update the hierarchy
       * @input String folder, String file
       */
      var add = WikiEditor.add = function(folder, file, type, itemValue) {
        var restSpaces = WebIDE.getRestSpacesString(folder);
        WebIDE.setHierarchyState(Translations.hierarchy.page.adding);
        var addRestLanguage = '';
        var ajaxProperties;
        if(type === 'language') {
          addRestLanguage = '/translations/'+itemValue;
        }
        else if(type === 'item') { // Item page must receive an object of a selected class at the end!
          var restSpaces = WebIDE.getRestSpacesString(folder);
          var restPage = file;
          ajaxProperties = {
            url: "/"+XWiki.webapppath+"rest/wikis/"+WebIDE.getDocumentReferenceData('wiki')+"/"+restSpaces+"/pages/"+restPage+"/objects",
            method: "POST",
            contentType: "application/x-www-form-urlencoded",
            accept: "application/xml",
            data: "className="+encodeURIComponent(itemValue),
          };
        }
        $.ajax({
          url: "/"+XWiki.webapppath+"rest/wikis/"+WebIDE.getDocumentReferenceData('wiki')+"/"+restSpaces+"/pages/"+file+addRestLanguage,
          type: "GET",
          contentType: "application/xml",
        }).success(function(xhr){
          $('#hierarchyPageModalError').html(Translations.wiki.nameUsedError).show().delay(4000).queue(function(n) {
            $(this).hide().html('');
            n();
          });
          WebIDE.setHierarchyState(Translations.wiki.nameUsedError, 4000, 'red');
        }).error(function(res){
          $.ajax({
            url: "/"+XWiki.webapppath+"rest/wikis/"+WebIDE.getDocumentReferenceData('wiki')+"/"+restSpaces+"/pages/"+file+addRestLanguage,
            type: "PUT",
            contentType: "application/x-www-form-urlencoded",
            accept: "application/xml",
            data: "title="+file+"&amp;content=&amp;parent="+WebIDE.getCurrentSpace(true)+"."+WebIDE.getCurrentPage(true),
          }).success(function(){
            function callback() {
              $('#hierarchyNewPageName').val('');
              if(WebIDE.bootstrap()) {
                $('#hierarchyPageModal').modal('hide');
              }
              else {
                WebIDE.closeModalNoBootstrap();
              }
              WebIDE.setHierarchyState(Translations.hierarchy.page.added, 2500);
              Hierarchy.reload();
            }
            if(type !== 'item') {
              callback();
            }
            else {
              $.ajax(ajaxProperties).success(callback).error(function(xhr) {
                $('#hierarchyNewPageName').val('');
                if(WebIDE.bootstrap()) {
                  $('#hierarchyPageModal').modal('hide');
                }
                else {
                  WebIDE.closeModalNoBootstrap();
                }
                WebIDE.setHierarchyState(xhr.statusText, 4000, 'red');
              });
            }
          }).error(function(xhr){
            $('#hierarchyNewPageName').val('');
            if(WebIDE.bootstrap()) {
              $('#hierarchyPageModal').modal('hide');
            }
            else {
              WebIDE.closeModalNoBootstrap();
            }
            WebIDE.setHierarchyState(xhr.statusText, 4000, 'red');
          });
        });
      };
      /**
       * Add shortcuts when the "page" modal is opened
       */
      var _addModalShortcut = WikiEditor._addModalShortcut = function() {
        $('#hierarchyNewPageName').focus();
        shortcut.add("Enter", function() {
          $('#hierarchyAddPage').click();
        });
      };
      /**
       * Set data about the current document edited
       * @input String locale: the value currently used in the editor
       */
      var _setCurrentLocale = WikiEditor._setCurrentLocale = function(locale) {
        currentLocale = locale;
      };
      /**
       * Get the value of the "hidden" field of the selected page
       * _getHidden
       * @input String space : space of the page
       * @input String page : name of the page
       * @input String locale : language of the page
       */
      var _getHidden = WikiEditor._getHidden = function(space, page, locale) {
        var hiddenState = $('.editPage[data-space="'+space+'"][data-page="'+page+'"][data-locale="'+locale+'"]').attr('data-hidden');
        return hiddenState || '';
      };
      /**
       * Load data about related elements (macros used, includes) of the selected page
       */
      var _loadRelatedElements = WikiEditor._loadRelatedElements = function(space, page, relatedElementsBlock) {
        $.ajax({
          url : WebIDE.wikiGetURL+"WebIDECode/AddRelatedElements?xpage=plain&amp;space="+encodeURIComponent(space)+"&amp;page="+encodeURIComponent(page)+"&amp;master="+WebIDE.masterSpace+"."+WebIDE.masterPage,
          type : "GET",
          accept: "application/html"
        }).success(function(data) {
          if(data) {
            $(relatedElementsBlock).find('.editorOtherFieldsBlockContent').html(data);
            Hierarchy.init();
          }
          else {
            $(relatedElementsBlock).hide();
          }
        }).error(function(xhr) {
          $(relatedElementsBlock).find('.editorOtherFieldsBlockContent').html(Translations.wiki.relatedElmtError+' : '+xhr.statusText);
        });
      };

      return WikiEditor;
    }
  };
});</code>
    </property>
    <property>
      <name>WebIDE Wiki module</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <content/>
</xwikidoc>
