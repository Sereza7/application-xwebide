<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc reference="WebIDECode.WebIDE_menu" locale="">
  <web>WebIDECode</web>
  <name>WebIDE_menu</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>WebIDECode.ApplicationHierarchy</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1461078662000</creationDate>
  <date>1465303998000</date>
  <contentUpdateDate>1461078662000</contentUpdateDate>
  <version>1.1</version>
  <title>WebIDE_menu</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WebIDECode.WebIDE_menu</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>a5ce0bfd-1f62-4232-96cd-dd7252a9db3c</guid>
    <property>
      <cache>long</cache>
    </property>
    <property>
      <code>//-------------------------------------
//----------- Hierarchy API -----------
//-------------------------------------
/**
 * Hierarchy.reload()
 * Hierarchy.changeTreeView()
 * Hierarchy.rename(type, renameFrom, renameTo, updateList)
 * Hierarchy.removeFolder(folder)
 * Hierarchy.removePage(page)
 * Hierarchy.addFolder(folder)
 * Hierarchy.addExistingPage(pageFullName)
 * Hierarchy.init()
 * Hierarchy.initModals()
 * Hierarchy._addFolderModalShortcut()
 * Hierarchy._addExistingPageModalShortcut()
 */
define(['jquery'], function($) {
  return {
    init : function(WebIDE, Translations, Modules) {
      var Hierarchy = {};
      /**
             * Reload completely the project content (hierarchy) :
             * 1/ Get the plain content of ApplicationHierarchy
             * 2/ Change the html content and call "init()" to register again the "click" events in the menu
             */
      var reload = Hierarchy.reload = function() {
        $('#hierarchyRefresh').off('click');
        $('#hierarchyRefresh span').hide();
        var spinner = $('&lt;img title="'+Translations.hierarchy.reloading+'"/&gt;').attr('src', '/'+XWiki.webapppath+'resources/icons/xwiki/spinner.gif').appendTo('#hierarchyRefresh');
        $.ajax({
          url: WebIDE.wikiGetURL+"WebIDECode/ApplicationHierarchy?xpage=plain&amp;language="+$('#hierarchyMainLanguage').val(),
          type: "GET",
          datatype : "html",
          data : "action="+XWiki.contextaction+"&amp;editor="+WebIDE.currentEditor+"&amp;masterPage="+WebIDE.masterSpace+"."+WebIDE.masterPage+"&amp;remotePage="+WebIDE.getCurrentSpace(true)+"."+WebIDE.getCurrentPage(true)+"&amp;visibleSpaces="+encodeURIComponent(WebIDE.visibleSpaces)+"&amp;visiblePages="+encodeURIComponent(WebIDE.visiblePages)+"&amp;visibleCategory="+encodeURIComponent(WebIDE.visibleCategory)+"&amp;treeview="+WebIDE.currentTree,
          contentType: "text/html",
        }).success(function(data){
          //Update the hierarchy content (list of documents only)
          var result = $('&lt;div /&gt;').append(data).find('#hierarchyContent').html();
          $('#hierarchyContent').html(result);
          $('#hierarchyPageFolder').html($('#hierarchyUpdatedFolderList').html());
          var parameters = [];
          if(Modules[WebIDE.currentEditor]) {
            parameters = Modules[WebIDE.currentEditor].getParameters();
          }
          WebIDE.setActiveTab(WebIDE.currentEditor, WebIDE.getCurrentPage(false), WebIDE.getCurrentSpace(false), parameters);
          init();
        }).complete(function() {
          $('#hierarchyRefresh').on('click', reload);
          $('.hierarchyChangeTree').on('click', changeTreeView);
          spinner.remove();
          $('#hierarchyRefresh span').show();
        });
      };

      /**
             * Change the current tree view in the menu
             */
      var changeTreeView = Hierarchy.changeTreeView = function() {
        if(WebIDE.currentTree == 'physical' &amp;&amp; $(this).hasClass('hierarchyLogicalTree')) {
          $('.hierarchyChangeTree').off('click', changeTreeView);
          $('.hierarchyChangeTree.active').removeClass('active');
          WebIDE.currentTree = 'logical';
          WebIDE.setCookieHierarchy('currentTree', 'logical');
          $(this).addClass('active');
          reload();
        }
        else if($(this).hasClass('hierarchyPhysicalTree')) {
          $('.hierarchyChangeTree').off('click', changeTreeView);
          $('.hierarchyChangeTree.active').removeClass('active');
          WebIDE.currentTree = 'physical';
          WebIDE.setCookieHierarchy('currentTree', 'physical');
          $(this).addClass('active');
          reload();
        }
      };

      /**
             * Rename a page or a folder in the project :
             * 1/ Use the ApplicationRename page to rename the content
             * 2/ Update the hierarchy if success
             * @input String type : the type of content to rename (file or folder)
             * @input String renameFrom : the name to change
             * @input String renameTo : the new name
             */
      var rename = Hierarchy.rename = function(type, renameFrom, renameTo, updateList) {
        if(!WebIDE.SAVING) {
          WebIDE.setSavingState(true, Translations.hierarchy.renaming);
          var addUpdateList = '&amp;updateList='+updateList;
          $.ajax({
            url: WebIDE.wikiGetURL+"WebIDECode/ApplicationRename",
            type: "POST",
            data: "outputSyntax=plain&amp;"+type+"=1&amp;masterPage="+WebIDE.masterSpace+"."+WebIDE.masterPage+"&amp;renameFrom="+renameFrom+"&amp;renameTo="+renameTo+addUpdateList,
          }).success(function(data) {
            WebIDE.setSavingState(false, Translations.hierarchy.renamed, 2500);
            reload();
          }).error(function(xhr) {
            WebIDE.setSavingState(false, xhr.statusText, 4000, 'red');
          });
        }
      };

      /**
             * Remove a folder from the hierarchy (= from the project) :
             * 1/ Get the list of folders in the project
             * 2/ Check if the folder is in the project and remove it if necessary
             * 3/ Update the hierarchy if success
             * @input String folder
             */
      var removeFolder = Hierarchy.removeFolder = function(folder) {
        WebIDE.setHierarchyState(Translations.hierarchy.folder.removing);
        $.ajax({
          url: WebIDE.getDocumentReferenceData('restURL')+"/objects/WebIDECode.ApplicationClass/0/properties/spaces",
          type: "GET",
          contentType: "application/xml",
        }).success(function(res){
          var oldSpaces = $(res).find('value').text();
          var spaceArray = oldSpaces.split('|');
          var indexSpace = $.inArray(decodeURIComponent(folder), spaceArray)
          if(indexSpace &gt;= 0) {
            spaceArray.splice(indexSpace, 1);
            $.ajax({
              url: WebIDE.getDocumentReferenceData('restURL')+"/objects/WebIDECode.ApplicationClass/0/properties/spaces",
              type: "PUT",
              contentType: "application/x-www-form-urlencoded",
              accept: "application/xml",
              data: "property#spaces="+encodeURIComponent(spaceArray),
            }).success(function(){
              WebIDE.setHierarchyState(Translations.hierarchy.folder.removed, 2500);
              reload();
            }).error(function(xhr){
              WebIDE.setHierarchyState(xhr.statusText, 4000, 'red');
            });
          }
          else {
            console.log(Translations.hierarchy.folder.notFound);
          }
        });
      };

      /**
       * Remove a page from the hierarchy (= from the project) :
       * 1/ Get the list of pages in the project
       * 2/ Check if the page is in the project and remove it if necessary
       * 3/ Update the hierarchy if success
       * @input String page
       */
      var removePage = Hierarchy.removePage = function(page) {
        WebIDE.setHierarchyState(Translations.hierarchy.page.removing);
        $.ajax({
          url: WebIDE.getDocumentReferenceData('restURL')+"/objects/WebIDECode.ApplicationClass/0/properties/pages",
          type: "GET",
          contentType: "application/xml",
        }).success(function(res){
          var oldPages = $(res).find('value').text();
          var pageArray = oldPages.split('|');
          var indexSpace = $.inArray(page, pageArray)
          if(indexSpace &gt;= 0) {
            pageArray.splice(indexSpace, 1);
            $.ajax({
              url: WebIDE.getDocumentReferenceData('restURL')+"/objects/WebIDECode.ApplicationClass/0/properties/pages",
              type: "PUT",
              contentType: "application/x-www-form-urlencoded",
              accept: "application/xml",
              data: "property#pages="+encodeURIComponent(pageArray),
            }).success(function(){
              WebIDE.setHierarchyState(Translations.hierarchy.page.removed, 2500);
              reload();
            }).error(function(xhr){
              WebIDE.setHierarchyState(xhr.statusText, 4000, 'red');
            });
          }
        });
      };

      /**
       * Add a folder in the hierarchy list :
       * 1/ Check that the folder doesn't already exists
       * 2/ Add the folder in the list alphabetically sorted
       * 3/ Update the hierarchy
       * @input String folder
       */
      var addFolder = Hierarchy.addFolder = function(folder) {
        WebIDE.setHierarchyState(Translations.hierarchy.folder.adding);
        $.ajax({
          url: WebIDE.getDocumentReferenceData('restURL')+"/objects/WebIDECode.ApplicationClass/0/properties/spaces",
          type: "GET",
          contentType: "application/xml",
        }).success(function(res){
          var oldSpaces = $(res).find('value').text();
          var spaceArray = oldSpaces.split('|');
          if($.inArray(folder, spaceArray) == -1) {
            spaceArray.push(folder);
            spaceArray = spaceArray.sort();
            $.ajax({
              url: WebIDE.getDocumentReferenceData('restURL')+"/objects/WebIDECode.ApplicationClass/0/properties/spaces",
              type: "PUT",
              contentType: "application/x-www-form-urlencoded",
              accept: "application/xml",
              data: "property#spaces="+encodeURIComponent(spaceArray),
            }).success(function(){
              $('#hierarchyNewFolderName').val('');
              if(WebIDE.bootstrap()) {
                $('#hierarchyFolderModal').modal('hide');
              }
              else {
                WebIDE.closeModalNoBootstrap();
              }
              WebIDE.setHierarchyState(Translations.hierarchy.folder.added, 2500);
              reload();
            }).error(function(xhr){
              $('#hierarchyNewFolderName').val('');
              if(WebIDE.bootstrap()) {
                $('#hierarchyFolderModal').modal('hide');
              }
              else {
                WebIDE.closeModalNoBootstrap();
              }
              WebIDE.setHierarchyState(xhr.statusText, 4000, 'red');
            });
          }
        });
      };

      /**
       * Add an existing page in the hierarchy list :
       * 1/ Check that the page exists
       * 2/ Add the page in the list alphabetically sorted
       * 3/ Update the hierarchy
       * @input String fullName
       */
      var addExistingPage = Hierarchy.addExistingPage = function(pageFullName) {
        var existingPage = pageFullName;
        var existingPageList = WebIDE.getSpaceAndName(existingPage);
        var existingPageSpace = existingPageList[0];
        var existingPageName = existingPageList[1];
        var restSpaces = WebIDE.getRestSpacesString(existingPageSpace);
        var restSpacesMaster = WebIDE.getRestSpacesString(WebIDE.masterSpace);
        WebIDE.setHierarchyState(Translations.hierarchy.page.adding);
        $.ajax({
          url: "/"+XWiki.webapppath+"rest/wikis/"+WebIDE.getDocumentReferenceData('wiki')+"/"+restSpaces+"/pages/"+existingPageName,
          type: "GET",
          contentType: "application/xml",
        }).error(function(){
          $('#hierarchyExistingPageModalError').html('ERROR : Unexisting page').show().delay(4000).queue(function(n) {
            $(this).hide().html('');
            n();
          });
        }).success(function(){
          $.ajax({
            url: "/"+XWiki.webapppath+"rest/wikis/"+WebIDE.getDocumentReferenceData('wiki')+"/"+restSpacesMaster+"/pages/"+WebIDE.masterPage+"/objects/WebIDECode.ApplicationClass/0/properties/pages",
            type: "GET",
            contentType: "application/xml",
          }).success(function(res){
            var oldPages = $(res).find('value').text();
            var pageArray = oldPages.split('|');
            if($.inArray(existingPage, pageArray) == -1) {
              pageArray.push(existingPage);
              pageArray = pageArray.sort();
              $.ajax({
                url: WebIDE.getDocumentReferenceData('restURL')+"/objects/WebIDECode.ApplicationClass/0/properties/pages",
                type: "PUT",
                contentType: "application/x-www-form-urlencoded",
                accept: "application/xml",
                data: "property#pages="+encodeURIComponent(pageArray),
              }).success(function(){
                $('#hierarchyExistingPageName').val('');
                if(WebIDE.bootstrap()) {
                  $('#hierarchyExistingPageModal').modal('hide');
                }
                else {
                  WebIDE.closeModalNoBootstrap();
                }
                WebIDE.setHierarchyState(Translations.hierarchy.page.added, 2500);
                reload();
              }).error(function(xhr){
                $('#hierarchyExistingPageName').val('');
                if(WebIDE.bootstrap()) {
                  $('#hierarchyExistingPageModal').modal('hide');
                }
                else {
                  WebIDE.closeModalNoBootstrap();
                }
                WebIDE.setHierarchyState(xhr.statusText, 4000, 'red');
              });
            }
          });
        });
      };

      // Contains all events that have to be registered again each time the hierarchy is updated (mostly "click" events on elements in the hierarchy)
      var init = Hierarchy.init = function() {
        // Display or hide the content of a folder by clicking on its name
        $('.hierarchy-toggleFolder').off('click');
        $('.hierarchy-toggleFolder').on('click', function(){
          var spaceToggle = $(this).attr('data-space');
          $(document.getElementById('hierarchySpace_'+spaceToggle)).toggle();
          var indexSpace = $.inArray(spaceToggle, WebIDE.visibleSpaces);
          if($(document.getElementById('hierarchySpace_'+spaceToggle)).is(':hidden')) {
            if(indexSpace &gt;= 0) {
              WebIDE.visibleSpaces.splice(indexSpace, 1);
            }
            $(document.getElementById('hierarchyFolderIcon_'+spaceToggle)).find('span').attr('class', 'fa fa-caret-right');
          }
          else {
            if(indexSpace &lt; 0) {
              WebIDE.visibleSpaces.push(spaceToggle);
            }
            $(document.getElementById('hierarchyFolderIcon_'+spaceToggle)).find('span').attr('class', 'fa fa-caret-down');
          }
          WebIDE.setCookieHierarchy('visibleSpaces', WebIDE.visibleSpaces);
        });
        // Display or hide the details of a page by clicking on its name
        $('.hierarchy-displayPage').off('click');
        $('.hierarchy-displayPage').on('click', function(){
          var pageToggle = $(this).attr('data-pageid');
          $(document.getElementById('hierarchyPageDetails_'+pageToggle)).toggle();
          var indexPage = $.inArray(pageToggle, WebIDE.visiblePages);
          if($(document.getElementById('hierarchyPageDetails_'+pageToggle)).is(':hidden')) {
            if(indexPage &gt;= 0) {
              WebIDE.visiblePages.splice(indexPage, 1);
            }
            $(this).find('.hierarchyDisplayPageIcon &gt; span').attr('class', 'fa fa-caret-right');
          }
          else {
            if(indexPage &lt; 0) {
              WebIDE.visiblePages.push(pageToggle);
            }
            $(this).find('.hierarchyDisplayPageIcon &gt; span').attr('class', 'fa fa-caret-down');
          }
          WebIDE.setCookieHierarchy('visiblePages', WebIDE.visiblePages);
        });
        $('.hierarchy-toggleCategory').off('click');
        $('.hierarchy-toggleCategory').on('click', function(){
          var category = $(this).attr('data-category');
          $(document.getElementById('hierarchyCategory_'+category)).toggle();
          var indexCategory = $.inArray(category, WebIDE.visibleCategory);
          if($(document.getElementById('hierarchyCategory_'+category)).is(':hidden')) {
            if(indexCategory &gt;= 0) {
              WebIDE.visibleCategory.splice(indexCategory, 1);
            }
            $(this).find('.hierarchyDisplayPageIcon &gt; span').attr('class', 'fa fa-caret-right');
          }
          else {
            if(indexCategory &lt; 0) {
              WebIDE.visibleCategory.push(category);
            }
            $(this).find('.hierarchyDisplayPageIcon &gt; span').attr('class', 'fa fa-caret-down');
          }
          WebIDE.setCookieHierarchy('visibleCategory', WebIDE.visibleCategory);
        });
        // Add a folder (if no bootstrap)
        $('.newFolder').off('click');
        $('.newFolder').on('click', function(e){
          e.preventDefault();
          if(!WebIDE.bootstrap()) {
            WebIDE.openModalNoBootstrap('#hierarchyFolderModal');
            _addFolderModalShortcut();
          }
        });
        // Add an existing page (if no bootstrap)
        $('.newExistingPage').off('click');
        $('.newExistingPage').on('click', function(e){
          e.preventDefault();
          if(!WebIDE.bootstrap()) {
            WebIDE.openModalNoBootstrap('#hierarchyExistingPageModal');
            _addExistingPageModalShortcut();
          }
        });

        // Remove a folder by clicking on the cross
        $('.hierarchy-remove-folder').off('click');
        $('.hierarchy-remove-folder').on('click', function(){
          removeFolder(decodeURI($(this).attr('data-space')));
        });
        // Remove a page by clicking on the cross
        $('.hierarchy-remove-page').off('click');
        $('.hierarchy-remove-page').on('click', function(){
          removePage(decodeURI($(this).attr('data-pageid')));
        });
        // Rename a folder by clicking on the pencil
        $('.hierarchy-rename-folder').off('click');
        $('.hierarchy-rename-folder').on('click', function(){
          var selector = document.getElementById('renameFolder_'+$(this).attr('data-space'));
          var selector2 = document.getElementById('hierarchyDisplaySpace_'+$(this).attr('data-space'));
          $(selector).show();
          $(selector).val(decodeURIComponent($(this).attr('data-subspace')));
          var renameFrom = $(this).attr('data-space');
          $(selector2).parent().hide();
          $(selector).focus();
          $(selector).focusout(function() {
            $(selector).hide();
            $(selector).val(renameFrom);
            $(selector2).parent().show();
            shortcut.remove("Esc");
            shortcut.remove("Enter");
          });
          shortcut.add("Esc", function() {
            $(selector).hide();
            $(selector).val(renameFrom);
            $(selector2).parent().show();
            shortcut.remove("Esc");
            shortcut.remove("Enter");
          });
          shortcut.add("Enter", function() {
            var renameTo = $(selector).val();
            rename('space', renameFrom, renameTo);
            shortcut.remove("Esc");
            shortcut.remove("Enter");
          });
        });
        // Rename a page by clicking on the pencil
        $('.hierarchy-rename-page').off('click');
        $('.hierarchy-rename-page').on('click', function(){
          var selector = document.getElementById('renamePage_'+$(this).attr('data-pageid'));
          var selector2 = document.getElementById('hierarchyDisplayPage_'+$(this).attr('data-pageid'));
          var updatePageList = $(selector).attr('data-pageinlist');
          $(selector).show();
          $(selector).val(decodeURIComponent($(this).attr('data-pageid')));
          var renameFrom = $(selector).val();
          $(selector2).parent().hide();
          $(selector).focus();
          $(selector).focusout(function() {
            $(selector).hide();
            $(selector).val(renameFrom);
            $(selector2).parent().show();
            shortcut.remove("Esc");
            shortcut.remove("Enter");
          });
          shortcut.add("Esc", function() {
            $(selector).hide();
            $(selector).val(renameFrom);
            $(selector2).parent().show();
            shortcut.remove("Esc");
            shortcut.remove("Enter");
          });
          shortcut.add("Enter", function() {
            var renameTo = $(selector).val();
            rename('page', renameFrom, renameTo, updatePageList);
            shortcut.remove("Esc");
            shortcut.remove("Enter");
          });
        });
        for (var editor in Modules) {
          Modules[editor].initMenu();
        }
      };

      /**
       * Initialize the modals (with or without Bootstrap) and their one-time events (shown, hidden, clicks)
       */
      var initModals = Hierarchy.initModals = function() {
        for (var editor in Modules) {
          Modules[editor].initModals();
        }
        // If Bootstrap is disabled (Colibri skin), create custom modals. Let a delay before testing bootstrap in case it is loaded after the Web IDE.
        window.setTimeout(function () {
          if(!WebIDE.bootstrap()) {
            $('button[data-dismiss="modal"]').click(function() {
              WebIDE.closeModalNoBootstrap();
            });
            $('.modal').css({
              "width" : "40%",
              "border" : "1px solid black",
              "backgroundColor" : "#FFFFFF",
              "borderRadius" : "5px",
              "position" : "fixed",
              "left" : "30%",
              "top" : "20%",
              "padding" : "10px",
              "zIndex" : "1000"
            });
            $('.modal-header .close').css({
              "float" : "right",
              "position" : "absolute",
              "right" : "5px",
              "top" : "5px"
            });
            // Add support for the bootstrap buttons in Colibri skin (.btn, .btn-primary, .btn-success, .btn-danger, .btn-default)
            $('html &gt; head').append($('&lt;style&gt;.btn{border-radius:5px;padding:3px;color:white;cursor:pointer;}.btn-primary{background-color:#337AB7;border-color:#2E6DA4;}.btn-success{background-color:#5CB85C;border-color:#4CAE4C;}.btn-danger{background-color:#C9302C;border-color:#AC2925;}.btn-default{border-color:#000000;color:black;}&lt;/style&gt;'));
          }
        }, 100);
        $('input[type=radio][name=hierarchyAddPageType]').change(function() {
          if(this.value == 'content') {
            $('#hierarchyAddPageItemBlock').hide();
          }
          else if(this.value == 'item') {
            $('#hierarchyAddPageItemBlock').show();
            $('#hierarchyAddPageItem').html($('#hierarchyUpdatedClassList').html());
          }
        });
        $('#backgroundModalNoBootstrap').click(WebIDE.closeModalNoBootstrap);
        // Reset the tab to close when the user cancel the action :
        $('#hierarchyCloseTabModal').on('hidden.bs.modal', WebIDE.resetTabToClose);
        // Autofocus on text inputs when a modal appears and "Enter" shortcut:
        $('#hierarchyFolderModal').on('shown.bs.modal', _addFolderModalShortcut);
        $('#hierarchyExistingPageModal').on('shown.bs.modal', _addExistingPageModalShortcut);
        $('#hierarchyFolderModal').on('hidden.bs.modal', WebIDE.removeEnterShortcut);
        $('#hierarchyExistingPageModal').on('hidden.bs.modal', WebIDE.removeEnterShortcut);
        $('#hierarchyAddFolder').click(function(e){
          $('body').removeClass('modal-open');
          e.preventDefault();
          if($('#hierarchyNewFolderName').val().trim()) {
            addFolder($('#hierarchyNewFolderName').val());
          }
          else {
            $('#hierarchyFolderModalError').html(Translations.hierarchy.folder.modalError).show().delay(4000).queue(function(n) {
              $(this).hide().html('');
              n();
            });
          }
        });
        $('#hierarchyAddExistingPage').click(function(e){
          $('body').removeClass('modal-open');
          e.preventDefault();
          if($('#hierarchyExistingPageName').val().trim()) {
            addExistingPage($('#hierarchyExistingPageName').val());
          }
          else {
            $('#hierarchyExistingPageModalError').html(Translations.hierarchy.page.modalError).show().delay(4000).queue(function(n) {
              $(this).hide().html('');
              n();
            });
          }
        });
        $('#hierarchyNewFolderName').bind('keypress', function (event) {
          var code = (!event.charCode ? event.which : event.charCode);
          if (code == 61) { // Prevent '=' in the space name, it crashes the project permanently
            event.preventDefault();
            return false;
          }
        });

        // Save or discard the content when a tab is closed ? :
        $('#hierarchySaveAndCloseModal, #hierarchyDiscardAndCloseModal').click(function(e){
          e.preventDefault();
          if(!WebIDE.SAVING &amp;&amp; !WebIDE.LOADING &amp;&amp; WebIDE.nextTabToClose) {
            var closedTab = WebIDE.nextTabToClose;
            var tabNumberId = $(closedTab).attr('data-tabnumber');
            $('body').removeClass('modal-open');
            if(WebIDE.bootstrap()) {
              $('#hierarchyCloseTabModal').modal('hide');
            }
            else {
              WebIDE.closeModalNoBootstrap();
            }
            // Determine the editor used in the selected tab
            var selectedTabEditor = $(closedTab).attr('data-editor');
            if($(this).attr('id') === 'hierarchySaveAndCloseModal') {
              Modules[selectedTabEditor].save(tabNumberId, false, true, false);
            }
            WebIDE.removeTab(closedTab, tabNumberId);
          }
        });
      };

      /**
       * Add the "Enter" shortcut (meaning the user agreed to do the selected action) when a modal is shown/hidden
       */
      var _addFolderModalShortcut = Hierarchy._addFolderModalShortcut = function() {
        $('#hierarchyNewFolderName').focus();
        shortcut.add("Enter", function() {
          $('#hierarchyAddFolder').click();
        });
      };
      var _addExistingPageModalShortcut = Hierarchy._addExistingPageModalShortcut = function() {
        $('#hierarchyExistingPageName').focus();
        shortcut.add("Enter", function() {
          $('#hierarchyAddExistingPage').click();
        });
      }

      return Hierarchy;
    }
  };
});</code>
    </property>
    <property>
      <name>WebIDE menu</name>
    </property>
    <property>
      <parse>0</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <content/>
</xwikidoc>
