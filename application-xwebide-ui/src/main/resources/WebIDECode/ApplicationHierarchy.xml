<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc reference="WebIDECode.ApplicationHierarchy" locale="">
  <web>WebIDECode</web>
  <name>ApplicationHierarchy</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>WebIDECode.ApplicationClass</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1434704312000</creationDate>
  <date>1469540831000</date>
  <contentUpdateDate>1469520743000</contentUpdateDate>
  <version>1.1</version>
  <title>ApplicationHierarchy</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WebIDECode.ApplicationHierarchy</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>95d6ad85-599f-40f3-b936-d2312fb7a8df</guid>
    <property>
      <cache>default</cache>
    </property>
    <property>
      <code>var syntaxHURL = document.getElementById('syntaxHURL').value;
var translationsURL = document.getElementById('translationsURL').value;

#set ($menuRef = $services.model.resolveDocument("WebIDECode.WebIDE_menu"))
#set ($wikiRef = $services.model.resolveDocument("WebIDECode.WebIDE_wiki"))
#set ($objectRef = $services.model.resolveDocument("WebIDECode.WebIDE_object"))
#set ($classRef = $services.model.resolveDocument("WebIDECode.WebIDE_class"))
var required = ['jquery',
                  translationsURL,
                  syntaxHURL,
                  "$xwiki.getURL($menuRef, 'jsx')",
                  "$xwiki.getURL($wikiRef, 'jsx')",
                  "$xwiki.getURL($objectRef, 'jsx')",
                  "$xwiki.getURL($classRef, 'jsx')"];
if(require.toUrl('xwiki-meta').substr(0,7) === '/xwiki/') {
  required = required.concat(['xwiki-meta', 'bootstrap']);
}
else {
  required = required.concat(['bootstrap']);
}
var WebIDESavedContent = []; //Global variable : WebIDE plugins (such as RealTime) should be able to modify the value of the saved content
require(required , function ($, Translations, SH, HierarchyJS, WikiEditorJS, ObjectEditorJS, AWMClassEditorJS, xm) {

  /*
   * STRUCTURE:
   ** Define WebIDE Core Module
   *** Variables
   *** Commons API
   ** Load modules
   ** Start
   */

  // Modules
  var Hierarchy = {};
  var Modules = {};

  var WebIDE = {
    currentSpace : '',
    currentPage : '',
    masterSpace : '',
    masterPage : '',
    currentTree : '',
    currentEditor : '',
    syntaxHighlighting : (window.localStorage['XWiki.extension.WebIDE.CodeMirror.disable'] &amp;&amp; window.localStorage['XWiki.extension.WebIDE.CodeMirror.disable'] == 1) ? false : true, //Is SyntaxHighlighting enabled?
    SAVING : false,
    LOADING : false,
    NESTED_SPACES : ($('#xwikiNested').val() === "true"),
    TAB_MAIN_CONTAINER : '#contentMainBlock',
    nextTabToClose : null,
    tabCount : 0, //Number of tab created since the page is loaded
    saveAllList : [],
    savedAll : -1,
    savedAllError : [],
    visibleSpaces : [], //Change in Hierarchy.init() when the user expands/collapses the menu
    visiblePages : [], //Same
    visibleCategory : [], //Same
    wikiGetURL : '',
    wikiViewURL : '',
    ssxUrl : '',
    loadList : [],
    fullscreen : false,
    codeMirrorParams : [[],{}],
    restorePreviousSession : function() {
      // Open all tabs from last session
      var openedTabs = window.localStorage['XWiki.extension.XWebIDE.'+WebIDE.masterPage+'.tabs'];
      if(openedTabs) {
        var tabsArray = openedTabs.split(',');
        for(var index = 0; index &lt; tabsArray.length; index++) {
          var tab = decodeURIComponent(tabsArray[index]).split(',');
          var tabEditor = decodeURIComponent(tab[0]);
          var tabSpace = decodeURIComponent(tab[1]);
          var tabPage = decodeURIComponent(tab[2]);
          var tabParameters = decodeURIComponent(tab[3]).split(',');
          WebIDE.loadList.push([tabEditor, tabSpace, tabPage, tabParameters]);
        }
      }
      // Initialize the first tab to display
      if(WebIDE.currentEditor === 'class') {
        setActiveTab('class', getCurrentPage(false), getCurrentSpace(false), []);
      }
      else if(WebIDE.currentEditor === "view" &amp;&amp; WebIDE.loadList.length === 0) {
        initViewEditor();
        setActiveTab('view', getCurrentPage(false), getCurrentSpace(false), []);
      }
      else if(WebIDE.currentEditor === "view") {
        initViewEditor();
        WebIDE.continueLoadAll();
      }
      else { //Element loaded from hash : added to loadList
        WebIDE.loadList.push([WebIDE.currentEditor, getCurrentSpace(false), getCurrentPage(false), Modules[WebIDE.currentEditor].getParameters()]);
        WebIDE.continueLoadAll();
      }
    },
    continueLoadAll : function() {
      if(WebIDE.loadList.length &gt; 0) {
        var tabToLoad = WebIDE.loadList.shift();
        goToNewPage(tabToLoad[0], tabToLoad[2], tabToLoad[1], tabToLoad[3], true);
      }
    },
    toggleFullScreen : function() {
      WebIDE.fullscreen = !WebIDE.fullscreen;
      if(WebIDE.fullscreen) { //Switch fullscreen ON
        $('#editorBlock').addClass('editor-fullscreen');
        $('#footerglobal').hide();
        $('#contentMainBlock').css({
          "height" : ($(window).height()-$('#editorTabBar').outerHeight()-$('#hierarchyBottomActionsBar').outerHeight()-10)+"px"
        });
        $('.actionmenu').hide();
      }
      else { //Switch fullscreen OFF
        $('#editorBlock').removeClass('editor-fullscreen');
        $('#footerglobal').show();
        $('#contentMainBlock').css({
          "height" : "auto"
        });
        $('.actionmenu').show();
      }
      $('.editorOtherFieldsBlockContent').hide();
      $('.editorOtherFieldsBlockTitle').hide();
      $('.editorOtherFieldsBlock').css({
        'width' : 'auto',
      });
      $('.editorDisplayAdvancedFields').html($('#hierarchyClose').html());
      WebIDE.alignBottomBar();
      $(window).resize(WebIDE.fixContentBlockHeight);
    },
    fixContentBlockHeight : function() {
      if(WebIDE.fullscreen) {
        $('#contentMainBlock').css({
          "height" : ($(window).height()-$('#editorTabBar').outerHeight()-$('#hierarchyBottomActionsBar').outerHeight()-10)+"px"
        });
      }
    },
    alignBottomBar : function() {
      if(WebIDE.fullscreen) {
        $('#hierarchyBottomActionsBar').css({'marginLeft' : '0px'});
      }
      else {
        $('#hierarchyBottomActionsBar').css({'marginLeft' : $('#hierarchyBlock').outerWidth()+'px'});
      }
    },
    saveOpenedTabs : function() {
      var unsaved = false;
      var openedTabs = [];
      $('.editorTabButton').each(function(index, elt) {
        var editor = $(elt).attr('data-editor');
        var space = $(elt).attr('data-space');
        var page = $(elt).attr('data-page');
        var parameters = Modules[editor].getParametersFromTab($(elt));
        var list = encodeURIComponent([encodeURIComponent(editor), encodeURIComponent(space), encodeURIComponent(page), encodeURIComponent(parameters)]);
        openedTabs.push(list);
        var tabNumberId = $(elt).attr('data-tabnumber');
        if(WebIDESavedContent[tabNumberId] != getCurrentContent(tabNumberId)) {
          unsaved = true;
        }
      });
      window.localStorage['XWiki.extension.XWebIDE.'+WebIDE.masterPage+'.tabs'] = openedTabs;
      return unsaved;
    },
    displayShortcutsInfo : function(shortcutBlock) {
      $(shortcutBlock).html(Translations.shortcuts + $('#editorHelpPanel').html());
    },
    init : function() {
      setCurrentPage(getDocumentReferenceData('page'));
      setCurrentSpace(getDocumentReferenceData('space'));
      setDocumentReferenceData();
      WebIDE.masterSpace = getDocumentReferenceData('space');
      WebIDE.masterPage = getDocumentReferenceData('page');
      WebIDE.currentTree = getCookieHierarchy('currentTree') || 'logical';
      WebIDE.currentEditor = (XWiki.editor === 'class') ? XWiki.editor : 'view';
      WebIDE.visibleSpaces = getCookieHierarchy('visibleSpaces').split(',');
      WebIDE.visiblePages = getCookieHierarchy('visiblePages').split(',');
      WebIDE.visibleCategory = getCookieHierarchy('visibleCategory').split(',');

      if(XWiki.webapppath.substr(0,1) === '/') {
        XWiki.webapppath = XWiki.webapppath.substr(1,(XWiki.webapppath.length-1));
      }

      // Get the "get" and "view" url structure for ajax queries
      WebIDE.wikiGetURL = '/'+XWiki.webapppath+''+XWiki.servletpath+'get/';
      if(window.docgeturl.indexOf('/get/') &gt;= 0) {
        WebIDE.wikiGetURL = window.docgeturl.substring(0,window.docgeturl.indexOf('/get/')+5);
      }
      WebIDE.wikiViewURL = '/'+XWiki.webapppath+''+XWiki.servletpath+'view/';
      if(window.docviewurl.indexOf('/'+XWiki.currentSpace+'/') &gt;= 0) {
        WebIDE.wikiViewURL = window.docviewurl.substring(0,window.docviewurl.indexOf('/'+XWiki.currentSpace+'/')+1);
      }

      // Check if FontAwesome is loaded, and load it if not
      WebIDE.ssxUrl = '/'+XWiki.webapppath+''+XWiki.servletpath+'ssx/';
      if (!$("link[href*='IconThemes/FontAwesome']").length) {
        $('&lt;link type="text/css" href="'+WebIDE.ssxUrl+'IconThemes/FontAwesome" rel="stylesheet"&gt;').appendTo("head");
      }

      // Change current editor and page if there is a hash
      var hashURL = window.location.hash.substring(1).split('&amp;!!');
      if(hashURL.size() &gt;= 5) {
        WebIDE.currentEditor = hashURL[1];
        WebIDE.currentTree = hashURL[2];
        setCurrentPage(decodeURIComponent(hashURL[3]));
        setCurrentSpace(decodeURIComponent(hashURL[4]));
      }
      if(hashURL.size() &gt; 5){
        Modules[WebIDE.currentEditor].initHash(hashURL);
        window.location.hash = '';
      }

      // Improve the F5 shortcut to stay on the current editor and the current page
      if(WebIDE.currentEditor !== 'class') {
        shortcut.add("F5", function() {
          var parameters = [];
          if(Modules[WebIDE.currentEditor]) {
            parameters = Modules[WebIDE.currentEditor].getParameters();
          }
          var hash = getHash(WebIDE.currentEditor, encodeURIComponent(getCurrentPage(false)), encodeURIComponent(getCurrentSpace(false)), parameters);
          window.location = window.docviewurl+hash;
          location.reload();
        });
      }

      // Display a warning message when the user try to close/reload the tab/window and he has unsaved content
      window.onbeforeunload = function() {
        if(WebIDE.currentEditor !== 'class') {
          var unsaved = WebIDE.saveOpenedTabs(); // Return true if there are unsaved tabs
          if(unsaved) {
            return Translations.core.unsavedContent;
          }
        }
      };

      // Change CodeMirror default parameters when an instance of the editor is created
      $('body').on('DOMNodeInserted', function(e) {
        if ($(e.target).is('.CodeMirror')) {
          window.setTimeout(function() {
            $(e.target).css({'height':'650px'});
            var cmInstance = $(e.target)[0].CodeMirror;
            cmInstance.setOption('lineWrapping', true);
            var parentTab = $(e.target).closest('.editorTab');
          }, 50);
        }
      });

      // WebIDE Configuration
      if(WebIDE.syntaxHighlighting) {
        $('#editorEnableCodeMirror').prop('checked', true);
      }
      $('#editorEnableCodeMirror').on('change', function() {
        if($(this).is(':checked')) {
          window.localStorage['XWiki.extension.WebIDE.CodeMirror.disable'] = 0;
          location.reload();
        }
        else {
          window.localStorage['XWiki.extension.WebIDE.CodeMirror.disable'] = 1;
          WebIDE.syntaxHighlighting = false;
          $('.CodeMirror').each(function(idx, elmt) {
            $(elmt)[0].CodeMirror.toTextArea();
          });
        }
      });

      // Check for unsaved content
      $('#contentMainBlock').on('keyup click', function(){
        if($.inArray(WebIDE.currentEditor, Object.keys(Modules)) &gt;= 0 &amp;&amp; !WebIDE.LOADING &amp;&amp; !WebIDE.SAVING) {
          // Display a star in the old tab button if there is unsaved content when we leave it
          var tabId = getTabId(WebIDE.currentEditor, getCurrentSpace(false), getCurrentPage(false), Modules[WebIDE.currentEditor].getParameters());
          var jQueryTabId = '#'+tabId;
          var tabNumberId = getTabNumber(jQueryTabId);
          if(WebIDE.tabCount &gt; 0 &amp;&amp; tabNumberId &gt; 0) {
            var unsavedState = (WebIDESavedContent[tabNumberId] !== getCurrentContent(tabNumberId));
            setStar(unsavedState, tabNumberId);
          }
        }
      });

      // Align the bottom action bar with the editor
      onElementWidthChange($('#hierarchyBlock'), WebIDE.alignBottomBar);
      WebIDE.alignBottomBar();

      // Add the click events for the buttons to hide or show the whole hierarchy
      $('#hierarchyClose').click(function(e){
        $('#hierarchyContent, .hierarchy-navbar').hide();
        $('#hierarchyOpenBlock').show();
        $('#hierarchyCloseBlock').hide();
        $("#hierarchyBlock").css({
          "min-width": "42px",
          "width": "42px"
        });
      });
      $('#hierarchyOpenBlock').click(function(e){
        $('#hierarchyOpenBlock').hide();
        $('#hierarchyCloseBlock').show();
        $('#hierarchyContent, .hierarchy-navbar').show();
        $("#hierarchyBlock").removeAttr('style');
      });
      $('#hierarchyRefresh').on('click', Hierarchy.reload);
      $('.hierarchyChangeTree').on('click', Hierarchy.changeTreeView);
    }
  };

  /*
   * COMMONS API
   * ---------------------------------
   * initEditor()
   * initViewEditor()
   * cancelAndViewIDE(newTab)
   * goToNewPage(mode, file, folder, parameters)
   * getHash(mode, file, folder, parameters)
   * resetAllParameters()
   * saveAll()
   * continueSaveAll(success, xhr, folder, file)
   * addSaveEvents(addEvents)
   * setStar(state, tabNumberId)
   */
  /**
   * Initialize editors
   * initEditor() : one-time initialization of the wiki/object editor (with tabs)
   * initViewEditor() : one-time initialization of the view mode for the master page
   */
  var initEditor = WebIDE.initEditor = function() {
    $('.editorViewElement').hide();
    $('.editorEditElement').css({"display" : "block"});
    addSaveEvents(true);
  };
  var initViewEditor = WebIDE.initViewEditor = function() {
    $('.editorEditElement').hide();
    $('.editorViewElement').css({"display" : "block"});
    addSaveEvents(false);
  };
  /**
   * Go to view mode of the current edited page
   * @input Boolean newTab : Open the view mode in a newtab
   */
  var cancelAndViewIDE = WebIDE.cancelAndViewIDE = function (newTab) {
    if(newTab) {
      window.open(WebIDE.wikiViewURL+getCurrentSpace(false, true)+'/'+getCurrentPage(false));
    }
    else {
      window.location.href = WebIDE.wikiViewURL+getCurrentSpace(false, true)+'/'+getCurrentPage(false);
    }
  };
  /**
   * goToNewPage() : change the current page to display
   * @input String mode: the edition mode to use (wiki or object)
   * @input String file: the file name of the document to edit
   * @input String folder: the folder name where is located the document to edit
   * @input String objectSelected: name of the object displayed (JSX, SSX, macro) when single-object editor
   * @input String objectNumber: number of the object displayed (JSX, SSX, macro) when single-object editor
   * @input String locale: the locale of the new tab
   */
  var goToNewPage = WebIDE.goToNewPage = function (mode, file, folder, parameters, loadAllTabs) {
    if(mode === 'class') {
      window.location.href = '/'+XWiki.webapppath+''+XWiki.servletpath+'edit/'+getURLSpacesString(folder)+'/'+file+'?editor=class#!XWebIDE';
    }
    else if(WebIDE.currentEditor === 'class') {
      var redirectHash = getHash(mode, file, folder, parameters);
      window.location.href = '/'+XWiki.webapppath+''+XWiki.servletpath+'view/'+getURLSpacesString(WebIDE.masterSpace)+'/'+WebIDE.masterPage+redirectHash;
    }
    else {
      if(!$(WebIDE.TAB_MAIN_CONTAINER).is(":visible")) {
        initEditor();
      }
      // Load the new tab data
      setCurrentPage(file);
      setCurrentSpace(folder);
      WebIDE.currentEditor = mode;
      resetAllParameters()
      Modules[WebIDE.currentEditor].setParameters(parameters);
      var tabId = getTabId(WebIDE.currentEditor, getCurrentSpace(false), getCurrentPage(false), Modules[WebIDE.currentEditor].getParameters());
      var jQueryTabId = '#'+tabId;
      //Open the tab
      if(!$(jQueryTabId).length) { //Create a new tab
        createTab(WebIDE.currentEditor, getCurrentSpace(false), getCurrentPage(false), Modules[WebIDE.currentEditor].getParameters());
        Modules[mode].load(loadAllTabs);
      }
      else { //Open an existing tab
        $('.editorTab').hide();
        $(jQueryTabId).show();
        if(WebIDE.syntaxHighlighting) {
          window.setTimeout(function() {
            $(jQueryTabId+' .CodeMirror').each(function(i, elmt) {
              $(elmt)[0].CodeMirror.refresh();
            });
          }, 50);
        }
        setActiveTab(WebIDE.currentEditor, getCurrentPage(false), getCurrentSpace(false), Modules[WebIDE.currentEditor].getParameters());
      }
      // CHange the effect of the bottom delete button (delete an object or a page or ?? depending on the current editor)
      Modules[WebIDE.currentEditor].setDeleteButton();
    }
  };
  /**
   * Get the hash which has to be added to the url to reload the current tab when reloading the page
   * @input String mode: the edition mode to use (wiki or object)
   * @input String file: the file name of the document to edit
   * @input String folder: the folder name where is located the document to edit
   * @input String objectSelected: name of the object displayed (JSX, SSX, macro) when single-object editor
   * @input String objectNumber: number of the object displayed (JSX, SSX, macro) when single-object editor
   * @input String locale: the locale of the new tab
   */
  var getHash = WebIDE.getHash = function (mode, file, folder, parameters) {
    var addParameters = '';
    if(parameters) {
      for (var index = 0; index &lt; parameters.length; ++index) {
        if(parameters[index]) {
          addParameters += '&amp;!!'+parameters[index];
        }
      }
    }
    return '#!XWebIDE&amp;!!'+mode+'&amp;!!'+WebIDE.currentTree+'&amp;!!'+file+'&amp;!!'+folder+addParameters;
  };
  /**
   * Reset parameters for all modules
   */
  var resetAllParameters = WebIDE.resetAllParameters = function () {
    for(var editor in Modules) {
      Modules[editor].resetParameters();
    }
  };
  /**
   * Get the list of tabs which need to be saved and initialize the saving phase.
   */
  var saveAll = WebIDE.saveAll = function () {
    var tabNumberId, mode;
    if(WebIDE.saveAllList.length === 0) {
      $('.editorTabButton').each(function(index, elmt) {
        tabNumberId = $(elmt).attr('data-tabnumber');
        mode = $(elmt).attr('data-editor');
        if(WebIDESavedContent[tabNumberId] != getCurrentContent(tabNumberId)) {
          WebIDE.saveAllList.push([mode, tabNumberId]);
        }
      });
      if(WebIDE.saveAllList.length &gt; 0) {
        setSavingState(true, Translations.core.savingAll);
        continueSaveAll(true);
      }
      else {
        setSavingState(false, Translations.core.alreadySavedAll, 2500);
      }
    }
  };
  /**
   * Save the tabs in the "saveAllList" one by one
   * @input Boolean success : Page successfully saved?
   * @input (opt) xhr : xhr object in case of error
   * @input (opt) String folder : Name of the folder in which the error happened
   * @input (opt) String file : Name of the file whose saving has failed
   */
  var continueSaveAll = WebIDE.continueSaveAll = function (success, xhr, folder, file) {
    WebIDE.savedAll = WebIDE.savedAll + 1;
    var saveTotal = WebIDE.saveAllList.length;
    if(!success) {
      WebIDE.savedAllError.push([xhr.statusText, folder, file]);
    }
    if(WebIDE.savedAll === saveTotal) {
      var msg = Translations.core.savedAll;
      var cssClass = 'green';
      var delay = 2500;
      if(WebIDE.savedAllError.length &gt; 0) {
        msg = Translations.core.saveAllError;
        WebIDE.savedAllError.each(function(index, elt) {
          msg += ' ['+elt[1]+'.'+elt[2]+' : '+elt[0]+']';
        });
        cssClass = 'red';
        delay = 5000;
      }
      setSavingState(false, msg, delay, cssClass);
      WebIDE.savedAll = -1;
      WebIDE.saveAllList = [];
      WebIDE.savedAllError = [];
    }
    else if(WebIDE.savedAll &lt; saveTotal) {
      if(WebIDE.savedAll !== 0) {
        var msg = WebIDE.savedAll+'/'+saveTotal+' '+Translations.core.saveAllTemp;
        var cssClass = 'green';
        if(WebIDE.savedAllError.length &gt; 0) {
          msg += ' ('+Translations.commons.error+': '+WebIDE.savedAllError.length+')';
          cssClass = 'red';
        }
        setSavingState(true, msg, null, cssClass);
      }
      var nextSave = WebIDE.saveAllList[WebIDE.savedAll];
      var mode = nextSave[0];
      var tabNumberId = nextSave[1];
      Modules[mode].save(tabNumberId, true, true, true);
    }
  };
  /**
   * addSaveEvents(addEvents)
   * Recreate the default shortcuts to save a page in XWiki in the Web IDE (Alt+S, Alt+Shift+S, Alt+C)
   * Remove the existing events and add them again if requested
   * @input Boolean addEvents : add the events or not?
   */
  var addSaveEvents = WebIDE.addSaveEvents = function (addEvents) {
    shortcut.remove("Alt+Shift+S");
    shortcut.remove("Alt+S");
    shortcut.remove("Alt+C");
    shortcut.remove("Alt+Shift+C");
    if(addEvents) {
      // Add events on buttons and shortcuts
      $('#hierarchySaveButtonIDE').click(function(e){
        e.preventDefault();
        saveEventsFunction(true);
      });
      $('#hierarchySaveViewButtonIDE').click(function(e){
        e.preventDefault();
        saveEventsFunction(false);
      });
      $('#hierarchyDiscardViewButtonIDE').click(function(e){
        e.preventDefault();
        cancelAndViewIDE(false);
      });
      $('#hierarchyViewTabButtonIDE').click(function(e){
        e.preventDefault();
        cancelAndViewIDE(true);
      });
      shortcut.add("Alt+Shift+S", function() {
        saveEventsFunction(true);
      });
      shortcut.add("Alt+S", function() {
        saveEventsFunction(false);
      });
      shortcut.add("Alt+C", function() {
        cancelAndViewIDE(false);
      });
      shortcut.add("Alt+Shift+C", function() {
        cancelAndViewIDE(true);
      });
    }
  };
  var saveEventsFunction = WebIDE.saveEventsFunction = function (continueEdit) {
    if(WebIDE.syntaxHighlighting) {
      synchronizeCodeMirrorContent();
    }
    var jQueryTabId = '#'+getTabId(WebIDE.currentEditor, getCurrentSpace(false), getCurrentPage(false), Modules[WebIDE.currentEditor].getParameters());
    var tabNumberId = getTabNumber(jQueryTabId);
    Modules[WebIDE.currentEditor].save(tabNumberId, true, continueEdit, false);
  };
  /**
   * Write a star in a inactive tab button if its content is unsaved
   * @input Boolean state : true = add the star, false = remove the star
   * @input Int tabNumberId : the number ID of the selected tab
   */
  var setStar = WebIDE.setStar = function (state, tabNumberId) {
    var tabStarElement = $('.editorTabButton[data-tabnumber="'+tabNumberId+'"] .unsavedTab');
    // Add a star in the hierarchy if the content has changed
    if(state == true) {
      tabStarElement.show();
    }
    else {
      tabStarElement.hide();
    }
  };

  /*
   * Common setters/getters
   * ---------------------------------
   * setSavingState(state, msg, delay, cssClass)
   * setLoadingState(state, msg, delay, cssClass)
   * setHierarchyState(msg, delay, cssClass)
   * setCurrentPage(file)
   * setCurrentSpace(folder)
   * getCurrentPage(escaped)
   * getCurrentSpace(escaped, url, rest)
   * setSavedContent(tab)
   * getCurrentContent(tabNumberId)
   * getDocumentReferenceData(dataType)
   * setDocumentReferenceData()
   */
  /**
   * Set the state of the loading and/or saving variable and the text in the information div
   * @input Boolean state: true = busy, false = not in use
   * @input (Opt) String msg: the message to display in the information div
   * @input (Opt) Int delay: the duration (in millisecond) for the display of the information div (infinite if not provided)
   * @input (Opt) String cssClass: The CSS class to add to the information div (only "red" is available for now)
   */
  var setState = WebIDE.setState = function (type, state, msg, delay, cssClass) {
    if(type === 1) { //saving
      WebIDE.SAVING = state;
      var message = 'Saving...';
      var htmlElement = $('#hierarchySavingState');
    }
    else if(type === 2) { //loading
      WebIDE.LOADING = state;
      var message = 'Loading...';
      var htmlElement = $('#hierarchyLoadingState');
    }
    else { //other operation
      var message = 'Processing...';
      var htmlElement = $('#hierarchyState');
    }
    if(msg) {message = msg;}
    if(cssClass) {
      htmlElement.attr('class', cssClass);
    }
    htmlElement.html('&lt;strong&gt;'+message+'&lt;/strong&gt;').show();
    if(delay) {
      htmlElement.delay(delay).queue(function(n) {
        $(this).hide().removeAttr('class').html('');
        n();
      });
    }
  };
  var setSavingState = WebIDE.setSavingState = function (state, msg, delay, cssClass) {
    setState(1, state, msg, delay, cssClass);
  };
  var setLoadingState = WebIDE.setLoadingState = function (state, msg, delay, cssClass) {
    setState(2, state, msg, delay, cssClass);
  };
  var setHierarchyState = WebIDE.setHierarchyState = function (msg, delay, cssClass) {
    setState(3, true, msg, delay, cssClass);
  };
  /**
   * Set data about the current document edited
   * @input String file/folder/objName/objNumber: the value currently used in the editor
   */
  var setCurrentPage = WebIDE.setCurrentPage = function (file) {
    WebIDE.currentPage = file;
  };
  var setCurrentSpace = WebIDE.setCurrentSpace = function (folder) {
    WebIDE.currentSpace = folder;
  };
  /**
   * Get data about the current document edited
   * @input Boolean escaped: return an escaped (with backslashes) string of the requested data (My\.Folder.My\.Nested\.Folder or My\.Page)
   * @input Boolean url: return an URL-formatted string representing the folder (A/B/C)
   * @input Boolean rest: return an REST-formatted string representing the folder (spaces/A/spaces/B/spaces/C/)
   */
  var getCurrentPage = WebIDE.getCurrentPage = function (escaped) {
    if(escaped) {return getEscapedValue(WebIDE.currentPage);}
    else {return WebIDE.currentPage;}
  };
  var getCurrentSpace = WebIDE.getCurrentSpace = function (escaped, url, rest) {
    if(escaped) {return getSpacesEscaped(WebIDE.currentSpace);}
    else if(url) {return getURLSpacesString(WebIDE.currentSpace)}
    else if(rest) {return getRestSpacesString(WebIDE.currentSpace);}
    else {return WebIDE.currentSpace;}
  };
  var getEscapedValue = WebIDE.getEscapedValue = function (file) {
    return file.replace('%5C', '%5C%5C').replace(/\\/g, '%5C%5C').replace(/\./g, '%5C.');
  };
  /**
   * Save the value of the document saved in XWiki for the selected tab
   * @input Int tab: the number ID of a tab
   * The "savedContent" variable can then be compared with the current content (getCurrentContent(tab)) to know if modifications have been done in the document
   */
  var setSavedContent = WebIDE.setSavedContent = function (tab) {
    if(tab) {
      WebIDESavedContent[tab] = getCurrentContent(tab);
    }
  };
  /**
   * Get a text value of the selected tab's content
   * @input Int tabNumberId: the number ID of a tab
   * @out The textarea value of a wiki editor tab or the concatenated string value of an object editor tab
   */
  var getCurrentContent = WebIDE.getCurrentContent = function (tabNumberId) {
    var currentContent = '';
    var tabElement = null;
    // Get the tab main "div" from its number or from the current tab
    if(tabNumberId) {
      tabElement = $('.editorTab[data-tabnumber="'+tabNumberId+'"]');
    }
    else {
      tabElement = $('#'+getTabId(WebIDE.currentEditor, getCurrentSpace(false), getCurrentPage(false), Modules[WebIDE.currentEditor].getParameters()));
      var tabNumberId = $(tabElement).attr('data-tabnumber');
    }
    // Determine the editor used in the selected tab
    var selectedTabEditor = $('.editorTabButton[data-tabnumber="'+tabNumberId+'"]').attr('data-editor');
    // Get the content of the tab, depending on its editor
    if(WebIDE.syntaxHighlighting) {synchronizeCodeMirrorContent();}
    return Modules[selectedTabEditor].getCurrentContent(tabElement);
  };
  /**
   * Get data from about the current document (i.e. the master page) from XWiki API
   */
  var getDocumentReferenceData = WebIDE.getDocumentReferenceData = function (dataType) {
    var restURL = xm ? xm.restURL : $('meta[name="restURL"]').attr('content');
    switch(dataType) {
      case 'wiki':
        return xm ? xm.wiki : $('meta[name="wiki"]').attr('content');
        break;
      case 'space':
        return xm ? xm.space : $('meta[name="space"]').attr('content');
        break;
      case 'page':
        return xm ? xm.page : $('meta[name="page"]').attr('content');
        break;
      case 'fullName':
        return xm ? xm.document : $('meta[name="document"]').attr('content');
        break;
      case 'form_token':
        return xm ? xm.form_token : $('meta[name="form_token"]').attr('content');
        break;
      case 'restURL':
        return (typeof restURL != 'undefined') ? restURL : '/'+XWiki.webapppath+'rest/wikis/'+getDocumentReferenceData('wiki')+'/'+getRestSpacesString(getDocumentReferenceData('space'))+'/pages/'+getDocumentReferenceData('page');
        break;
      default:
        return xm ? (xm.documentReference ? xm.documentReference : xm.wiki+':'+xm.space+'.'+xm.page) : $('meta[name="wiki"]').attr('content')+':'+$('meta[name="space"]').attr('content')+'.'+$('meta[name="page"]').attr('content');
    }
  };
  /**
   * Override or create a 'xm' variable in the __class__ editor in order to get the right values.
   * "xm" (xwiki-meta) represents an XWiki document and should contain data about the master page.
   */
  var setDocumentReferenceData = WebIDE.setDocumentReferenceData = function () {
    if(XWiki.editor == 'class') {
      xm = {
        wiki: getDocumentReferenceData('wiki'),
        space: $('#hierarchyMasterDocSpace').val(),
        page: $('#hierarchyMasterDocName').val(),
        document: $('#hierarchyMasterDocSpace').val()+'.'+$('#hierarchyMasterDocName').val(),
        form_token: getDocumentReferenceData('form_token'),
        restURL: '/'+XWiki.webapppath+'rest/wikis/'+getDocumentReferenceData("wiki")+'/'+getRestSpacesString($('#hierarchyMasterDocSpace').val())+'/pages/'+$('#hierarchyMasterDocName').val(),
        documentReference: getDocumentReferenceData('wiki')+':'+$('#hierarchyMasterDocSpace').val()+'.'+$('#hierarchyMasterDocName').val()
      };
    }
  };

  /*
   * Title tools
   * ---------------------------------
   * getRawTitle(folder, file, locale)
   * getParentPage(folder, file, locale)
   * getCurrentTitle(tabId)
   * getCurrentParent(jQueryTabId)
   */
  /**
   * Get the raw title of the selected document
   * @input String folder: the space of the document
   * @input String file: the name of the document
   */
  var getRawTitle = WebIDE.getRawTitle = function (folder, file, locale) {
    var editPageTitle = $('.editPage[data-space="'+folder+'"][data-page="'+file+'"][data-locale="'+locale+'"]').attr('data-rawtitle');
    return editPageTitle || '';
  };
  /**
   * Get the parent of the selected document
   * @input String folder: the space of the document
   * @input String file: the name of the document
   */
  var getParentPage = WebIDE.getParentPage = function (folder, file, locale) {
    var editPageParent = $('.editPage[data-space="'+folder+'"][data-page="'+file+'"][data-locale="'+locale+'"]').attr('data-parent');
    return editPageParent || '';
  };
  /**
   * Get the title from the input field in the page
   */
  var getCurrentTitle = WebIDE.getCurrentTitle = function (jQueryTabId) {
    return $(jQueryTabId+' .editorWikiTitle').val();
  };
  /**
   * Get the title from the input field in the page
   */
  var getCurrentParent = WebIDE.getCurrentParent = function (jQueryTabId) {
    return $(jQueryTabId+' .editorWikiParent').val();
  };

  /*
   * Tabs tools
   * ---------------------------------
   * createTab(mode, folder, file, parameters)
   * initOtherFieldsBlock(dataNode, jQueryTabId)
   * closeTab(element, tabName)
   * removeTab(element, tabNumberId)
   * setActiveTab(mode, file, folder, parameters)
   * getTabId(mode, folder, file, parameters)
   * getTabNumber(jTabId)
   * fixIds(elem, prefix)
   */
   /**
   * Create a new tab when the user wants to edit a page not already opened
   * @input String mode: Editor mode (wiki or object for now)
   * @input String id: id to use for the tab (can be retrieved with getTabId)
   * @input String folder: name of the folder for the document in the tab
   * @input String file: name of the file for the document in the tab
   * @input String objectSelected: name of the object displayed (JSX, SSX, macro) when single-object editor
   * @input String objectNumber: number of the object displayed (JSX, SSX, macro) when single-object editor
   */
  var createTab = WebIDE.createTab = function (mode, folder, file, parameters) {
    var id = getTabId(mode, folder, file, parameters);
    var jQueryId = '#'+id;
    $('.editorTab').hide();
    WebIDE.tabCount++;
    var tabName = Modules[mode].getTabName(folder, file, parameters);
    var decodedParameters = parameters.map(decodeURIComponent);
    var currentModule = Modules[mode];
    if(tabName.length &gt; 30) tabName = tabName.substr(0,27)+'...';
    tabName = decodeURIComponent(tabName);
    var prettyModeName;
    var iconModeId;
    var tabModeClass;
    var addTextareaWiki = '';
    var addEditorParameters = '';
    if(WebIDE.tabCount == 1) { //first tab creation
      $('&lt;span class="btn btn-primary"&gt;&lt;span id="editorToggleFullscreen" class="fa fa-arrows-alt"&gt;&lt;/span&gt;&lt;/span&gt;').appendTo('#editorTabBar').on('click', function(e) {
        e.preventDefault();
        WebIDE.toggleFullScreen();
        return false;
      });
      $('&lt;span class="btn btn-success"&gt;'+Translations.core.saveAllButton+'&lt;/span&gt;').appendTo('#editorTabBar').on('click', function(e) {
        e.preventDefault();
        saveAll();
        return false;
      });
    }
    addEditorParameters = Modules[mode].getTabButtonParameters(parameters);
    prettyModeName = mode.charAt(0).toUpperCase() + mode.slice(1);
    iconModeId = '#editor'+prettyModeName+'Icon';
    tabModeClass = 'editor'+prettyModeName+'Tab';
    if(!$(jQueryId).length) {
      $(WebIDE.TAB_MAIN_CONTAINER).append('&lt;div id="'+id+'" class="editorTab '+tabModeClass+'" data-tabnumber="'+WebIDE.tabCount+'"&gt;&lt;/div&gt;');
      var tabButton = $('&lt;span class="editorTabButton" data-tabnumber="'+WebIDE.tabCount+'" data-editor="'+mode+'" data-space="'+folder+'" data-page="'+file+'" '+addEditorParameters+' title="('+prettyModeName+') '+folder+'.'+file+'"&gt;'+$(iconModeId).html()+' &lt;strong class="unsavedTab"&gt;*&lt;/strong&gt; '+tabName+'&lt;/span&gt;').appendTo('#editorTabBar').on('mousedown', function(e) {
        e.preventDefault();
        if(e.which === 1) { // Left-click
          if(decodeURIComponent(file) !== getCurrentPage(false) || decodeURIComponent(folder) !== getCurrentSpace(false) || $(decodedParameters).not(currentModule.getParameters()).length !== 0 || $(currentModule.getParameters()).not(decodedParameters).length !== 0 || WebIDE.currentEditor !== mode) {
            goToNewPage(mode, file, folder, parameters);
          }
        }
        else if(e.which === 2) { // Wheel click
          closeTab($(this), '('+prettyModeName+') '+tabName);
        }
        return false;
      });
      $($('#editorCrossIcon p').html()).appendTo(tabButton).click(function() {
        closeTab($(this).parent(), '('+prettyModeName+') '+tabName);
        return false;
      });
      setActiveTab(mode, file, folder, parameters);
      WebIDE.fixContentBlockHeight();
      WebIDE.saveOpenedTabs();
    }
  };
  /**
   * Create the "Advanced fields" block in a tab, witht he ability to show or hide it with a button
   * @input DOM dataNode : The node where the block has to be created
   * @input String jQueryTabId : The jQuery Id of the selected tab
   */
  var initOtherFieldsBlock = WebIDE.initOtherFieldsBlock = function (dataNode, jQueryTabId, type, title) {
    // Type 1 = Advanced fields
    // Type 2 = Related elements
    // Type 3 = Shortcuts info
    var menuNodeBlock = $('&lt;div class="editorOtherFieldsBlock"&gt;&lt;/div&gt;').appendTo(dataNode);
    var innerContent = $('&lt;div class="editorOtherFieldsBlockContent"&gt;&lt;/div&gt;').appendTo(menuNodeBlock);
    $(menuNodeBlock).css({'backgroundColor' : $('#hierarchyBlock').css('backgroundColor')});
    $('&lt;span class="editorDisplayAdvancedFields"&gt;'+$('#hierarchyOpenBlock').html()+'&lt;/span&gt; &lt;strong class="editorOtherFieldsBlockTitle"&gt;'+title+'&lt;/strong&gt;').prependTo(menuNodeBlock);
    var icon = '';
    switch(type) {
      case 2:
        icon = 'fa-info-circle';
        break;
      case 3:
        icon = 'fa-question-circle';
        break;
      default:
        icon = 'fa-hdd-o'
    }
    $(menuNodeBlock).find('.editorDisplayAdvancedFields').click(function() {
      $(menuNodeBlock).find('.editorOtherFieldsBlockContent').toggle();
      $(menuNodeBlock).find('.editorOtherFieldsBlockTitle').toggle();
      if($(menuNodeBlock).find('.editorOtherFieldsBlockContent').is(':visible')) {
        if(type === 3) { // Save the preferences about shortcuts
          window.localStorage['XWiki.extension.XWebIDE.displayShortcuts'] = 1;
        }
        $(menuNodeBlock).find('.editorDisplayAdvancedFields').html($('#hierarchyOpenBlock').html());
        $(menuNodeBlock).css({
          'width' : '400px'
        });
      }
      else {
        if(type === 3) { // Save the preferences about shortcuts
          window.localStorage['XWiki.extension.XWebIDE.displayShortcuts'] = 0;
        }
        $(menuNodeBlock).find('.editorDisplayAdvancedFields').html('&lt;span title="'+title+'" class="fa '+icon+'"&gt;&lt;/span&gt;');
        $(menuNodeBlock).css({
          'width' : 'auto'
        });
      }
    });
    if(type === 3) {
      WebIDE.displayShortcutsInfo($(innerContent));
      var storedState = window.localStorage['XWiki.extension.XWebIDE.displayShortcuts']
      var state = (storedState &amp;&amp; storedState==1) ? true : false;
      if(!state) { // Hide
        $(menuNodeBlock).find('.editorOtherFieldsBlockContent').hide();
        $(menuNodeBlock).find('.editorOtherFieldsBlockTitle').hide();
        $(menuNodeBlock).find('.editorDisplayAdvancedFields').html('&lt;span title="'+title+'" class="fa '+icon+'"&gt;&lt;/span&gt;');
        $(menuNodeBlock).css({
          'width' : 'auto'
        });
      }
    }
    return menuNodeBlock;
  };
  /**
   * Beginning the process of closing a tab (the user has just clicked on the cross)
   * @input DOM element: JS element representing the closed tab button
   * @input String tabName: Name of the tab which is going to be closed (needed for the confirmation modal)
   */
  var closeTab = WebIDE.closeTab = function (element, tabName) {
    var tabNumberId = $(element).attr('data-tabnumber');
    if(WebIDESavedContent[tabNumberId] != getCurrentContent(tabNumberId)) {
      if(WebIDE.nextTabToClose === null) {
        WebIDE.nextTabToClose = element;
        $('#hierarchyCloseTabModalInfo').html(tabName);
        $('#hierarchyCloseTabModal').modal('show');
      }
    }
    else {removeTab(element, tabNumberId);}
  };
  /**
   * Removing the tab (the user has confirmed his action in the modal if unsaved content)
   * @input DOM element: JS element representing the closed tab button
   * @input Int tabNumberId: The tab number id which is going to be closed
   */
  var removeTab = WebIDE.removeTab = function (element, tabNumberId) {
    var isActiveTab = $(element).hasClass('editorActiveTab');
    WebIDE.nextTabToClose = null;
    $('.editorTab[data-tabnumber="'+tabNumberId+'"]').remove();
    $(element).remove();
    // If all tabs are closed, open master page, else, open the first tab in the list
    if(!$('.editorTab').length) {
      initViewEditor();
      setCurrentPage(WebIDE.masterPage);
      setCurrentSpace(WebIDE.masterSpace);
      WebIDE.currentEditor = 'view';
      setActiveTab('view', WebIDE.masterPage, WebIDE.masterSpace, []);
    }
    else if(isActiveTab) {
      var firstTab = $('.editorTabButton:first');
      var tabMode = firstTab.attr('data-editor');
      var tabFile = firstTab.attr('data-page');
      var tabFolder = firstTab.attr('data-space');
      var parameters = Modules[tabMode].getParametersFromTab(firstTab);
      goToNewPage(tabMode, tabFile, tabFolder, parameters);
    }
    WebIDE.fixContentBlockHeight();
    WebIDE.saveOpenedTabs();
  };
  /**
   * Change the active tab (style of the buttons and of the menu only)
   * @input String mode: Editor mode (wiki or object for now)
   * @input String folder: name of the folder for the document in the tab
   * @input String file: name of the file for the document in the tab
   * @input String objectSelected: name of the object displayed (JSX, SSX, macro) when single-object editor
   * @input String objectNumber: number of the object displayed (JSX, SSX, macro) when single-object editor
   */
  var setActiveTab = WebIDE.setActiveTab = function (mode, file, folder, parameters) {
    var tabId = getTabId(mode, folder, file, parameters);
    var jQueryTabId = '#'+tabId;
    var tabNumber = getTabNumber(jQueryTabId);
    var menuElement;
    // Change the style of the tab buttons :
    $('.editorTabButton').removeClass('editorActiveTab');
    $('.editorTabButton[data-tabnumber='+tabNumber+']').addClass('editorActiveTab');
    // Change the active page in the menu :
    $('.hierarchy-page-active').removeClass('hierarchy-page-active');
    if(mode === 'view') {
      menuElement = $('.hierarchy-viewElement[data-space="'+folder+'"][data-page="'+file+'"]');
    }
    else if(mode === 'class') {
      menuElement = $('.editClass[data-space="'+folder+'"][data-page="'+file+'"]');
    }
    else {
      menuElement = Modules[mode].getMenuElement(folder, file, parameters);
    }
    menuElement.addClass('hierarchy-page-active');
    menuElement.parents().siblings('.hierarchy-displayPage, .hierarchy-toggleFolder').find('span[id^="hierarchyDisplayPage"], span[id^="hierarchyDisplaySpace"]').addClass('hierarchy-page-active');
    menuElement.parents('ul.hierarchy-list').show();
  };
  /**
   * Get the id of a tab from the name of the document and the edition mode
   * @input String mode: Editor mode (wiki or object for now)
   * @input String folder: name of the folder for the document in the tab
   * @input String file: name of the file for the document in the tab
   * @input String objectSelected: name of the object displayed (JSX, SSX, macro) when single-object editor
   * @input String objectNumber: number of the object displayed (JSX, SSX, macro) when single-object editor
   */
  var getTabId = WebIDE.getTabId = function (mode, folder, file, parameters) {
    var addParameters = '';
    if(parameters) {
      for (var index = 0; index &lt; parameters.length; ++index) {
        if(parameters[index]) {
          addParameters += '_'+encodeURIComponent(parameters[index]).replace(/\./g, '2E').replace(/%/g, '');
        }
      }
    }
    return 'tab_'+mode+'_'+encodeURIComponent(folder).replace(/\./g, '2E').replace(/%/g, '')+'_'+encodeURIComponent(file).replace(/\./g, '2E').replace(/%/g, '')+addParameters;
  };
  /**
   * Get the number of a tab from its id
   * @input String jTabId: The id used for the tab main "div"
   */
  var getTabNumber = WebIDE.getTabNumber = function (jTabId) {
    if($(jTabId).length) {
      return $(jTabId).attr('data-tabnumber');
    }
    else return 0;
  };
  /**
   * Add the "tab{Tab Number ID}_" prefix to the id of every element in an object
   * @input DOM elem: The element representing the whole object (all the IDs of its children will be changed)
   * @input String prefix: The prefix to add in the IDs
   */
  var fixIds = WebIDE.fixIds = function (elem, prefix) {
    $(elem).find("[id]").add(elem).each(function() {
        this.id = prefix+this.id;
    })
  };

  /*
   * CodeMirror editor tools
   * ---------------------------------
   * synchronizeCodeMirrorContent()
   */
  /**
   * Synchronize the original textareas' contents with the codemirrors' contents.
   */
  var synchronizeCodeMirrorContent = WebIDE.synchronizeCodeMirrorContent = function () {
    $('.CodeMirror').each(function (index) {
      $('.CodeMirror')[index].CodeMirror.save();
    });
  };

  /*
   * Modals tools
   * ---------------------------------
   * resetTabToClose()
   * removeEnterShortcut()
   * fixName(page, type)
   */
  /**
   * Reset the value of the next tab to close if the user cancel its action in the modal
   */
  var resetTabToClose = WebIDE.resetTabToClose = function () {
    WebIDE.nextTabToClose = null;
  };
  /**
   * Remove the "Enter" shortcut (meaning the user agreed to do the selected action) when a modal is shown/hidden
   * The shortcut has to be removed since the user need to be able to press enter in the wiki/object editors
   */
  var removeEnterShortcut = WebIDE.removeEnterShortcut = function () {
    shortcut.remove('Enter');
  };
   /**
   * Fix the name of page based on best practices
   */
  var fixName = WebIDE.fixName = function (page, type) {
    var file = page;
    if(type === 'class' &amp;&amp; file.substr(file.length - 5) !== 'Class') {
      file += 'Class';
    }
    else if(type === 'macros' &amp;&amp; file.substr(file.length - 6) !== 'Macros') {
      file += 'Macros';
    }
    else if(type === 'translations' &amp;&amp; file.substr(file.length - 12) !== 'Translations') {
      file += 'Translations';
    }
    return file;
  };

  /*
   * Nested Spaces tools
   * ---------------------------------
   * getRestSpacesString(spaces)
   * getURLSpacesString(spaces)
   * getSpacesEscaped(spaces)
   * getSpaceAndName(fullName)
   * getSpacesList(spaces)
   */
  /**
   * @param spaces The string describing spaces with XWiki classic format 'A.B'
   * @return The string describing spaces with XWiki REST format 'spaces/A/spaces/B'
   */
  var getRestSpacesString = WebIDE.getRestSpacesString = function (spaces) {
    if(WebIDE.NESTED_SPACES) {
      var spacesEnc = spaces.replace(/%5C\./g, '%5C%2E').replace(/\\\./g, '%5C%2E');
      var spacesList = spacesEnc.split('.');
      var restFormat = '';
      for(var i=0; i&lt;spacesList.length; i++) {
        restFormat += 'spaces/'+spacesList[i].replace('%5C%2E', '\.')+'/';
      }
      return restFormat.substring(0, restFormat.length - 1);
    }
    else return 'spaces/'+spaces+'';
  };
  /**
   * @param spaces The string describing spaces with XWiki classic format 'A.B'
   * @return The string describing spaces with XWiki URL format 'A/B'
   */
  var getURLSpacesString = WebIDE.getURLSpacesString = function (spaces) {
    if(WebIDE.NESTED_SPACES) {
      var spacesEsc = spaces.replace(/%5C\./g, '%5C%2E').replace(/\\\./g, '%5C%2E');
      var spacesList = spacesEsc.split('.');
      var restFormat = '';
      for(var i=0; i&lt;spacesList.length; i++) {
        restFormat += spacesList[i].replace('%5C%2E', '\.')+'/';
      }
      return restFormat.substring(0, restFormat.length - 1);
    }
    else return spaces;
  };
  /**
   * @param spaces The string describing a space with XWiki classic format 'A.B' (without nested space)
   * @return The string describing escaped space name 'A\.B'
   */
  var getSpacesEscaped = WebIDE.getSpacesEscaped = function (spaces) {
    if(WebIDE.NESTED_SPACES) {
      return spaces;
    }
    else return spaces.replace('%5C', '%5C%5C').replace(/\\/g, '%5C%5C').replace(/\./g, '%5C.');
  };
  /**
   * @param fullName The string describing the full name of a page 'A.B.WebHome'
   * @return The list of the space and the name ['A.B', 'WebHome']
   */
  var getSpaceAndName = WebIDE.getSpaceAndName = function (fullName) {
    var fullNameEsc = fullName.replace(/%5C\./g, '%5C%2E').replace(/\\\./g, '%5C%2E');
    var existingPageSpace = fullNameEsc.substring(0, fullNameEsc.lastIndexOf(".")).replace('%5C%2E', '\.') || '';
    var existingPageName = fullNameEsc.substring(fullNameEsc.lastIndexOf(".") + 1, fullNameEsc.length).replace('%5C%2E', '\.') || '';
    return [existingPageSpace, existingPageName];
  };
  /**
   * @param spaces The string describing a space with XWiki classic format 'A.B' (without nested space)
   * @return The list of nested spaces the page is in
   */
  var getSpacesList = WebIDE.getSpacesList = function (spaces) {
    if(WebIDE.NESTED_SPACES) {
      var spacesEsc = spaces.replace(/%5C\./g, '%5C%2E').replace(/\\\./g, '%5C%2E');
      var spacesList = spacesEsc.split('.');
      var nestedList = [];
      var previousLevel = '';
      for(var i=0; i&lt;spacesList.length; i++) {
        previousLevel += spacesList[i].replace('%5C%2E', '%5C.');
        nestedList.push(previousLevel);
        previousLevel += '.';
      }
      return nestedList;
    }
    else return [spaces];
  };

  /**
   * Cookies management
   * Create or read cookies whose name begin with "NameOfTheMasterPage-"
   */
  var setCookieHierarchy = WebIDE.setCookieHierarchy = function (name, value) {
    window.localStorage['XWiki.extension.XWebIDE.'+WebIDE.masterPage+'.'+name] = value;
  }
  var getCookieHierarchy = WebIDE.getCookieHierarchy = function (name) {
    return window.localStorage['XWiki.extension.XWebIDE.'+WebIDE.masterPage+'.'+name] || '';
  };

  /**
   * Call a function everytime the height of a specified element change
   * @input DOM elm : the observed element
   * @input function callback : the function to call when the "event" is triggered
   */
  var onElementHeightChange = WebIDE.onElementHeightChange = function (elm, callback){
    var lastHeight = elm.clientHeight, newHeight;
    (function run(){
      newHeight = elm.clientHeight;
      if( lastHeight != newHeight )
        callback();
      lastHeight = newHeight;

      if( elm.onElementHeightChangeTimer )
        clearTimeout(elm.onElementHeightChangeTimer);

      elm.onElementHeightChangeTimer = setTimeout(run, 500);
    })();
  };
  var onElementWidthChange = WebIDE.onElementWidthChange = function (elm, callback){
    var lastWidth = $(elm).outerWidth(), newWidth;
    (function run(){
      newWidth = $(elm).outerWidth();
      if( lastWidth != newWidth )
        callback();
      lastWidth = newWidth;

      if( elm.onElementWidthChangeTimer )
        clearTimeout(elm.onElementWidthChangeTimer);

      elm.onElementWidthChangeTimer = setTimeout(run, 250);
    })();
  };

  // Start WebIDE
  Hierarchy = HierarchyJS.init(WebIDE, Translations, Modules);
  Modules.wiki = WikiEditorJS.init(WebIDE, Hierarchy, SH, Translations, Modules);
  Modules.object = ObjectEditorJS.init(WebIDE, Hierarchy, SH, Translations, Modules);
  Modules.awm = AWMClassEditorJS.init(WebIDE, Hierarchy, SH, Translations, Modules);

  var insertTags = function(){return true}; // Prevent issues with Syntax Highligthing extension

  //-------------------------------------
  //------- WebIDE initialization -------
  //-------------------------------------

  // Set the WebIDE environment
  WebIDE.init();
  // Initialize the hierarchy menu events
  Hierarchy.init();
  Hierarchy.initModals();
  // Restore opened and active tabs from last session
  WebIDE.restorePreviousSession();

});</code>
    </property>
    <property>
      <name>Hierarchy panel</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>6</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <editor>PureText</editor>
        <name>code</name>
        <number>3</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>1</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>2</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>5</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>4</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WebIDECode.ApplicationHierarchy</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>0c7773fa-9a7a-49a4-b0db-44800f0bf911</guid>
    <property>
      <cache>forbid</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')

/* Hierarchy Block */
#hierarchyBlock {
  background-color: $theme.fieldGradientColor;
  min-width: 275px;
  width: auto;
  float: left;
  height: 100%;
  resize: horizontal;
  box-sizing: border-box;
  overflow: hidden;
}
/* Project Block */
#hierarchyContent {
  padding: 5px;
  box-sizing: border-box;
}
#hierarchyMainList {
  -webkit-user-select: none;  /* Chrome all / Safari all */
  -moz-user-select: none;     /* Firefox all */
  -ms-user-select: none;      /* IE 10+ */
  user-select: none;
}
#hierarchyMainList li {
  clear: both;
  position: relative;
  -webkit-user-select: none;  /* Chrome all / Safari all */
  -moz-user-select: none;     /* Firefox all */
  -ms-user-select: none;      /* IE 10+ */
  user-select: none;
}
#hierarchyOpenBlock {
  cursor: pointer;
  padding-top: 5px;
  padding-bottom: 5px;
  text-align: center;
}
#hierarchyCloseBlock {
  padding: 5px;
  padding-bottom: 10px;
  margin-bottom: 10px;
}
#hierarchyCloseBlock p {
  padding: 0px;
}
#hierarchyCloseBlock .hierarchy-icon{
  cursor: pointer;
  float: right;
  padding: 5px;
  margin-left: 5px;
}
#hierarchyCloseBlock .hierarchy-icon .fa{
  width: 16px;
}
#hierarchyCloseBlock &gt; p {
  display:inline;
}
.hierarchyCloseBlockButtons {
  float:right;
}
.hierarchyCloseBlockButtons &gt; p {
  float:right;
}
.exportLink {
  font-weight: bold;
}
.fa-caret-right {
  padding-right: 3px;
}
/* Project Block - Colibri skin */
#hierarchyContent ul {
  list-style-type: none;
  margin: 0px;
}
.hierarchy-list p {
  display: inline-block;
  margin: 0px !important;
}
.hierarchy-list img {
  padding: 0px !important;
}
#backgroundModalNoBootstrap {
  position: fixed;
  left: 0px;
  top: 0px;
  right: 0px;
  bottom: 0px;
  z-index: 999;
  background-color: black;
  opacity: 0.3;
  display: none;
}

/* Project Content */
.hierarchy-list {
  list-style-type: none;
  padding-left: 25px;
  margin: 0px;
}
.hierarchy-list p {
  margin: 0px;
}
.hierarchy-no-padding {
  padding-left: 0px;
}
.hierarchy-hidden {
  display: none;
}
.hierarchy-toggleFolder {
  cursor: pointer;
  display: inline-block;
}
.hierarchy-toggleFolder:hover .hierarchySpaceName{
  text-decoration: underline;
}
.hierarchy-toggleFolder p{
  margin-bottom:0;
}
.hierarchy-displayPage {
  cursor: pointer;
  display: inline-block;
}
.hierarchy-displayPage:hover .hierarchyPageName{
  text-decoration: underline;
}
.hierarchy-displayPage p{
  margin-bottom:0;
}
.hierarchy-toggleCategory {
  cursor: pointer;
}
.hierarchy-toggleCategory:hover strong{
  text-decoration: underline;
}
.hierarchyCurrentSpacePageAction{
  font-weight: bold;
}
.hierarchy-page-active {
  font-weight: bold;
  color: black;
}
.hierarchy-export {
  background: none !important;
  border: none;
  padding: 0 !important;
  font: inherit;
  cursor: pointer;
}
.masterExportForm {
  display: inline-block;
  width: 49%;
  box-sizing: border-box;
}
.hierarchy-export-button {
  display: inline-block;
  width: 100%;
}
.hierarchyChangeTree {
  width: 50%;
  text-align: center;
}
#hierarchyAddNewElement {
  display: inline-block;
  width: 49%;
  box-sizing: border-box;
}
.hierarchy-large-button {
  width: 100% !important;
}
#hierarchyAddNewElement &gt; button {
  width: 100%;
  box-sizing: border-box;
}
.hierarchy-right {
  visibility: hidden;
  cursor: pointer;
  float: right;
  padding: 0px;
}
.hierarchy-right span{
  padding: 3px;
}
.hierarchyAddNewElement {
  visibility: hidden;
  margin: 0px;
  cursor: pointer;
  float: right;
}
.hierarchyAddNewElement ul {
  z-index: 20;
}
#hierarchyContent li:hover &gt; .hierarchyAddNewElement, #hierarchyContent li:hover &gt; .hierarchy-right {
  visibility: visible;
}
.hierarchyAddNewElement.open {
  visibility: visible !important;
}
.hierarchyAddNewElementButton {
  cursor: pointer;
  padding: 3px;
  z-index: 10;
}
/* Page state info */
#hierarchySavingState, #hierarchyLoadingState, #hierarchyState {
  float: right;
  background-color: green;
  color: white;
  border: 2px solid grey;
  padding: 2px;
  display: none;
}
#hierarchySavingState.red, #hierarchyLoadingState.red, #hierarchyState.red {
  background-color: red;
}
#hierarchyExistingPageModalError, #hierarchyPageModalError, #hierarchyFolderModalError, #hierarchyObjectModalError, #hierarchyClassModalError {
  font-weight: bold;
  color: #8A0808;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>Hierarchy CSS</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <content>{{velocity}}
#set($masterDoc = 'Main.WebHome')
#if($xwiki.exists(${request.masterPage}))
  #set($masterDoc = $xwiki.getDocument(${request.masterPage}))
#elseif($xwiki.exists($util.decodeURI(${request.masterPage})))
  #set($masterDoc = $xwiki.getDocument($util.decodeURI(${request.masterPage})))
#end
#if($xwiki.exists(${request.remotePage}))
  #set($currentDoc = $xwiki.getDocument(${request.remotePage}))
#elseif($xwiki.exists($util.decodeURI(${request.remotePage})))
  #set($currentDoc = $xwiki.getDocument($util.decodeURI(${request.remotePage})))
#else
  #set($currentDoc = $doc)
#end
#set($currentEditor = $!request.editor)
#set($currentTree = 'logical')
#if($!request.treeview)
  #set($currentTree = $!request.treeview)
#end
#if("$!{request.visibleSpaces}" != "")
  #set($visibleSpacesString = $!{request.visibleSpaces})
#end
#set($visibleSpaces = $!visibleSpacesString.split("[,]"))
#if("$!{request.visiblePages}" != "")
  #set($visiblePagesString = $!{request.visiblePages})
#end
#set($visiblePages = $!visiblePagesString.split("[,]"))
#if("$!{request.visibleCategory}" != "")
  #set($visibleCategoryString = $!{request.visibleCategory})
#end
#set($visibleCategory = $!visibleCategoryString.split("[,]"))
(% class="hierarchy-hidden" id="hierarchyOpenBlock" title="$services.localization.render('webide.menu.button.show')"%)(((
{{html clean="false"}}&lt;span class="fa fa-step-forward"&gt;&lt;/span&gt;{{/html}}
)))
(% id="hierarchyCloseBlock" %)(((
**$services.localization.render('webide.menu.project') :** $masterDoc.display('projectName', 'view')
(% class="hierarchyCloseBlockButtons" %)(((
(% title="$services.localization.render('webide.menu.button.hide')" id="hierarchyClose" class="hierarchy-icon" %){{html clean="false"}}&lt;span class="fa fa-step-backward"&gt;&lt;/span&gt;{{/html}} 
(% title="$services.localization.render('webide.menu.button.refresh')" id="hierarchyRefresh" class="hierarchy-icon" %){{html clean="false"}}&lt;span class="fa fa-refresh"&gt;&lt;/span&gt;{{/html}}
(% title="$services.localization.render('webide.menu.button.config')" class="hierarchy-icon" data-toggle='modal' data-target='#editorConfig' %){{html clean="false"}}&lt;span class="fa fa-cog"&gt;&lt;/span&gt;{{/html}}
)))
)))
#set($nestedSpaces = false)
#if($services.model.serialize($services.model.createDocumentReference("wiki", ["A", "B"], "page"), 'default') == 'wiki:A.B.page')
  #set($nestedSpaces = true)
#end
#set($masterObj = $masterDoc.getObject('WebIDECode.ApplicationClass'))
#set($spacesListInit = $masterObj.getProperty('spaces').value)## The value of 'spaces' in the object (before checking for nested spaces)
#set($spacesListNested = $sorttool.sort($spacesListInit))## Same as $spacesListInit if nested spaces don't exist, or add all the subspaces if they exist
#if($nestedSpaces)
  #foreach($space in $spacesListInit)
    #set($xwql = "select space.reference from XWikiSpace as space where space.parent=:space order by space.name")
    #set($spacePageList = $services.query.xwql($xwql).bindValue('space', $space).execute())
    #foreach($i in [0..1000])
      #if($i &gt;= $spacePageList.size())
        #break
      #end
      #set($addToList =[])
      #set($discard = $finalList.add($spacePageList[$i]))
      #set($xwql = "select space.reference from XWikiSpace as space where space.parent=:space order by space.name")
      #set($addToList = $services.query.xwql($xwql).bindValue('space', $spacePageList[$i]).execute())
      #foreach($item in $addToList)
        #set($discard = $spacePageList.add($item))
      #end
    #end
    #foreach($spaceElement in $spacePageList)
      #if(!$spacesListNested.contains($spaceElement))
        #set($discard = $spacesListNested.add($spaceElement))
      #end
    #end
  #end
  #set($spacesListNested = $sorttool.sort($spacesListNested))
#end
#set($spacesList = $sorttool.sort($spacesListNested))## Will also contains spaces from existing pages ('pages' in the object)
#set($spacesListAdd = [])
#set($pagesList = $sorttool.sort($masterObj.getProperty('pages').value))
## Manage the case where WebIDE is opened with a page without project
#if($masterDoc.fullName == 'WebIDECode.DefaultProject')
  #set($singlePage = true)
  #set($spacesList = [])
  #set($pagesList = [$currentDoc.fullName])
  #set($currentTree = 'physical')
#end
#foreach($page in $pagesList)
  #set($document = $xwiki.getDocument($page))
  #if(!$spacesList.contains($document.space))
    #set($discard = $spacesList.add($document.space))
  #end
#end
#set($spacesList = $sorttool.sort($spacesList))
## Determine the list of parents of the current document to be able to open and **bold** them in the hierarchy
#if($nestedSpaces)
  #set($spaceParentList = [])
  #set($spacePath = "")
  #set($spaceParentListTemp = $currentDoc.space.replace('\.', '%5C%2E').split('\.'))
  #foreach($item in $spaceParentListTemp)
    #set($spacePath = "${spacePath}$item.replace('%5C%2E', '\.')")
    #set($discard = $spaceParentList.add($spacePath))
    #set($spacePath = "${spacePath}.")
  #end
#else
  #set($spaceParentList = [$currentDoc.space])
#end
#set($beginAddButton = "{{html clean='false' wiki='true'}} &lt;div class='btn-group hierarchyAddNewElement'&gt;&lt;span class='hierarchyAddNewElementButton' class='dropdown-toggle' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false'&gt;&lt;span class='fa fa-plus'&gt;&lt;/span&gt;&lt;span class='sr-only'&gt;Toggle Dropdown&lt;/span&gt;&lt;/span&gt;&lt;ul class='dropdown-menu dropdown-menu-right'&gt;")
#set($endAddButton = '&lt;/ul&gt;&lt;/div&gt;{{/html}}')
#set($beginRemoveButton = "{{html clean='false' wiki='true'}} &lt;div class='btn-group hierarchyAddNewElement'&gt;&lt;span class='hierarchyAddNewElementButton' class='dropdown-toggle' data-toggle='dropdown' aria-haspopup='true' aria-expanded='false'&gt;&lt;span class='fa fa-times'&gt;&lt;/span&gt;&lt;span class='sr-only'&gt;Toggle Dropdown&lt;/span&gt;&lt;/span&gt;&lt;ul class='dropdown-menu dropdown-menu-right'&gt;")
#set($endRemoveButton = '&lt;/ul&gt;&lt;/div&gt;{{/html}}')
{{html clean=false}}
  &lt;ul class="nav nav-tabs hierarchy-navbar"&gt;
    &lt;li class="hierarchyChangeTree hierarchyLogicalTree #if($currentTree == 'logical')active#end"&gt;&lt;a href="#"&gt;$services.localization.render('webide.menu.view.logical')&lt;/a&gt;&lt;/li&gt;
    &lt;li class="hierarchyChangeTree hierarchyPhysicalTree #if($currentTree == 'physical')active#end"&gt;&lt;a href="#"&gt;$services.localization.render('webide.menu.view.physical')&lt;/a&gt;&lt;/li&gt;
  &lt;/ul&gt;
{{/html}}
(% id="hierarchyContent" %) (((
#if($currentTree == 'physical')
  {{include reference="WebIDECode.PhysicalTree" /}}
#else
  {{include reference="WebIDECode.LogicalTree" /}}
#end
{{html clean=false}}
&lt;div id="hierarchyUpdatedFolderList" class="hierarchy-hidden"&gt;
#foreach($space in $spacesListNested)
  #if($xwiki.hasAccessLevel('edit', "$space.$reservedDocumentName"))
    &lt;option value="$escapetool.url($space).replace('+', '%20')"&gt;$space&lt;/option&gt;
  #end
#end
&lt;/div&gt;
{{/html}}
)))

  (% class="modal fade text-left hierarchy-hidden" id="hierarchyFolderModal" tabindex="-1" role="dialog" aria-hidden="true"%)(((
    (% class="modal-dialog"%)(((
      (% class="modal-content"%)(((
        (% class="modal-header"%)(((
          {{html clean="false"}}
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;$services.localization.render('webide.modals.add.space.title')&lt;/h4&gt;
          {{/html}}
        )))
        (% class="modal-body"%)(((
          {{html clean="false"}}
          &lt;form class="xform"&gt;
          &lt;dl&gt;
          &lt;dt&gt;&lt;label for="hierarchyNewFolderName"&gt;$services.localization.render('webide.modals.commons.space')&lt;/label&gt;&lt;/dt&gt;
          &lt;dd&gt;&lt;input type="text" id="hierarchyNewFolderName" /&gt;&lt;/dd&gt;
          &lt;button id="hierarchyAddFolder" class="btn btn-success"&gt;$services.localization.render('webide.modals.add.space.button')&lt;/button&gt;&lt;br&gt;
          &lt;p id="hierarchyFolderModalError" class="hierarchy-hidden"&gt;&lt;/p&gt;
          &lt;/dl&gt;
          &lt;/form&gt;
          {{/html}}
        )))
      )))
    )))
  )))
  (% class="modal fade text-left hierarchy-hidden" id="hierarchyExistingPageModal" tabindex="-1" role="dialog" aria-hidden="true"%)(((
    (% class="modal-dialog"%)(((
      (% class="modal-content"%)(((
        (% class="modal-header"%)(((
          {{html clean="false"}}
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;$services.localization.render('webide.modals.add.page.title')&lt;/h4&gt;
          {{/html}}
        )))
        (% class="modal-body"%)(((
          {{html clean="false" wiki="true"}}
          &lt;form class="xform"&gt;
          &lt;dl&gt;
          &lt;dt&gt;&lt;label for="hierarchyExistingPageName"&gt;$services.localization.render('webide.modals.commons.pageFullName')&lt;/label&gt;&lt;/dt&gt;&lt;dd&gt;&lt;input type="text" id="hierarchyExistingPageName" /&gt;&lt;/dd&gt;
          &lt;button id="hierarchyAddExistingPage" class="btn btn-success"&gt;$services.localization.render('webide.modals.add.page.button')&lt;/button&gt;
          &lt;p id="hierarchyExistingPageModalError" class="hierarchy-hidden"&gt;&lt;/p&gt;
          &lt;/dl&gt;
          &lt;/form&gt;
          {{/html}}
        )))
      )))
    )))
  )))
  (% class="modal fade text-left hierarchy-hidden" id="hierarchyPageModal" tabindex="-1" role="dialog" aria-hidden="true"%)(((
    (% class="modal-dialog"%)(((
      (% class="modal-content"%)(((
        (% class="modal-header"%)(((
          {{html clean="false"}}
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title" id="hierarchyAddPageTitle"&gt;$services.localization.render('webide.modals.add.page.title')&lt;/h4&gt;
          {{/html}}
        )))
        (% class="modal-body"%)(((
          {{html clean="false" wiki="true"}}
          &lt;form class="xform"&gt;
          &lt;dl&gt;
          &lt;dt&gt;&lt;label for="hierarchyPageFolder"&gt;$services.localization.render('webide.modals.commons.space')&lt;/label&gt;&lt;/dt&gt;
          &lt;dd&gt;&lt;select id="hierarchyPageFolder"&gt;
          #foreach($space in $spacesListNested)
            #if($xwiki.hasAccessLevel('edit', "$space.$reservedDocumentName"))
              &lt;option value="$escapetool.url($space).replace('+', '%20')"&gt;$space&lt;/option&gt;
            #end
          #end
          &lt;/select&gt;&lt;/dd&gt;
          &lt;dt&gt;&lt;label for="hierarchyNewPageName"&gt;&lt;span id="hierarchyAddPageLabel"&gt;$services.localization.render('webide.modals.commons.pageName')&lt;/span&gt;&lt;/label&gt;&lt;/dt&gt;
          &lt;dd&gt;&lt;input type="text" id="hierarchyNewPageName" /&gt;&lt;/dd&gt;
          &lt;div id="hierarchyAddPageTypeBlock"&gt;&lt;br&gt;

          {{info}}
            **$services.localization.render('webide.modals.add.page.type.content')**: $services.localization.render('webide.modals.add.page.info.content')&lt;br&gt;
            **$services.localization.render('webide.modals.add.page.type.item')**: $services.localization.render('webide.modals.add.page.info.content')
          {{/info}}

          &lt;dt&gt;&lt;label&gt;$services.localization.render('webide.modals.add.page.type')&lt;/label&gt;&lt;/dt&gt;
          &lt;dd&gt;&lt;label for="hierarchyAddPageTypeContent"&gt;&lt;input type="radio" name="hierarchyAddPageType" id="hierarchyAddPageTypeContent" value="content" checked="checked"/&gt; $services.localization.render('webide.modals.add.page.type.content')&lt;/label&gt;&lt;/dd&gt;&lt;dd&gt;&lt;label for="hierarchyAddPageTypeItem"&gt;&lt;input type="radio" name="hierarchyAddPageType" id="hierarchyAddPageTypeItem" value="item"/&gt; $services.localization.render('webide.modals.add.page.type.item')&lt;/label&gt;&lt;/dd&gt;
          &lt;div id="hierarchyAddPageItemBlock" class="hierarchy-hidden"&gt;&lt;br&gt;
          &lt;dt&gt;&lt;label for="hierarchyAddPageItem"&gt;$services.localization.render('webide.modals.commons.class')&lt;/label&gt;&lt;/dt&gt;
          &lt;dd&gt;&lt;select id="hierarchyAddPageItem"&gt;
          &lt;/select&gt;&lt;/dd&gt;&lt;/div&gt;
          &lt;/div&gt;
          &lt;div id="hierarchyAddPageLocaleBlock"&gt;&lt;br&gt;
          &lt;dt&gt;&lt;label for="hierarchyAddPageLocale"&gt;$services.localization.render('webide.modals.add.page.language')&lt;/label&gt; ($services.localization.render('webide.modals.add.page.language.list'))&lt;/dt&gt;
          &lt;dd&gt;&lt;select id="hierarchyAddPageLocale"&gt;
          #foreach($locale in $xwiki.getDocument('XWiki.XWikiPreferences').getObject('XWiki.XWikiPreferences').getProperty('languages').value.split(','))
            #set($language = $services.localization.toLocale($locale.trim()).getDisplayLanguage())
            #set($displayLanguage = $language)
            #if($language.length() &gt; 0)
              #set($displayLanguage = "${language.substring(0, 1).toUpperCase()}${language.substring(1)}")
            #end
            &lt;option value="$locale.trim()"&gt;$displayLanguage&lt;/option&gt;
          #end
          &lt;/select&gt;&lt;/dd&gt;&lt;/div&gt;
          &lt;br&gt;&lt;button id="hierarchyAddPage" class="btn btn-success"&gt;$services.localization.render('webide.modals.add.page.button')&lt;/button&gt;
          &lt;p id="hierarchyPageModalError" class="hierarchy-hidden"&gt;&lt;/p&gt;
          &lt;/dl&gt;
          &lt;/form&gt;
          {{/html}}
        )))
      )))
    )))
  )))
  (% class="modal fade text-left hierarchy-hidden" id="hierarchyObjectModal" tabindex="-1" role="dialog" aria-hidden="true"%)(((
    (% class="modal-dialog"%)(((
      (% class="modal-content"%)(((
        (% class="modal-header"%)(((
          {{html clean="false"}}
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;$services.localization.render('webide.modals.add.object.title')&lt;/h4&gt;
          {{/html}}
        )))
        (% class="modal-body"%)(((
          {{html clean="false" wiki="true"}}
          &lt;form class="xform"&gt;
          &lt;dl&gt;
          &lt;dt&gt;&lt;label&gt;$services.localization.render('webide.modals.commons.space')&lt;/label&gt;&lt;/dt&gt;
          &lt;dd&gt;&lt;span id="hierarchyObjectSpace"&gt;&lt;/span&gt;&lt;/dd&gt;
          &lt;div id="hierarchyObjectPageBlock"&gt;&lt;dt&gt;&lt;label&gt;$services.localization.render('webide.modals.commons.page')&lt;/label&gt;&lt;/dt&gt;
          &lt;dd&gt;&lt;span id="hierarchyObjectPage"&gt;&lt;/span&gt;&lt;/dd&gt;&lt;/div&gt;
          &lt;div id="hierarchyObjectPageInputBlock"&gt;&lt;dt&gt;&lt;label for="hierarchyObjectPageInput"&gt;$services.localization.render('webide.modals.commons.name')&lt;/label&gt;&lt;/dt&gt;
          &lt;dd&gt;&lt;input type="text" id="hierarchyObjectPageInput" value=""/&gt;&lt;/dd&gt;&lt;input type="hidden" id="hierarchyObjectPageInputDefault" value=""/&gt;&lt;/div&gt;
          &lt;input type="hidden" id="hierarchyObjectClassName" /&gt;
          &lt;br&gt;&lt;button id="hierarchyAddObject" class="btn btn-success"&gt;$services.localization.render('webide.modals.add.page.button')&lt;/button&gt;
          &lt;p id="hierarchyObjectModalError" class="hierarchy-hidden"&gt;&lt;/p&gt;
          &lt;/dl&gt;
          &lt;/form&gt;
          {{/html}}
        )))
      )))
    )))
  )))
  (% class="modal fade text-left hierarchy-hidden" id="hierarchyClassModal" tabindex="-1" role="dialog" aria-hidden="true"%)(((
    (% class="modal-dialog"%)(((
      (% class="modal-content"%)(((
        (% class="modal-header"%)(((
          {{html clean="false"}}
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;$services.localization.render('webide.modals.add.class.title')&lt;/h4&gt;
          {{/html}}
        )))
        (% class="modal-body"%)(((
          {{html clean="false" wiki="true"}}
          &lt;form class="xform"&gt;
          &lt;dl&gt;
          &lt;dt&gt;&lt;label&gt;$services.localization.render('webide.modals.commons.space')&lt;/label&lt;&lt;/dt&gt;
          &lt;dd&gt;&lt;span id="hierarchyClassSpace"&gt;&lt;/span&gt;&lt;/dd&gt;
          &lt;dt&gt;&lt;label for="hierarchyClassInput"&gt;$services.localization.render('webide.modals.commons.name')&lt;/label&gt;&lt;/dt&gt;
          &lt;dd&gt;&lt;input type="text" id="hierarchyClassInput" value=""/&gt;&lt;/dd&gt;
          &lt;div id="hierarchyAddSheetBlock"&gt;
            &lt;br&gt;&lt;dt&gt;&lt;label for="hierarchyClassSheet"&gt;$services.localization.render('webide.modals.add.class.sheet.actions')&lt;/label&gt;&lt;/dt&gt;
            &lt;dd&gt;&lt;select id="hierarchyClassSheet"&gt;
              &lt;option value=""&gt;&lt;/option&gt;
              &lt;option value="view"&gt;$services.localization.render('webide.modals.add.class.sheet.view')&lt;/option&gt;
              &lt;option value="edit"&gt;$services.localization.render('webide.modals.add.class.sheet.edit')&lt;/option&gt;
              &lt;option value="inline"&gt;$services.localization.render('webide.modals.add.class.sheet.inline')&lt;/option&gt;
            &lt;/select&gt;&lt;/dd&gt;
          &lt;/div&gt;
          &lt;br&gt;&lt;button id="hierarchyAddClass" class="btn btn-success"&gt;$services.localization.render('webide.modals.add.class.button')&lt;/button&gt;
          &lt;p id="hierarchyClassModalError" class="hierarchy-hidden"&gt;&lt;/p&gt;
          &lt;/dl&gt;
          &lt;/form&gt;
          {{/html}}
        )))
      )))
    )))
  )))
  (% class="modal fade text-left hierarchy-hidden" id="hierarchyCloseTabModal" tabindex="-1" role="dialog" aria-hidden="true"%)(((
    (% class="modal-dialog"%)(((
      (% class="modal-content"%)(((
        (% class="modal-header"%)(((
          {{html clean="false"}}
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;$services.localization.render('webide.modals.closeTab.title')&lt;/h4&gt;
          {{/html}}
        )))
        (% class="modal-body"%)(((
          {{html clean="false" wiki="true"}}
          &lt;p&gt;
            $services.localization.render('webide.modals.closeTab.description', ['&lt;span id="hierarchyCloseTabModalInfo"&gt;&lt;/span&gt;'])&lt;br /&gt;
            &lt;button id="hierarchySaveAndCloseModal" class="btn btn-success"&gt;$services.localization.render('webide.modals.closeTab.button.save')&lt;/button&gt; &lt;button id="hierarchyDiscardAndCloseModal" class="btn btn-danger"&gt;$services.localization.render('webide.modals.closeTab.button.nosave')&lt;/button&gt; &lt;button class="btn btn-default" data-dismiss="modal" type="button"&gt;$services.localization.render('webide.modals.commons.cancel')&lt;/button&gt;
          &lt;/p&gt;
          &lt;/form&gt;
          {{/html}}
        )))
      )))
    )))
  )))
  (% class="modal fade text-left hierarchy-hidden" id="editorDeleteObjectModal" tabindex="-1" role="dialog" aria-hidden="true"%)(((
    (% class="modal-dialog"%)(((
      (% class="modal-content"%)(((
        (% class="modal-header"%)(((
          {{html clean="false"}}
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;$services.localization.render('webide.modals.delete.object.title')&lt;/h4&gt;
          {{/html}}
        )))
        (% class="modal-body"%)(((
          {{html clean="false" wiki="true"}}
          &lt;p&gt;
            $services.localization.render('webide.modals.delete.object.label') : &lt;span id="editorDeletedObjectModalInfo"&gt;&lt;/span&gt;&lt;br /&gt;
            &lt;button id="editorDeleteObjectConfirmed" class="btn btn-danger"&gt;$services.localization.render('webide.modals.delete.object.button')&lt;/button&gt; &lt;button class="btn btn-default" data-dismiss="modal" type="button"&gt;$services.localization.render('webide.modals.commons.cancel')&lt;/button&gt;
          &lt;/p&gt;
          {{/html}}
        )))
      )))
    )))
  )))
  (% class="modal fade text-left hierarchy-hidden" id="editorDeleteMultipleObjectsModal" tabindex="-1" role="dialog" aria-hidden="true"%)(((
    (% class="modal-dialog"%)(((
      (% class="modal-content"%)(((
        (% class="modal-header"%)(((
          {{html clean="false"}}
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;$services.localization.render('webide.modals.delete.page.title')&lt;/h4&gt;
          {{/html}}
        )))
        (% class="modal-body"%)(((
          {{html clean="false" wiki="true"}}
          &lt;p&gt;
            $services.localization.render('webide.modals.delete.page.label') : &lt;span id="editorDeleteMultipleObjectsModalInfo"&gt;&lt;/span&gt;&lt;br /&gt;
            &lt;button id="editorDeleteMultipleObjectConfirmed" class="btn btn-danger"&gt;$services.localization.render('webide.modals.delete.page.button')&lt;/button&gt; &lt;button class="btn btn-default" data-dismiss="modal" type="button"&gt;$services.localization.render('webide.modals.commons.cancel')&lt;/button&gt;
          &lt;/p&gt;
          {{/html}}
        )))
      )))
    )))
  )))
  (% class="modal fade text-left hierarchy-hidden" id="editorDeletePageModal" tabindex="-1" role="dialog" aria-hidden="true"%)(((
    (% class="modal-dialog"%)(((
      (% class="modal-content"%)(((
        (% class="modal-header"%)(((
          {{html clean="false"}}
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;$services.localization.render('webide.modals.delete.page.title')&lt;/h4&gt;
          {{/html}}
        )))
        (% class="modal-body"%)(((
          {{html clean="false" wiki="true"}}
          &lt;p&gt;
            $services.localization.render('webide.modals.delete.page.label') : &lt;span id="editorDeletedPageModalInfo"&gt;&lt;/span&gt;&lt;br /&gt;
            &lt;button id="editorDeletePageConfirmed" class="btn btn-danger"&gt;$services.localization.render('webide.modals.delete.page.button')&lt;/button&gt; &lt;button class="btn btn-default" data-dismiss="modal" type="button"&gt;$services.localization.render('webide.modals.commons.cancel')&lt;/button&gt;
          &lt;/p&gt;
          {{/html}}
        )))
      )))
    )))
  )))
  (% class="modal fade text-left hierarchy-hidden" id="editorDeleteClassModal" tabindex="-1" role="dialog" aria-hidden="true"%)(((
    (% class="modal-dialog"%)(((
      (% class="modal-content"%)(((
        (% class="modal-header"%)(((
          {{html clean="false"}}
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;$services.localization.render('webide.modals.delete.class.title')&lt;/h4&gt;
          {{/html}}
        )))
        (% class="modal-body"%)(((
          {{html clean="false" wiki="true"}}
          &lt;form class="xform"&gt;
          &lt;dl&gt;
            $services.localization.render('webide.modals.delete.class.label') : &lt;span id="editorDeletedClassModalInfo"&gt;&lt;/span&gt;&lt;br&gt;&lt;br&gt;
            &lt;dt&gt;&lt;label&gt;$services.localization.render('webide.modals.delete.class.deleteAlso')&lt;/lebal&gt;&lt;/dt&gt;
            &lt;dd&gt;&lt;label for="editorDeleteClassSheet"&gt;&lt;input type="checkbox" id="editorDeleteClassSheet" /&gt; $services.localization.render('webide.modals.delete.class.allSheets')&lt;/label&gt;&lt;br&gt;&lt;label for="editorDeleteClassTemplate"&gt;&lt;input type="checkbox" id="editorDeleteClassTemplate" /&gt; $services.localization.render('webide.modals.delete.class.template')&lt;/label&gt;&lt;br&gt;
            &lt;br&gt;&lt;button id="editorDeleteClassConfirmed" class="btn btn-danger"&gt;$services.localization.render('webide.modals.delete.class.button')&lt;/button&gt; &lt;button class="btn btn-default" data-dismiss="modal" type="button"&gt;$services.localization.render('webide.modals.commons.cancel')&lt;/button&gt;
          &lt;/dl&gt;
          &lt;/form&gt;
          {{/html}}
        )))
      )))
    )))
  )))
  (% class="modal fade text-left hierarchy-hidden" id="editorSwitchClassModal" tabindex="-1" role="dialog" aria-hidden="true"%)(((
    (% class="modal-dialog"%)(((
      (% class="modal-content"%)(((
        (% class="modal-header"%)(((
          {{html clean="false"}}
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;$services.localization.render('webide.modals.switchClass.title')&lt;/h4&gt;
          {{/html}}
        )))
        (% class="modal-body"%)(((
          {{html clean="false" wiki="true"}}
          &lt;p&gt;
          $services.localization.render('webide.modals.switchClass.label')&lt;br /&gt;
            &lt;button id="hierarchySaveAndSwitchClassModal" class="btn btn-success"&gt;$services.localization.render('webide.modals.switchClass.button.save')&lt;/button&gt; &lt;button id="hierarchyDiscardAndAndSwitchClassModal" class="btn btn-danger"&gt;$services.localization.render('webide.modals.switchClass.button.nosave')&lt;/button&gt; &lt;button class="btn btn-default" data-dismiss="modal" type="button"&gt;$services.localization.render('webide.modals.commons.cancel')&lt;/button&gt;
          &lt;/p&gt;
          {{/html}}
        )))
      )))
    )))
  )))
  (% class="modal fade text-left hierarchy-hidden" id="editorConfig" tabindex="-1" role="dialog" aria-hidden="true"%)(((
    (% class="modal-dialog"%)(((
      (% class="modal-content"%)(((
        (% class="modal-header"%)(((
          {{html clean="false"}}
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;$services.localization.render('webide.modals.config.title')&lt;/h4&gt;
          {{/html}}
        )))
        (% class="modal-body"%)(((
          {{html clean="false" wiki="true"}}
          &lt;form class="xform"&gt;
          &lt;dl&gt;
          &lt;dt&gt;&lt;label&gt;&lt;input type="checkbox" id="editorEnableCodeMirror"&gt;$services.localization.render('webide.modals.config.highlighting')&lt;/label&gt;&lt;/dt&gt;
          &lt;/dl&gt;
          &lt;/form&gt;
          {{/html}}
        )))
      )))
    )))
  )))
{{html clean="false"}}
  &lt;div class="hierarchy-hidden"&gt;&lt;input type="hidden" id="hierarchyMasterDocName" value="$escapetool.url($masterDoc.name)" /&gt;&lt;input type="hidden" id="hierarchyMasterDocSpace" value="$escapetool.url($masterDoc.space)" /&gt;&lt;input type="hidden" id="xwikiNested" value="$nestedSpaces" /&gt;&lt;input type="hidden" id="hierarchyMainLanguage" value="$xwiki.getLanguagePreference()" /&gt;&lt;/div&gt;

&lt;div id="backgroundModalNoBootstrap"&gt;&lt;/div&gt;

{{/html}}
(% id="hierarchyStateBlock" %)(((
  (% id="hierarchyState" %)((()))(% id="hierarchySavingState" %)((()))(% id="hierarchyLoadingState" %)((()))
)))
{{/velocity}}</content>
</xwikidoc>
