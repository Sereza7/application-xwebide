<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc reference="WebIDECode.ApplicationHierarchy" locale="">
  <web>WebIDECode</web>
  <name>ApplicationHierarchy</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>WebIDECode.ApplicationClass</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1434704312000</creationDate>
  <date>1443625853000</date>
  <contentUpdateDate>1443623292000</contentUpdateDate>
  <version>1.1</version>
  <title>ApplicationHierarchy</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WebIDECode.ApplicationHierarchy</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>95d6ad85-599f-40f3-b936-d2312fb7a8df</guid>
    <property>
      <cache>forbid</cache>
    </property>
    <property>
      <code>require(['jquery', 'xwiki-meta'], function ($, xm) {

$(function(){
  /**
   *  Variables
   */
  var masterSpace = XWiki.currentSpace;
  var masterName = XWiki.currentPage;
  // currentPage and currentSpace are used in REST queries
  var currentPage = encodeURIComponent(XWiki.currentPage);
  var currentSpace = encodeURIComponent(XWiki.currentSpace);
  // currentPageEscaped and currentSpaceEscaped are used in ajax queries with XWiki pages
  var currentPageEscaped = encodeURIComponent(currentPage.replace(/\\/g, '\\').replace(/\./g, '\.'));
  var currentSpaceEscaped = getSpacesEscaped(currentSpace);
  var currentEditor = 'view';
  var nextEditor = '';
  var syntaxHighlighting = (typeof(codeMirrors) !== 'undefined');
  var saving = false;
  var loading = false;
  var bootstrap = function() { // Determine if bootstrap is enabled or not for modals
    return (typeof($.fn.modal) !== 'undefined');
  }
  var NESTED_SPACES = checkNestedSpaces();
  //var hiddenSpaces = getCookieHierarchy('hiddenSpaces').split(',');
  //var hiddenPages = getCookieHierarchy('hiddenPages').split(',');
  var visibleSpaces = getCookieHierarchy('visibleSpaces').split(',');
  var visiblePages = getCookieHierarchy('visiblePages').split(',');
  var mainBlock = '';
  var buttonBarBlock = '';
  var textEditor = '#content';
  var mainBlockContainer = '#editorBlock';
  var titleBlock = '#titleBlock';
  var savedContent = '';
  // Get the "get" and "view" url structure for ajax queries
  var wikiGetURL = '/xwiki/bin/get/';
  if(window.docgeturl.indexOf('/get/') &gt;= 0) {
    wikiGetURL = window.docgeturl.substring(0,window.docgeturl.indexOf('/get/')+5);
  }
  var wikiViewURL = '/xwiki/bin/view/';
  if(window.docviewurl.indexOf('/'+XWiki.currentSpace+'/') &gt;= 0) {
    wikiViewURL = window.docviewurl.substring(0,window.docviewurl.indexOf('/'+XWiki.currentSpace+'/')+1);
  }
  // Change current editor and page if there is a hash
  var hashURL = window.location.hash.substring(1).split('&amp;!!');
  if(hashURL.size() == 4){
    currentEditor = hashURL[1];
    currentPage = encodeURIComponent(hashURL[2]);
    currentSpace = encodeURIComponent(hashURL[3]);
    window.location.hash = '';
    $('#hierarchyNextDocSpace').val(currentSpace);
    $('#hierarchyNextDocName').val(currentPage);
  }

  // Update the hierarchy background-color to be the same as the default wiki editor top bar
  $("#hierarchyBlock").css({"backgroundColor" : $('div.leftmenu2').css('backgroundColor')});

  // If Bootstrap is disabled (Colibri skin), create custom modals. Let a delay before testing bootstrap in case it is loaded after the Web IDE.
  window.setTimeout(function () {
    if(!bootstrap()) {
      $('button[data-dismiss="modal"]').click(function() {
        closeModalNoBootstrap();
      });
      $('.modal').css({
        "width" : "40%",
        "border" : "1px solid black",
        "backgroundColor" : "#FFFFFF",
        "borderRadius" : "5px",
        "position" : "fixed",
        "left" : "30%",
        "top" : "20%",
        "padding" : "10px",
        "zIndex" : "1000"
      });
      $('.modal-header .close').css({
        "float" : "right",
        "position" : "absolute",
        "right" : "5px",
        "top" : "5px"
      });
      // Add support for the bootstrap buttons in Colibri skin (.btn, .btn-primary, .btn-success, .btn-danger, .btn-default)
      $('html &gt; head').append($('&lt;style&gt;.btn{border-radius:5px;padding:3px;color:white;cursor:pointer;}.btn-primary{background-color:#337AB7;border-color:#2E6DA4;}.btn-success{background-color:#5CB85C;border-color:#4CAE4C;}.btn-danger{background-color:#C9302C;border-color:#AC2925;}.btn-default{border-color:#000000;color:black;}&lt;/style&gt;'));
    }
  }, 100);
  function openModalNoBootstrap(modalId) {
    $(modalId).show();
    $('#backgroundModalNoBootstrap').show();
  }
  function closeModalNoBootstrap() {
    $('#backgroundModalNoBootstrap').hide();
    $('.modal').hide();
  }
  $('#backgroundModalNoBootstrap').click(function () {
    closeModalNoBootstrap();
  });
  // Initialize the first editor to display
  if(currentEditor == "wiki") {
    initWikiEditor();
  }
  else if(currentEditor == "view") {
    initViewEditor();
  }
  else if(currentEditor == "object") {
    initObjectEditor();
  }
  else if(currentEditor == "class"){
    initClassEditor();
  }

  // Autofocus on text inputs when a modal appears:
  $('#hierarchyFolderModal').on('shown.bs.modal', function () {
    $('#hierarchyNewFolderName').focus();
    shortcut.add("Enter", function() {addFolder();});
  });
  $('#hierarchyPageModal').on('shown.bs.modal', function () {
    $('#hierarchyNewPageName').focus();
    shortcut.add("Enter", function() {addPage();});
  });
  $('#hierarchyExistingPageModal').on('shown.bs.modal', function () {
    $('#hierarchyExistingPageName').focus();
    shortcut.add("Enter", function() {addExistingPage();});
  });
  $('#hierarchyFolderModal').on('hidden.bs.modal', function () {
    shortcut.remove('Enter');
  });
  $('#hierarchyPageModal').on('hidden.bs.modal', function () {
    shortcut.remove('Enter');
  });
  $('#hierarchyExistingPageModal').on('hidden.bs.modal', function () {
    shortcut.remove('Enter');
  });

  // Improve the F5 shortcut to stay on the current editor and the current page
  shortcut.add("F5", function() {
    window.location.href = window.docviewurl+'#!XWebIDE&amp;!!'+currentEditor+'&amp;!!'+encodeURIComponent(currentPage)+'&amp;!!'+encodeURIComponent(currentSpace);
    location.reload();
  });

  // Register permanent events
  $('body').on('DOMNodeInserted', function(e) {
    if ($(e.target).is('.CodeMirror')) {
      window.setTimeout(function() {
        $.each(codeMirrors, function (index) {
          codeMirrors[index].setOption('lineWrapping', true);
        });
        if(currentEditor == 'wiki') {
          $('.CodeMirror').css({
            "width" : "100%",
            "maxWidth" : "100%",
            "height" : "100%",
          });
        }
        else if(currentEditor == 'object') {
          $('.CodeMirror').css({
            "width" : "100%",
            "maxWidth" : "100%",
            "resize" : "both",
            "overflow" : "hidden"
          });
        }
        // User has just switch to wiki editor
        if(currentEditor == 'wiki') {
          setStarEvent(true);
          addButtonEvents('wiki');
          loadPage();
        }
      }, 50);
    }
  });
  // Buttons to hide or show the hierarchy and resize the textarea
  $('#hierarchyCloseBlock').click(function(e){
    $('#hierarchyContent').hide();
    $('#hierarchyOpenBlock').show();
    $('#hierarchyCloseBlock').hide();
    $("#hierarchyBlock").css({
      "min-width": "0px",
      "width": "42px"
    });
  });
  $('#hierarchyOpenBlock').click(function(e){
    $('#hierarchyOpenBlock').hide();
    $('#hierarchyCloseBlock').show();
    $('#hierarchyContent').show();
    $("#hierarchyBlock").css({
      "minWidth": "250px",
      "width": "auto"
    });
  });
  $('#hierarchyAddFolder').click(function(e){
    $('body').removeClass('modal-open');
    e.preventDefault();
    addFolder();
  });
  $('#hierarchyAddPage').click(function(e){
    $('body').removeClass('modal-open');
    e.preventDefault();
    addPage();
  });
  $('#hierarchyAddExistingPage').click(function(e){
    $('body').removeClass('modal-open');
    e.preventDefault();
    addExistingPage();
  });
  $('#editorDeleteObjectConfirmed').click(function(e){
    $('body').removeClass('modal-open');
    e.preventDefault();
    removeObject($(this).attr('data-classname'), $(this).attr('data-number'));
  });

  //-------------------------
  //---- Initialization -----
  //-------------------------
  // Contains all events that have to be registered again each time the hierarchy is updated (mostly "click" events on elements in the hierarchy)
  function initialization() {
    // Display or hide the content of a folder by clicking on its name
    $('.hierarchy-toggleFolder').click(function(){
      var spaceToggle = $(this).attr('data-space');
      $(document.getElementById('hierarchySpace_'+spaceToggle)).toggle();
      //var indexSpace = $.inArray(spaceToggle, hiddenSpaces);
      var indexSpace = $.inArray(spaceToggle, visibleSpaces);
      if($(document.getElementById('hierarchySpace_'+spaceToggle)).is(':hidden')) {
        //if(indexSpace &lt; 0) {
        if(indexSpace &gt;= 0) {
          //hiddenSpaces.push(spaceToggle);
          visibleSpaces.splice(indexSpace, 1);
        }
        $(document.getElementById('hierarchyFolderIcon_'+spaceToggle)).attr('src', '/xwiki/resources/icons/silk/bullet_toggle_plus.png');
      }
      else {
        //if(indexSpace &gt;= 0) {
        if(indexSpace &lt; 0) {
          //hiddenSpaces.splice(indexSpace, 1);
          visibleSpaces.push(spaceToggle);
        }
       $(document.getElementById('hierarchyFolderIcon_'+spaceToggle)).attr('src', '/xwiki/resources/icons/silk/bullet_toggle_minus.png');
      }
      //setCookieHierarchy('hiddenSpaces', hiddenSpaces, 365);
      setCookieHierarchy('visibleSpaces', visibleSpaces, 365);
    });
    // Display or hide the details of a page by clicking on its name
    $('.hierarchy-displayPage').click(function(){
      var pageToggle = $(this).attr('data-pageid');
      $(document.getElementById('hierarchyPageDetails_'+pageToggle)).toggle();
      //var indexPage = $.inArray(pageToggle, hiddenPages);
      var indexPage = $.inArray(pageToggle, visiblePages);
      if($(document.getElementById('hierarchyPageDetails_'+pageToggle)).is(':hidden')) {
        //if(indexPage &lt; 0) {
        if(indexPage &gt;= 0) {
          //hiddenPages.push(pageToggle);
          visiblePages.splice(indexPage, 1);
        }
        $(this).find('.hierarchyDisplayPageIcon').attr('src', '/xwiki/resources/icons/silk/bullet_toggle_plus.png');
      }
      else {
        //if(indexPage &gt;= 0) {
        if(indexPage &lt; 0) {
          //hiddenPages.splice(indexPage, 1);
          visiblePages.push(pageToggle);
        }
        $(this).find('.hierarchyDisplayPageIcon').attr('src', '/xwiki/resources/icons/silk/bullet_toggle_minus.png');
      }
      //setCookieHierarchy('hiddenPages', hiddenPages, 365);
      setCookieHierarchy('visiblePages', visiblePages, 365);
    });

    // Add a page (if no bootstrap) / Change the folder to use when adding a new page
    $('.newPage').click(function(e){
      e.preventDefault();
      $('#hierarchyPageFolder').html(unescape($(this).attr('data-space')));
      if(!bootstrap()) {
        openModalNoBootstrap('#hierarchyPageModal');
      }
    });
    // Add a folder (if no bootstrap)
    $('.newFolder').click(function(e){
      e.preventDefault();
      if(!bootstrap()) {
        openModalNoBootstrap('#hierarchyFolderModal');
      }
    });
    // Add an existing page (if no bootstrap)
    $('.newExistingPage').click(function(e){
      e.preventDefault();
      if(!bootstrap()) {
        openModalNoBootstrap('#hierarchyExistingPageModal');
      }
    });

    // Remove a folder by clicking on the cross
    $('.hierarchy-remove-folder').click(function(){
      removeFolder(decodeURI($(this).attr('data-space')));
    });
    // Remove a page by clicking on the cross
    $('.hierarchy-remove-page').click(function(){
      removePage(decodeURI($(this).attr('data-pageid')));
    });
    // Rename a folder by clicking on the pencil
    $('.hierarchy-rename-folder').click(function(){
      var selector = document.getElementById('renameFolder_'+$(this).attr('data-space'));
      var selector_old = document.getElementById('renameFolder_old_'+$(this).attr('data-space'));
      var selector2 = document.getElementById('hierarchyDisplaySpace_'+$(this).attr('data-space'));
      $(selector).show();
      $(selector).val(decodeURIComponent($(this).attr('data-subspace')));
      var renameFrom = $(selector_old).val();
      $(selector2).parent().hide();
      $(selector).focus();
      $(selector).focusout(function() {
        $(selector).hide();
        $(selector).val(renameFrom);
        $(selector2).parent().show();
        shortcut.remove("Esc");
        shortcut.remove("Enter");
      });
      shortcut.add("Esc", function() {
        $(selector).hide();
        $(selector).val(renameFrom);
        $(selector2).parent().show();
        shortcut.remove("Esc");
        shortcut.remove("Enter");
      });
      shortcut.add("Enter", function() {
        var renameTo = $(selector).val();
        renameHierarchyElement('space', renameFrom, renameTo);
        shortcut.remove("Esc");
        shortcut.remove("Enter");
      });
    });
    // Rename a page by clicking on the pencil
    $('.hierarchy-rename-page').click(function(){
      var selector = document.getElementById('renamePage_'+$(this).attr('data-pageid'));
      var selector2 = document.getElementById('hierarchyDisplayPage_'+$(this).attr('data-pageid'));
      $(selector).show();
      $(selector).val(decodeURIComponent($(this).attr('data-pageid')));
      var renameFrom = $(selector).val();
      $(selector2).hide();
      $(selector).focus();
      $(selector).focusout(function() {
        $(selector).hide();
        $(selector).val(renameFrom);
        $(selector2).show();
        shortcut.remove("Esc");
        shortcut.remove("Enter");
      });
      shortcut.add("Esc", function() {
        $(selector).hide();
        $(selector).val(renameFrom);
        $(selector2).show();
        shortcut.remove("Esc");
        shortcut.remove("Enter");
      });
      shortcut.add("Enter", function() {
        var renameTo = $(selector).val();
        renameHierarchyElement('page', renameFrom, renameTo);
        shortcut.remove("Esc");
        shortcut.remove("Enter");
      });
    });
    $(".hierarchy-right").css({
      "backgroundColor" : $("#hierarchyBlock").css('backgroundColor')
    });

    // User wants to edit (wiki) a new page
    $('.editPage').click(function(e){
      if(!saving &amp;&amp; !loading) {
        e.preventDefault();
        $('#hierarchyNextDocName').val($(this).attr('data-page'));
        $('#hierarchyNextDocSpace').val($(this).attr('data-space'));

        if(syntaxHighlighting) {
          synchronizeObjects();
        }
        var currentContent = '';
        if(currentEditor == 'object') {
          var arrayVal = getObjectInputFields();
          arrayVal.each(function(elemt, index) {
            currentContent += $(index).val();
          });
        }
        else {
          currentContent = $(textEditor).val();
        }

        if(savedContent != currentContent) {
          nextEditor = 'wiki';
          if(bootstrap()) {
            $('#hierarchyChangePageModal').modal('show');
          }
          else {
            openModalNoBootstrap('#hierarchyChangePageModal');
          }
        }
        else {
          goToNewPageWiki();
        }
      }
    });
    // User wants to edit (object) a new page
    $('.editObject').click(function(e){
      if(!saving &amp;&amp; !loading) {
        e.preventDefault();
        $('#hierarchyNextDocName').val($(this).attr('data-page'));
        $('#hierarchyNextDocSpace').val($(this).attr('data-space'));

        if(syntaxHighlighting) {
          synchronizeObjects();
        }
        var currentContent = '';
        if(currentEditor == 'object') {
          var arrayVal = getObjectInputFields();
          arrayVal.each(function(elemt, index) {
            currentContent += $(index).val();
          });
        }
        else {
          currentContent = $(textEditor).val();
        }

        if(savedContent != currentContent) {
          nextEditor = 'object';
          if(bootstrap()) {
            $('#hierarchyChangePageModal').modal('show');
          }
          else {
            openModalNoBootstrap('#hierarchyChangePageModal');
          }
        }
        else {
          goToNewPageObject();
        }
      }
    });

    // Load the new content and new title when the user click on a link in the hierarchy panel
    $('#hierarchySaveAndContinueModal, #hierarchyDiscardAndContinueModal').click(function(e){
      e.preventDefault();
      if(!saving &amp;&amp; !loading) {
        $('body').removeClass('modal-open');
        if(bootstrap()) {
          $('#hierarchyChangePageModal').modal('hide');
        }
        else {
          closeModalNoBootstrap();
        }
        if($(this).attr('id') == 'hierarchySaveAndContinueModal') {
          if(currentEditor == "wiki") {
            savePage(currentSpace, currentPage, $(textEditor).val(), $('#xwikidoctitleinput').val(), false, true);
            if(nextEditor == 'object') {
              goToNewPageObject();
            }
            else if (nextEditor == "wiki") {
              goToNewPageWiki();
            }
          }
          else if (currentEditor == "object") {
            // We can't call goToNewPageObject or goToNewPageWiki here since we have to wait the saving to be completed before changing page. Thus, saveObjects has to manage the call.
            saveObjects(true, true);
          }
        }
        else {
          if(nextEditor == 'object') {
            goToNewPageObject();
          }
          else if (nextEditor == "wiki") {
            goToNewPageWiki();
          }
        }
      }
    });

    // Reset page name and folder name in modals
    $('#hierarchyNewPageName').val('');
    $('#hierarchyNewFolderName').val('');
  }

  function goToNewPageWiki() {
    if(currentEditor != 'wiki') {
      changeEditor(currentEditor);
      currentEditor = "wiki";
      $('.editorElement').hide();
      initWikiEditor();
    }
    else {
      loadPage();
    }
  }
  function goToNewPageObject() {
    if(currentEditor != 'object') {
      changeEditor(currentEditor);
      currentEditor = "object";
      $('.editorElement').hide();
      initObjectEditor();
    }
    else {
      loadObject();
    }
  }

  //-------------------------------------
  //---------- Wiki Editor API ----------
  //-------------------------------------
  //
  //loadPage()
  //savePage(string space, string page, string newContent, string newTitle, boolean changeSavedContent, boolean continueEditing)
  //cancelAndViewIDE()

  function loadPage() {
    if(!loading) {
      loading = true;
      $('#hierarchyLoadingState').html('&lt;strong class="red"&gt;Loading...&lt;/strong&gt;').show();
      currentSpace = $('#hierarchyNextDocSpace').val();
      currentPage = $('#hierarchyNextDocName').val();
      currentPageEscaped = currentPage.replace('%5C', '%5C%5C').replace(/\\/g, '%5C%5C').replace(/\./g, '%5C.');
      currentSpaceEscaped = getSpacesEscaped(currentSpace);
      var urlSpaces = getURLSpacesString(currentSpace);
      $.ajax({
        url: wikiViewURL+urlSpaces+"/"+currentPage+"?xpage=plain&amp;raw=1&amp;language=default",
        type: "GET",
        contentType: "plain/text",
      }).success(function(dataContent){
        var formattedData = dataContent.replace(/^&lt;pre&gt;/, '').replace(/&lt;\/pre&gt;$/, '');
        $('#hierarchyNewFolderName').val('');
        reloadHierarchy(true, formattedData);
        loading = false;
        $('#hierarchyLoadingState').html('&lt;strong class="green"&gt;Loaded&lt;/strong&gt;').show().delay(2500).queue(function(n) {
          $(this).hide().html('');
          n();
        });
      });
    }
  }

  function savePage(space, page, newContent, newTitle, changeSavedContent, continueEditing) {
    if(!saving) {
      saving = true;
      var restSpaces = getRestSpacesString(space);
      $('#hierarchySavingState').html('&lt;strong class="red"&gt;Saving...&lt;/strong&gt;').show();
      $.ajax({
        url: "/xwiki/rest/wikis/"+XWiki.currentWiki+"/"+restSpaces+"/pages/"+page,
        type: "PUT",
        contentType: "application/x-www-form-urlencoded",
        accept: "application/xml",
        data: "title="+encodeURIComponent(newTitle)+"&amp;content="+encodeURIComponent(newContent),
      }).error(function(xhr, errorStatus){
        saving = false;
        $('#hierarchySavingState').attr('class', 'red').html('&lt;strong&gt;'+xhr.statusText+'&lt;/strong&gt;').show().delay(4000).queue(function(n) {
          $(this).hide().removeAttr('class').html('');
          n();
        });
        return false;
      }).success(function(data){
        if(changeSavedContent) {
          savedContent = $(textEditor).val();
        }
        $('#hierarchyStar').hide();
        $('#hierarchySavingState').html('&lt;strong&gt;Saved&lt;/strong&gt;').show().delay(2500).queue(function(n) {
          $(this).hide().html('');
          n();
        });
        saving = false;
        if(continueEditing) return true;
        else window.location.href = wikiViewURL+currentSpace+'/'+currentPage;
      });
    }
  }

  function cancelAndViewIDE() {
    if(currentEditor == 'wiki' &amp;&amp; savedContent != $(textEditor).val()) {
      if(confirm("Are you sure?")) {
        window.location.href = wikiViewURL+currentSpace+'/'+currentPage;
      }
    }
    else {
      window.location.href = wikiViewURL+currentSpace+'/'+currentPage;
    }
  }

  //-------------------------------------
  //--------- Object Editor API ---------
  //-------------------------------------
  //
  //loadObject()
  //displayObjectIDE(List objectsList, Int index, Int objectsListSize, String oldClass, String dataHTML, String menuHTML, String addObjectHTML)
  //completeObjectLoadingIDE(String dataHTML, String menuHTML, String addObjectHTML, Int objectsListSize)
  //addObject(String className)
  //initObjects()
  //removeObject(String className, Int number)
  //saveObjects(boolean continueEdit)
  //synchronizeObjects()

  function loadObject() {
    if(!loading) {
      loading = true;
      $('#hierarchyLoadingState').html('&lt;strong&gt;Loading...&lt;/strong&gt;').show();
      currentSpace = $('#hierarchyNextDocSpace').val();
      currentPage = $('#hierarchyNextDocName').val();
      currentPageEscaped = currentPage.replace('%5C', '%5C%5C').replace(/\\/g, '%5C%5C').replace(/\./g, '%5C.');
      currentSpaceEscaped = getSpacesEscaped(currentSpace);
      var restSpaces = getRestSpacesString(currentSpace);
      var urlSpaces = getURLSpacesString(currentSpace);
      $.ajax({
        url: '/xwiki/rest/wikis/'+XWiki.currentWiki+'/'+restSpaces+'/pages/'+currentPage+'/objects',
        type: "GET",
        contentType: "application/xml",
      }).success(function(dataContent){
        var form_token = xm ? xm.form_token : $('meta[name="form_token"]').attr('content');
        var dataHTML = '&lt;form method="post" action="/xwiki/bin/save/'+urlSpaces+'/'+currentPage+'" id="objectIDEform"&gt;&lt;input type="hidden" name="form_token" value="'+form_token+'" /&gt;&lt;div class="hierarchy-hidden"&gt;';
        var menuHTML = '&lt;div id="editorObjectMenu"&gt;&lt;span id="editorObjectMenuTitle"&gt;Quick Access&lt;/span&gt;&lt;div id="editorObjectMenuContent"&gt;';
        var addObjectHTML = '&lt;div id="addObjectBlock"&gt;';
        $('#hierarchyNewFolderName').val('');
        var objectsList = $(dataContent).find('objectSummary');
        var className = '';
        var number = '';
        objectsList.sort(function(a, b){
          if($(a).find('className').text()&gt;$(b).find('className').text()) return 1;
          else if($(a).find('className').text()&lt;$(b).find('className').text()) return -1;
          else return (parseInt($(a).find('number').text())-parseInt($(b).find('number').text()));
        });
        var objectsListSize = objectsList.size();
        var index = -1;
        // Start the loading and displaying
        displayObjectIDE(objectsList, index, objectsListSize, '', dataHTML, menuHTML, addObjectHTML);
      });
    }
  }

  // Load objects one by one until there isn't any left in objectsList
  function displayObjectIDE(objectsList, index, objectsListSize, oldClass, dataHTML, menuHTML, addObjectHTML) {
    if(index &gt;= 0) {
      var className = $(objectsList[index]).find('className').text();
      var number = $(objectsList[index]).find('number').text();
      index++;
      if(className != oldClass) {
        dataHTML += '&lt;/div&gt;&lt;h2 class="wikigeneratedheader editorObjectClassTitle" data-classname="'+className+'"&gt;'+className+'&lt;/h2&gt;&lt;div id="editorObjects-'+className+'" class="editorObjectClassDetails"&gt;';
      }
      var url = wikiViewURL+"WebIDECode/ApplicationObjects?xpage=plain&amp;docFullName="+currentSpaceEscaped+'.'+currentPageEscaped+'&amp;className='+className+'&amp;number='+number;
    }
    else {
      var url = wikiViewURL+"WebIDECode/ApplicationObjects?xpage=plain&amp;allClasses=1";
      index++;
    }
    $.ajax({
      url: url,
      type: "GET",
      contentType: "plain/text",
    }).success(function(dataContent){
      if(index &gt; 0) {
        var anchor = $('&lt;div /&gt;').append(dataContent).find('h4').attr('id');
        menuHTML += '&lt;a href="#'+anchor+'" class="editorObjectMenuLink" data-classname="'+className+'" data-number="'+number+'"&gt;'+className+' - '+number+'&lt;/a&gt;&lt;br&gt;';
        dataHTML += '&lt;div class="editorDisplayedObject"&gt;'+dataContent+'&lt;/div&gt;';
      }
      else {
        addObjectHTML += dataContent;
      }
    }).error(function(xhr) {
      dataHTML += 'Error while loading object '+className+' '+number+' : '+xhr.statusText+'&lt;br&gt;';
    }).complete(function(xhr) {
      if(index &lt; objectsListSize) displayObjectIDE(objectsList, index, objectsListSize, className, dataHTML, menuHTML, addObjectHTML);
      else {
        completeObjectLoadingIDE(dataHTML, menuHTML, addObjectHTML, objectsListSize);
      }
    });
  }

  // Display the objects
  function completeObjectLoadingIDE(dataHTML, menuHTML, addObjectHTML, objectsListSize) {
    dataHTML += '&lt;/div&gt;&lt;/form&gt;';
    menuHTML += '&lt;/div&gt;&lt;/div&gt;';
    addObjectHTML += '&lt;/div&gt;';
    $(mainBlock).html(menuHTML+addObjectHTML+dataHTML);
    initObjects();
    if(objectsListSize &lt; 3) {
      $('.editorObjectDetails').show();
    }
    if(syntaxHighlighting) {
      initCodeMirrorInternals();
    }
    reloadHierarchy();
    savedContent = '';
    var arrayVal = getObjectInputFields();
    arrayVal.each(function(elemt, index) {
      savedContent += $(index).val();
    });
    loading = false;
    $('#hierarchyLoadingState').html('&lt;strong&gt;Loaded&lt;/strong&gt;').show().delay(2500).queue(function(n) {
      $(this).hide().html('');
      n();
    });
  }

  // Add the selected object to the page
  function addObject(className) {
    if(!saving &amp;&amp; !loading) {
      $('#hierarchySavingState').html('&lt;strong&gt;Saving...&lt;/strong&gt;').show();
      saving = true;
      loading = true;
      if(className != "") {
        $.ajax({
          url: wikiViewURL+"WebIDECode/ApplicationObjects?xpage=plain&amp;addObject="+className+"&amp;docFullName="+currentSpaceEscaped+'.'+currentPageEscaped,
          type: "GET",
          dataType: "html"
        }).success(function(dataContent) {
          var divSelector = 'div[id="editorObjects-'+className+'"]';
          var anchor = $('&lt;div /&gt;').append(dataContent).find('h4').attr('id');
          var number = $('&lt;div/&gt;').append(dataContent).find('div[data-number]').attr('data-number');
          // Add the object in the right class if an object of that class is already in that page
          if($(divSelector).length){
            $(divSelector).show();
            $(divSelector).append('&lt;div class="editorDisplayedObject"&gt;'+dataContent+'&lt;/div&gt;');
          }
          // Else add the object at the end of the page and quick access menu
          else {
            $('#objectIDEform').append('&lt;h2 class="wikigeneratedheader editorObjectClassTitle" data-classname="'+className+'"&gt;'+className+'&lt;/h2&gt;&lt;div id="editorObjects-'+className+'" class="editorObjectClassDetails"&gt;&lt;div class="editorDisplayedObject"&gt;'+dataContent+'&lt;/div&gt;&lt;/div&gt;');
          }
          // Add the shortcut in the Quick Access Menu
          if($('#editorObjectMenu a[data-classname="'+className+'"]:last').length) {
            $('#editorObjectMenu a[data-classname="'+className+'"]:last').after('&lt;br&gt;&lt;a href="#'+anchor+'" class="editorObjectMenuLink" data-classname="'+className+'" data-number="'+number+'"&gt;'+className+' - '+number+'&lt;/a&gt;');
          }
          else if($('#editorObjectMenu a:last').length) {
            $('#editorObjectMenu a:last').after('&lt;br&gt;&lt;a href="#'+anchor+'" class="editorObjectMenuLink" data-classname="'+className+'" data-number="'+number+'"&gt;'+className+' - '+number+'&lt;/a&gt;');
          }
          else {
            $('#editorObjectMenuContent').append('&lt;a href="#'+anchor+'" class="editorObjectMenuLink" data-classname="'+className+'" data-number="'+number+'"&gt;'+className+' - '+number+'&lt;/a&gt;');
          }
          initObjects();
          if(syntaxHighlighting) {
            synchronizeObjects();
            $('.CodeMirror').remove();
            $('#objectIDEform textarea').show();
            initCodeMirrorInternals();
          }
        }).complete(function() {
          saving = false;
          loading = false;
          $('#hierarchySavingState').html('&lt;strong&gt;Saved&lt;/strong&gt;').show().delay(2500).queue(function(n) {
            $(this).hide().html('');
            n();
          });
        });
      }
    }
  }

  // Initialize the different events related to object editor
  function initObjects(){
    $('#objectIDEform textarea').attr('spellcheck','false');
    $('#objectIDEform textarea').attr('autocomplete','off');
    $('#objectIDEform').on('submit', function(e){
      e.preventDefault();
      saveObjects(true, false);
    });
    $('.editorObjectClassTitle').on('click', function() {
      var divSelector = 'div[id="editorObjects-'+$(this).attr('data-classname')+'"]';
      $(divSelector).toggle();
      // If the textarea was initially hidden, Syntax Highlighting editor will only appear when the user click on the textarea
      $(divSelector+' textarea').click();
    });
    $('.editorObjectTitle h4').on('click', function() {
      var divSelector = 'div[id="editorObject-'+$(this).parent().attr('data-classname')+'-'+$(this).parent().attr('data-number')+'"]';
      $(divSelector).toggle();
      // If the textarea was initially hidden, Syntax Highlighting editor will only appear when the user click on the textarea
      $(divSelector+' textarea').click();
    });
    $('.editorObjectMenuLink').on('click', function(e) {
      $('.editorObjectDetails').hide();
      var divSelector = 'div[id="editorObjects-'+$(this).attr('data-classname')+'"]';
      var divSelectorInternal = 'div[id="editorObject-'+$(this).attr('data-classname')+'-'+$(this).attr('data-number')+'"]';
      $(divSelector).show();
      $(divSelectorInternal).show();
      $(divSelector+' textarea').click();
    });
    $('.editorRemoveObject').on('click', function(e) {
      e.preventDefault();
      $('#editorDeletedObjectModalInfo').html($(this).attr('data-classname')+' - '+$(this).attr('data-number'));
      $('#editorDeleteObjectConfirmed').attr('data-classname', $(this).attr('data-classname'));
      $('#editorDeleteObjectConfirmed').attr('data-number', $(this).attr('data-number'));
      if(bootstrap()) {
        $('#editorDeleteObjectModal').modal('show');
      }
      else {
        openModalNoBootstrap('#editorDeleteObjectModal');
      }
    });
    $('#editorExpandAllButton').on('click', function(e) {
      e.preventDefault();
      $('.editorObjectDetails, .editorObjectClassDetails').show();
      $('.editorObjectDetails textarea').click();
    });
    $('#editorCollapseAllButton').on('click', function(e) {
      e.preventDefault();
      $('.editorObjectClassDetails').show();
      $('.editorObjectDetails').hide();
    });
    $('#editorObjectAddButton').on('click', function(e) {
      e.preventDefault();
      var selectedObj = $('#addClassList').val();
      addObject(selectedObj);
    });
  }

  // Remove the specified object from the page
  function removeObject(className, number) {
    if(!saving &amp;&amp; !loading) {
      $('#hierarchySavingState').html('&lt;strong&gt;Deleting...&lt;/strong&gt;').show();
      saving = true;
      var restSpaces = getRestSpacesString(currentSpace);
      $.ajax({
        url: '/xwiki/rest/wikis/'+XWiki.currentWiki+'/'+restSpaces+'/pages/'+currentPage+'/objects/'+className+'/'+number,
        type: "DELETE",
      }).success(function(dataContent){
        var divSelectorInternal = 'div[id="editorObject-'+className+'-'+number+'"]';
        $(divSelectorInternal).parent().remove();
        $('#editorObjectMenu a[data-classname="'+className+'"][data-number="'+number+'"]').next('br').remove();
        $('#editorObjectMenu a[data-classname="'+className+'"][data-number="'+number+'"]').remove();
        $('#hierarchySavingState').html('&lt;strong&gt;Deleted&lt;/strong&gt;').show().delay(2500).queue(function(n) {
          $(this).hide().html('');
          n();
        });
        if(bootstrap()) {
          $('#editorDeleteObjectModal').modal('hide');
        }
        else {
          closeModalNoBootstrap();
        }
      }).error(function(xhr){
        $('#hierarchySavingState').attr('class', 'red').html('&lt;strong&gt;'+xhr.statusText+'&lt;/strong&gt;').show().delay(4000).queue(function(n) {
          $(this).hide().removeAttr('class').html('');
          n();
        });
      }).complete(function() {
        $('#editorDeletedObjectModalInfo').html('');
        saving = false;
      });
    }
  }

  // Save the displayed objects
  function saveObjects(continueEdit, changePage) {
    $('#hierarchySavingState').html('&lt;strong&gt;Saving...&lt;/strong&gt;').show();
    if(syntaxHighlighting) {
      synchronizeObjects();
    }
    $.ajax({
      url: $('#objectIDEform').attr('action'),
      type: $('#objectIDEform').attr('method'),
      data: $('#objectIDEform').serialize(),
      success: function() {
        // If Save &amp; View button: go to view mode
        if(!continueEdit) {
          window.location.href = wikiViewURL+currentSpace+'/'+currentPage;
        }
        // Else if Save while going to a new page (button from modal): change the page when the saving is completed
        else if(changePage) {
          if(nextEditor == 'object') {
            goToNewPageObject();
          }
          else if (nextEditor == "wiki") {
            goToNewPageWiki();
          }
        }
        // Else, Save &amp; Continue eidting the same page: change the value of savedContent
        else {
          savedContent = '';
          var arrayVal = getObjectInputFields();
          arrayVal.each(function(elemt, index) {
            savedContent += $(index).val();
          });
        }
        $('#hierarchySavingState').html('&lt;strong&gt;Saved&lt;/strong&gt;').show().delay(2500).queue(function(n) {
          $(this).hide().html('');
          n();
        });
      }
    });
  }

  // Synchronize the original textareas' contents with the codemirrors' contents.
  function synchronizeObjects() {
    codeMirrors.each(function (cMElement) {
      cMElement.save();
    });
  }

  // Get all the inputs (input, textarea, select, etc.) in the object editor, except those for CodeMirror
  function getObjectInputFields() {
    return $('.editorObjectClassDetails textarea, .editorObjectClassDetails input, .editorObjectClassDetails select').not('.CodeMirror textarea')
  }

  //-------------------------------------
  //----------- Hierarchy API -----------
  //-------------------------------------
  //
  //reloadHierarchy()
  //removeFolder(string folder)
  //removePage(string page)
  //addFolder()
  //addPage()
  //addExistingPage()
  function reloadHierarchy(loadWikiContent, formattedData) {
    $.ajax({
      url: wikiGetURL+"WebIDECode/ApplicationHierarchy?xpage=plain",
      type: "GET",
      datatype : "html",
      //data : "action="+XWiki.contextaction+"&amp;editor="+currentEditor+"&amp;masterPage="+masterSpace+"."+masterName+"&amp;remotePage="+currentSpaceEscaped+"."+currentPageEscaped+"&amp;hiddenSpaces="+encodeURIComponent(hiddenSpaces)+"&amp;hiddenPages="+encodeURIComponent(hiddenPages),
      data : "action="+XWiki.contextaction+"&amp;editor="+currentEditor+"&amp;masterPage="+masterSpace+"."+masterName+"&amp;remotePage="+currentSpaceEscaped+"."+currentPageEscaped+"&amp;visibleSpaces="+encodeURIComponent(visibleSpaces)+"&amp;visiblePages="+encodeURIComponent(visiblePages),
      contentType: "text/html",
    }).success(function(data){
      //Update the hierarchy content (list of documents only)
      var result = $('&lt;div /&gt;').append(data).find('#hierarchyContent').html();
      $('#hierarchyContent').html(result);
      if(loadWikiContent) {
        $(textEditor).val($('&lt;div /&gt;').html(formattedData).text());
        if(syntaxHighlighting) {
          codeMirrors[0].getDoc().setValue($(textEditor).val());
        }
        savedContent = $(textEditor).val();
        $('#xwikidoctitleinput').val(decodeURIComponent($('#hierarchyDocTitle').val()));
      }
      $('#editorObjectTitle').html(decodeURIComponent($('#hierarchyDocTitle').val()));
      initialization();
    });
  }

  function removeFolder(folder) {
    var restSpaces = getRestSpacesString(masterSpace);
    $.ajax({
      url: "/xwiki/rest/wikis/"+XWiki.currentWiki+"/"+restSpaces+"/pages/"+masterName+"/objects/WebIDECode.ApplicationClass/0/properties/spaces",
      type: "GET",
      contentType: "application/xml",
    }).success(function(res){
      var oldSpaces = $(res).find('value').text();
      var spaceArray = oldSpaces.split('|');
      var indexSpace = $.inArray(decodeURIComponent(folder), spaceArray)
      if(indexSpace &gt;= 0) {
        spaceArray.splice(indexSpace, 1);
        $.ajax({
          url: "/xwiki/rest/wikis/"+XWiki.currentWiki+"/"+restSpaces+"/pages/"+masterName+"/objects/WebIDECode.ApplicationClass/0/properties/spaces",
          type: "PUT",
          contentType: "application/x-www-form-urlencoded",
          accept: "application/xml",
          data: "property#spaces="+encodeURIComponent(spaceArray),
        }).success(function(){
          $('#hierarchySavingState').html('&lt;strong&gt;Folder removed from project&lt;/strong&gt;').show().delay(2500).queue(function(n) {
            $(this).hide().html('');
            n();
          });
          reloadHierarchy();
        }).error(function(xhr){
          $('#hierarchySavingState').attr('class', 'red').html('&lt;strong&gt;'+xhr.statusText+'&lt;/strong&gt;').show().delay(4000).queue(function(n) {
            $(this).hide().removeAttr('class').html('');
            n();
          });
        });
      }
      else {
        console.log("Folder "+folder+" not found in the list of folders in this project.");
      }
    });
  }

  function removePage(page) {
    var restSpaces = getRestSpacesString(masterSpace);
    $.ajax({
      url: "/xwiki/rest/wikis/"+XWiki.currentWiki+"/"+restSpaces+"/pages/"+masterName+"/objects/WebIDECode.ApplicationClass/0/properties/pages",
      type: "GET",
      contentType: "application/xml",
    }).success(function(res){
      var oldPages = $(res).find('value').text();
      var pageArray = oldPages.split('|');
      var indexSpace = $.inArray(page, pageArray)
      if(indexSpace &gt;= 0) {
        pageArray.splice(indexSpace, 1);
        $.ajax({
          url: "/xwiki/rest/wikis/"+XWiki.currentWiki+"/"+restSpaces+"/pages/"+masterName+"/objects/WebIDECode.ApplicationClass/0/properties/pages",
          type: "PUT",
          contentType: "application/x-www-form-urlencoded",
          accept: "application/xml",
          data: "property#pages="+encodeURIComponent(pageArray),
        }).success(function(){
          $('#hierarchySavingState').html('&lt;strong&gt;Page removed from project&lt;/strong&gt;').show().delay(2500).queue(function(n) {
            $(this).hide().html('');
            n();
          });
          reloadHierarchy();
        }).error(function(xhr){
          $('#hierarchySavingState').attr('class', 'red').html('&lt;strong&gt;'+xhr.statusText+'&lt;/strong&gt;').show().delay(4000).queue(function(n) {
            $(this).hide().removeAttr('class').html('');
            n();
          });
        });
      }
    });
  }

  function renameHierarchyElement(type, renameFrom, renameTo) {
    saving = true;
    $('#hierarchySavingState').html('&lt;strong&gt;Renaming in progress...&lt;/strong&gt;').show();
    $.ajax({
      url: wikiGetURL+"WebIDECode/ApplicationRename",
      type: "POST",
      data: "outputSyntax=plain&amp;"+type+"=1&amp;masterPage="+masterSpace+"."+masterName+"&amp;renameFrom="+renameFrom+"&amp;renameTo="+renameTo,
    }).success(function(data) {
      $('#hierarchySavingState').html('&lt;strong&gt;Renaming performed&lt;/strong&gt;').show().delay(2500).queue(function(n) {
        $(this).hide().html('');
        n();
      });
      reloadHierarchy();
    }).error(function(xhr) {
      $('#hierarchySavingState').attr('class', 'red').html('&lt;strong&gt;'+xhr.statusText+'&lt;/strong&gt;').show().delay(4000).queue(function(n) {
        $(this).hide().removeAttr('class').html('');
        n();
      });
    }).complete(function() {
      saving = false;
    });
  }

  /**
  ** Add a folder in the hierarchy list :
  ** 1/ Check that the folder doesn't already exists
  ** 2/ Add the folder in the list alphabetically sorted
  ** 3/ Update the hierarchy
  */
  function addFolder() {
    var restSpaces = getRestSpacesString(masterSpace);
    var newFolder = $('#hierarchyNewFolderName').val();
    $.ajax({
      url: "/xwiki/rest/wikis/"+XWiki.currentWiki+"/"+restSpaces+"/pages/"+masterName+"/objects/WebIDECode.ApplicationClass/0/properties/spaces",
      type: "GET",
      contentType: "application/xml",
    }).success(function(res){
      var oldSpaces = $(res).find('value').text();
      var spaceArray = oldSpaces.split('|');
      if($.inArray(newFolder, spaceArray) == -1) {
        spaceArray.push(newFolder);
        spaceArray = spaceArray.sort();
        $.ajax({
          url: "/xwiki/rest/wikis/"+XWiki.currentWiki+"/"+restSpaces+"/pages/"+masterName+"/objects/WebIDECode.ApplicationClass/0/properties/spaces",
          type: "PUT",
          contentType: "application/x-www-form-urlencoded",
          accept: "application/xml",
          data: "property#spaces="+encodeURIComponent(spaceArray),
        }).success(function(){
          $('#hierarchyNewFolderName').val('');
          if(bootstrap()) {
            $('#hierarchyFolderModal').modal('hide');
          }
          else {
            closeModalNoBootstrap();
          }
          $('#hierarchySavingState').html('&lt;strong&gt;Folder added&lt;/strong&gt;').show().delay(4000).queue(function(n) {
            $(this).hide().html('');
            n();
          });
          reloadHierarchy();
        }).error(function(xhr){
          $('#hierarchyNewFolderName').val('');
          if(bootstrap()) {
            $('#hierarchyFolderModal').modal('hide');
          }
          else {
            closeModalNoBootstrap();
          }
          $('#hierarchySavingState').attr('class', 'red').html('&lt;strong&gt;'+xhr.statusText+'&lt;/strong&gt;').show().delay(4000).queue(function(n) {
            $(this).hide().removeAttr('class').html('');
            n();
          });
        });
      }
    });
  }

  /**
  ** Add a page in a folder :
  ** 1/ Check that the page doesn't already exists
  ** 2/ Create the page in the wiki
  ** 3/ Update the hierarchy
  */
  function addPage() {
    var folder = encodeURIComponent(unescape($('#hierarchyPageFolder').text()));
    var newPage = encodeURIComponent($('#hierarchyNewPageName').val());
    var restSpaces = getRestSpacesString(folder);
    $.ajax({
      url: "/xwiki/rest/wikis/"+XWiki.currentWiki+"/"+restSpaces+"/pages/"+newPage,
      type: "GET",
      contentType: "application/xml",
    }).success(function(xhr){
      $('#hierarchyExistingPageModalError').html('ERROR : A page with the same name already exist').show().delay(4000).queue(function(n) {
        $(this).hide().html('');
        n();
      });
    }).error(function(res){
      $.ajax({
        url: "/xwiki/rest/wikis/"+XWiki.currentWiki+"/"+restSpaces+"/pages/"+newPage,
        type: "PUT",
        contentType: "application/x-www-form-urlencoded",
        accept: "application/xml",
        data: "title="+newPage+"&amp;parent="+currentSpaceEscaped+"."+currentPageEscaped,
      }).success(function(){
        $('#hierarchyNewPageName').val('');
        if(bootstrap()) {
          $('#hierarchyPageModal').modal('hide');
        }
        else {
          closeModalNoBootstrap();
        }
        $('#hierarchySavingState').html('&lt;strong&gt;Page added&lt;/strong&gt;').show().delay(4000).queue(function(n) {
          $(this).hide().html('');
          n();
        });
        reloadHierarchy();
      }).error(function(xhr){
        $('#hierarchyNewPageName').val('');
        if(bootstrap()) {
          $('#hierarchyPageModal').modal('hide');
        }
        else {
          closeModalNoBootstrap();
        }
        $('#hierarchySavingState').attr('class', 'red').html('&lt;strong&gt;'+xhr.statusText+'&lt;/strong&gt;').show().delay(4000).queue(function(n) {
          $(this).hide().removeAttr('class').html('');
          n();
        });
      });
    });
  }

  /**
  ** Add an existing page in the hierarchy list :
  ** 1/ Check that the page exists
  ** 2/ Add the page in the list alphabetically sorted
  ** 3/ Update the hierarchy
  */
  function addExistingPage() {
    var existingPage = $('#hierarchyExistingPageName').val();
    var existingPageList = getSpaceAndName(existingPage);
    var existingPageSpace = existingPageList[0];
    var existingPageName = existingPageList[1];
    var restSpaces = getRestSpacesString(existingPageSpace);
    var restSpacesMaster = getRestSpacesString(masterSpace);
    $.ajax({
      url: "/xwiki/rest/wikis/"+XWiki.currentWiki+"/"+restSpaces+"/pages/"+existingPageName,
      type: "GET",
      contentType: "application/xml",
    }).error(function(){
      $('#hierarchyExistingPageModalError').html('ERROR : Unexisting page').show().delay(4000).queue(function(n) {
        $(this).hide().html('');
        n();
      });
    }).success(function(){
      $.ajax({
        url: "/xwiki/rest/wikis/"+XWiki.currentWiki+"/"+restSpacesMaster+"/pages/"+masterName+"/objects/WebIDECode.ApplicationClass/0/properties/pages",
        type: "GET",
        contentType: "application/xml",
      }).success(function(res){
        var oldPages = $(res).find('value').text();
        var pageArray = oldPages.split('|');
        if($.inArray(existingPage, pageArray) == -1) {
          pageArray.push(existingPage);
          pageArray = pageArray.sort();
          $.ajax({
            url: "/xwiki/rest/wikis/"+XWiki.currentWiki+"/"+restSpacesMaster+"/pages/"+masterName+"/objects/WebIDECode.ApplicationClass/0/properties/pages",
            type: "PUT",
            contentType: "application/x-www-form-urlencoded",
            accept: "application/xml",
            data: "property#pages="+encodeURIComponent(pageArray),
          }).success(function(){
            $('#hierarchyExistingPageName').val('');
            if(bootstrap()) {
              $('#hierarchyExistingPageModal').modal('hide');
            }
            else {
              closeModalNoBootstrap();
            }
            $('#hierarchySavingState').html('&lt;strong&gt;Page added&lt;/strong&gt;').show().delay(4000).queue(function(n) {
              $(this).hide().html('');
              n();
            });
            reloadHierarchy();
          }).error(function(xhr){
            $('#hierarchyExistingPageName').val('');
            if(bootstrap()) {
              $('#hierarchyExistingPageModal').modal('hide');
            }
            else {
              closeModalNoBootstrap();
            }
            $('#hierarchySavingState').attr('class', 'red').html('&lt;strong&gt;'+xhr.statusText+'&lt;/strong&gt;').show().delay(4000).queue(function(n) {
              $(this).hide().removeAttr('class').html('');
              n();
            });
          });
        }
      });
    });
  }

  // Initialize the WebIDE wiki editor
  function initWikiEditor() {
    mainBlock = '#contentMainBlock';
    buttonBarBlock = '#editorWikiButtonBar';
    $(mainBlockContainer).css({"height" : "650px"});
    XWiki.editor = 'wiki';
    // The textarea may have been hidden by Syntax Highlighting before
    $('#contentMainBlock').html('&lt;textarea spellcheck="false" autocomplete="off" id="content"&gt;&lt;/textarea&gt;');
    $('.editorEditElement').css({"display" : "block"});
    $('.editorWikiElement').css({"display" : "block"});
    $('#xwikidoctitleinput').css({"display" : "inline-block"});
    $('#editorObjectTitle').hide();
    if(syntaxHighlighting) {
      var insertTags = function(){return true};
      // Add the CodeMirror editor
      initCodeMirrorInternals();
    }
    else {
      setStarEvent(true);
      addButtonEvents('wiki');
      loadPage();
    }
  }
  // Initialize the hierarchy in the old XWiki class editor
  function initClassEditor() {
    currentEditor = "class";
    mainBlock = '#propupdate';
    mainBlockContainer = '#mainEditArea';
    initialization();
  }
  // Initialize the WebIDE object editor
  function initObjectEditor() {
    mainBlock = '#objectMainBlock';
    $(mainBlockContainer).css({"height" : "auto"});
    $('.editorObjectElement').css({"display" : "block"});
    $('.editorEditElement').css({"display" : "block"});
    $('#xwikidoctitleinput').hide();
    $('#editorObjectTitle').show();
    addButtonEvents('object');
    XWiki.editor = 'object';
    loadObject();
  }
  // Initialize the hierarchy in Master page view mode
  function initViewEditor() {
    mainBlock = '#displayBlock';
    $('.editorViewElement').css({"display" : "block"});
    $('#xwikidoctitleinput').hide();
    $('#editorObjectTitle').show();
    initialization();
  }

  // Hide the old editor when switching between object and wiki
  function changeEditor(oldEditor) {
    if(oldEditor == 'wiki') {
      setStarEvent(false);
      $('#contentMainBlock').html('');
    }
    else if(oldEditor == 'object') {
      $('#objectMainBlock').html('');
    }
    $('.CodeMirror').remove();
    codeMirrors = [];
  }

  /**
  ** Manage the saving events
  ** 1/ Star which appears when the current edited page is unsaved
  ** 2/ Saving events when the user clicks on the saving buttons or uses the shortcuts
  */
  function setStarEvent(state) {
    var elementEditor = $(textEditor);
    // Add a star in the hierarchy if the content has changed
    if(state == true) {
      elementEditor.on('keyup', addStarEvent);
    }
    else {
      elementEditor.off('keyup', addStarEvent);
    }
  }
  function addStarEvent() {
    if(syntaxHighlighting) {
      $('#hierarchyStar').show();
    }
    else {
      if(savedContent != $(textEditor).val()) {
        $('#hierarchyStar').show();
      }
      else {
        $('#hierarchyStar').hide();
      }
    }
  }
  function addButtonEvents(editor) {
    shortcut.remove("Alt+Shift+S");
    shortcut.remove("Alt+S");
    shortcut.remove("Alt+C");
    if(editor == 'wiki') {
      // Add events on buttons and shortcuts
      $('#hierarchySaveButtonIDE').click(function(e){
        e.preventDefault();
        savePage(currentSpace, currentPage, $(textEditor).val(), $('#xwikidoctitleinput').val(), true, true);
      });
      $('#hierarchySaveViewButtonIDE').click(function(e){
        e.preventDefault();
        savePage(currentSpace, currentPage, $(textEditor).val(), $('#xwikidoctitleinput').val(), true, false);
      });
      $('#hierarchyDiscardViewButtonIDE').click(function(e){
        e.preventDefault();
        cancelAndViewIDE();
      });
      shortcut.add("Alt+Shift+S", function() {
        if(syntaxHighlighting) {
          synchronizeObjects();
        }
        savePage(currentSpace, currentPage, $(textEditor).val(), $('#xwikidoctitleinput').val(), true, true);
      });
      shortcut.add("Alt+S", function() {
        if(syntaxHighlighting) {
          synchronizeObjects();
        }
        savePage(currentSpace, currentPage, $(textEditor).val(), $('#xwikidoctitleinput').val(), true, false);
      });
      shortcut.add("Alt+C", function() {cancelAndViewIDE();});
    }
    else if(editor == 'object') {
      // Add events on buttons and shortcuts
      $('#hierarchySaveButtonIDE').click(function(e){
        e.preventDefault();
        saveObjects(true, false);
      });
      $('#hierarchySaveViewButtonIDE').click(function(e){
        e.preventDefault();
        saveObjects(false, false);
      });
      $('#hierarchyDiscardViewButtonIDE').click(function(e){
        e.preventDefault();
        cancelAndViewIDE();
      });
      $('#objectIDEform')
      shortcut.add("Alt+Shift+S", function() {
        saveObjects(true, false);
      });
      shortcut.add("Alt+S", function() {
        saveObjects(false, false);
      });
      shortcut.add("Alt+C", function() {cancelAndViewIDE();});
    }
  }

  // Read and write cookies with specified expiration date
  function setCookieHierarchy(cname, cvalue, exdays) {
    var d = new Date();
    d.setTime(d.getTime() + (exdays*24*60*60*1000));
    var expires = "expires="+d.toUTCString();
    document.cookie = masterName+"-"+cname + "=" + cvalue + "; " + expires + ";path=/";
  }
  function getCookieHierarchy(cname) {
    var name = masterName+"-"+cname + "=";
    var ca = document.cookie.split(';');
    for(var i=0; i&lt;ca.length; i++) {
      var c = ca[i];
      while (c.charAt(0)==' ') c = c.substring(1);
      if (c.indexOf(name) == 0) return c.substring(name.length,c.length);
    }
    return "";
  }

  /** NEW
   * Nested Spaces Update
   * - Check XWiki version (nested spaces if &gt;= 7.2)
   * - Transform nested space to rest format (spaces/Space1/spaces/Space2)
   */

  /**
   * Check if Nested spaces are available if that version of XWiki
   * @return boolean
   */
  function checkNestedSpaces() {
    var xwikiVersion = $('#xwikiVersion').val();
    var baseVersion = xwikiVersion.match(/([0-9.]+).*/);
    return (parseFloat(baseVersion)&gt;=7.2);
  }

  /**
   * @param spaces The string describing spaces with XWiki classic format 'A.B'
   * @return The string describing spaces with XWiki REST format 'spaces/A/spaces/B'
   */
  function getRestSpacesString(spaces) {
    if(NESTED_SPACES) {
      var spacesEnc = spaces.replace(/%5C\./g, '%5C%2E').replace(/\\\./g, '%5C%2E');
      var spacesList = spacesEnc.split('.');
      var restFormat = '';
      for(var i=0; i&lt;spacesList.length; i++) {
        restFormat += 'spaces/'+spacesList[i].replace('%5C%2E', '\.')+'/';
      }
      return restFormat.substring(0, restFormat.length - 1);
    }
    else return 'spaces/'+spaces+'';
  }

  /**
   * @param spaces The string describing spaces with XWiki classic format 'A.B'
   * @return The string describing spaces with XWiki URL format 'A/B'
   */
  function getURLSpacesString(spaces) {
    if(NESTED_SPACES) {
      var spacesEsc = spaces.replace(/%5C\./g, '%5C%2E').replace(/\\\./g, '%5C%2E');
      var spacesList = spacesEsc.split('.');
      var restFormat = '';
      for(var i=0; i&lt;spacesList.length; i++) {
        restFormat += spacesList[i].replace('%5C%2E', '\.')+'/';
      }
      return restFormat.substring(0, restFormat.length - 1);
    }
    else return spaces;
  }

  /**
   * @param spaces The string describing a space with XWiki classic format 'A.B' (without nested space)
   * @return The string describing escaped space name 'A\.B'
   */
  function getSpacesEscaped(spaces) {
    if(NESTED_SPACES) {
      return spaces;
    }
    else return spaces.replace('%5C', '%5C%5C').replace(/\\/g, '%5C%5C').replace(/\./g, '%5C.');
  }

  /**
   * @param fullName The string describing the full name of a page 'A.B.WebHome'
   * @return The list of the space and the name ['A.B', 'WebHome']
   */
  function getSpaceAndName(fullName) {
    var fullNameEsc = fullName.replace(/%5C\./g, '%5C%2E').replace(/\\\./g, '%5C%2E');
    var existingPageSpace = fullNameEsc.substring(0, fullNameEsc.lastIndexOf(".")).replace('%5C%2E', '\.') || '';
    var existingPageName = fullNameEsc.substring(fullNameEsc.lastIndexOf(".") + 1, fullNameEsc.length).replace('%5C%2E', '\.') || '';
    return [existingPageSpace, existingPageName];
  }

});
});</code>
    </property>
    <property>
      <name>Hierarchy panel</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WebIDECode.ApplicationHierarchy</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>0c7773fa-9a7a-49a4-b0db-44800f0bf911</guid>
    <property>
      <cache>forbid</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')

/* Hierarchy Block */
#hierarchyBlock {
  background-color: $theme.fieldGradientColor;
  min-width: 250px;
  /*width: 17%;*/
  overflow-y: auto;
  /*overflow-x: auto;*/
  float: left;
  position: relative;
  height: 100%;
  resize: horizontal;
  box-sizing: border-box;
}
/* Project Block */
#hierarchyContent {
  /*overflow-x: auto;*/
  padding: 5px;
  /*width: 100%;*/
  box-sizing: border-box;
}
#hierarchyMainList {
  -webkit-user-select: none;  /* Chrome all / Safari all */
  -moz-user-select: none;     /* Firefox all */
  -ms-user-select: none;      /* IE 10+ */
  user-select: none;
}
#hierarchyMainList li {
  overflow: hidden;
  white-space: nowrap;
  position: relative;
  -webkit-user-select: none;  /* Chrome all / Safari all */
  -moz-user-select: none;     /* Firefox all */
  -ms-user-select: none;      /* IE 10+ */
  user-select: none;
}
.hierarchy-right {
  cursor: pointer;
  position: absolute;
  background-color: $theme.fieldGradientColor;
  right: 0px;
  top: 0px;
  padding: 1px;
}
#hierarchyOpenBlock {
  cursor: pointer;
  padding-top: 5px;
  padding-bottom: 5px;
  text-align: center;
}
#hierarchyCloseBlock p {
  padding: 5px;
  margin: 0px;
}
#hierarchyClose {
  cursor: pointer;
  float: right;
  padding: 5px;
}
.exportLink {
  font-weight: bold;
}

/* Project Block - Colibri skin */
#hierarchyContent ul {
  margin: 0px;
}
.hierarchy-list p {
  margin: 0px !important;
}
.hierarchy-list img {
  padding: 0px !important;
}
#backgroundModalNoBootstrap {
  position: fixed;
  left: 0px;
  top: 0px;
  right: 0px;
  bottom: 0px;
  z-index: 999;
  background-color: black;
  opacity: 0.3;
  display: none;
}

/* Project Content */
.hierarchy-list {
  list-style-type: none;
  padding-left: 25px;
  margin: 0px;
}
.hierarchy-list p {
  margin: 0px;
}
.hierarchy-no-padding {
  padding-left: 0px;
}
.hierarchy-hidden {
  display: none;
}
.hierarchy-toggleFolder {
  cursor: pointer;
  display: inline-block;
}
.hierarchy-toggleFolder:hover span{
  text-decoration: underline;
}
.hierarchy-toggleFolder p{
  margin-bottom:0;
}
.hierarchy-displayPage {
  cursor: pointer;
  display: inline-block;
}
.hierarchyCurrentSpacePageAction{
  font-weight: bold;
}
.hierarchy-displayPage:hover span{
  text-decoration: underline;
}
.hierarchy-displayPage p{
  margin-bottom:0;
}
.hierarchyContextActionIcon {
  margin-right: 5px;
}
.masterExportForm {
  display: inline-block;
}
.hierarchy-export {
  background: none !important;
  border: none;
  padding: 0 !important;
  font: inherit;
  cursor: pointer;
}
/* Page state info */
#hierarchySavingState, #hierarchyLoadingState {
  float: right;
  background-color: green;
  color: white;
  border: 2px solid grey;
  padding: 2px;
  display: none;
}
#hierarchySavingState.red, #hierarchyLoadingState.red {
  background-color: red;
}
#hierarchyBottomActionsBar {
  padding-left: 18%;
  padding-right: 2%;
}
#hierarchyExistingPageModalError, #hierarchyPageModalError {
  font-weight: bold;
  color: #8A0808;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>Hierarchy CSS</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>always</use>
    </property>
  </object>
  <content>{{velocity}}
#set($masterDoc = 'Main.WebHome')
#if($xwiki.exists(${request.masterPage}))
  #set($masterDoc = $xwiki.getDocument(${request.masterPage}))
#elseif($xwiki.exists($util.decodeURI(${request.masterPage})))
  #set($masterDoc = $xwiki.getDocument($util.decodeURI(${request.masterPage})))
#end
#if($xwiki.exists(${request.remotePage}))
  #set($currentDoc = $xwiki.getDocument(${request.remotePage}))
#elseif($xwiki.exists($util.decodeURI(${request.remotePage})))
  #set($currentDoc = $xwiki.getDocument($util.decodeURI(${request.remotePage})))
#else
  #set($currentDoc = $doc)
#end
#set($currentEditor = $!request.editor)
#if("$!{request.visibleSpaces}" != "")
  #set($visibleSpacesString = $!{request.visibleSpaces})
#end
#set($visibleSpaces = $!visibleSpacesString.split("[,]"))
#if("$!{request.visiblePages}" != "")
  #set($visiblePagesString = $!{request.visiblePages})
#end
#set($visiblePages = $!visiblePagesString.split("[,]"))
(% class="hierarchy-hidden" id="hierarchyOpenBlock" %)(((
[[image:icon:control_end_blue||title="Open hierarchy"]]
)))
(% id="hierarchyCloseBlock" %)(((
**Project :** $masterDoc.display('projectName', 'view') [[image:icon:control_start_blue||title="Hide hierarchy" id="hierarchyClose"]]
)))
#set($nestedSpaces = !$xwiki.getVersion().matches('^([1-6]\..*|7\.[01].*)'))
#set($masterObj = $masterDoc.getObject('WebIDECode.ApplicationClass'))
#set($spacesListInit = $masterObj.getProperty('spaces').value)## The value of 'spaces' in the object (before checking for nested spaces)
#set($spacesListNested = $sorttool.sort($spacesListInit))## Same as $spacesListInit if nested spaces don't exist, or add all the subspaces if they exist
#if($nestedSpaces)
  #foreach($space in $spacesListInit)
    #set($xwql = "select space.reference from XWikiSpace as space where space.parent=:space order by space.name")
    #set($spacePageList = $services.query.xwql($xwql).bindValue('space', $space).execute())
    #foreach($i in [0..1000])
      #if($i &gt;= $spacePageList.size())
        #break
      #end
      #set($addToList =[])
      #set($discard = $finalList.add($spacePageList[$i]))
      #set($xwql = "select space.reference from XWikiSpace as space where space.parent=:space order by space.name")
      #set($addToList = $services.query.xwql($xwql).bindValue('space', $spacePageList[$i]).execute())
      #foreach($item in $addToList)
        #set($discard = $spacePageList.add($item))
      #end
    #end
    #foreach($spaceElement in $spacePageList)
      #if(!$spacesListNested.contains($spaceElement))
        #set($discard = $spacesListNested.add($spaceElement))
      #end
    #end
  #end
  #set($spacesListNested = $sorttool.sort($spacesListNested))
#end
#set($spacesList = $sorttool.sort($spacesListNested))## Will also contains spaces from existing pages ('pages' in the object)
#set($spacesListAdd = [])
#set($pagesList = $sorttool.sort($masterObj.getProperty('pages').value))
#foreach($page in $pagesList)
  #set($document = $xwiki.getDocument($page))
  #if(!$spacesList.contains($document.space))
    #set($discard = $spacesList.add($document.space))
  #end
#end
#set($spacesList = $sorttool.sort($spacesList))
## Determine the list of parents of the current document to be able to open and **bold** them in the hierarchy
#if($nestedSpaces)
  #set($spaceParentList = [])
  #set($spacePath = "")
  #set($spaceParentListTemp = $currentDoc.space.replace('\.', '%5C%2E').split('\.'))
  #foreach($item in $spaceParentListTemp)
    #set($spacePath = "${spacePath}$item.replace('%5C%2E', '\.')")
    #set($discard = $spaceParentList.add($spacePath))
    #set($spacePath = "${spacePath}.")
  #end
#else
  #set($spaceParentList = [$currentDoc.space])
#end
(% id="hierarchyContent" %) (((
#if($masterDoc.hasAccessLevel('edit'))
  {{html clean=false wiki=true}}&lt;form method="post" action="$masterDoc.getURL('view')" class="masterExportForm"&gt;&lt;input type="hidden" name="export" value="1" /&gt;&lt;a&gt;image:icon:bullet_disk &lt;input class="hierarchy-export" type="submit" value="Export the project (XAR)" title="Export the project"&gt; &lt;/input&gt;&lt;/a&gt;&lt;/form&gt;{{/html}}
#end
(% class="hierarchy-list hierarchy-no-padding" id="hierarchyMainList" %)
#if($masterDoc.hasAccessLevel('edit'))
  * image:icon:add {{html clean=false}}&lt;a href="#!XWebIDE" class="newFolder" data-toggle="modal" data-target="#hierarchyFolderModal"&gt;Add new/existing folder&lt;/a&gt;{{/html}}
  * image:icon:add {{html clean=false}}&lt;a href="#!XWebIDE" class="newExistingPage" data-toggle="modal" data-target="#hierarchyExistingPageModal"&gt;Add existing page&lt;/a&gt;{{/html}}
#end
#foreach($space in $spacesList)
  #set($spaceInListInit = $spacesListInit.contains($space)) ##Spaces in the 'spaces' object property
  #set($spaceInListNested = $spacesListNested.contains($space)) ##Spaces to displays
  #set($spaceEscaped = $escapetool.url($space).replace("+", "%20"))
  ## Determine the level of depth of the space to know the number of starrs (level of sublist)
  #set($depthLevel = -1)
  #set($tlist = $space.replace("\.", "%5C%2E").split('\.'))
  #set($spacePath = "")
  #set($Integer = 0)
  #foreach($item in $tlist)
    #set($spacePath = "${spacePath}$item.replace('%5C%2E', '\.')")
    #if($spacesListNested.contains($spacePath))
      #set($depthLevel = $depthLevel+1)
    #end
    #set($spacePath = "${spacePath}.")
  #end
  #set($addStars = $stringtool.repeat('*', $depthLevel))
  ##Determine the name of the subspace (without its parents), use when renaming the folder
  #set($subspaceNameIndex = $tlist.size() - 1)
  #set($subspaceName = $tlist.get($subspaceNameIndex).replace('%5C%2E', '.'))
  #set($subspaceNameEscaped = $escapetool.url($subspaceName).replace("+", "%20"))
  #if($nestedSpaces)
    #set($spaceEscapedBackslash = $escapetool.url($space).replace("+", "%20"))
  #else
    #set($spaceEscapedBackslash = $escapetool.url($space.replace('\', '\\').replace('.', '\.')).replace("+", "%20"))
  #end
  #if($visibleSpaces.contains($spaceEscapedBackslash) || $spaceParentList.contains($space))
    #set($contentDisplay = "")
    #set($folderIcon = "bullet_toggle_minus")
  #else
    #set($contentDisplay = " hierarchy-hidden")
    #set($folderIcon = "bullet_toggle_plus")
  #end
  #set($displayCurrentSpace = '')
  #if($spaceParentList.contains($space))
    #set($displayCurrentSpace = ' class="hierarchyCurrentSpacePageAction"')
  #end
  #set($addRemoveButton = "")
  #set($addRenameButton = "")
  #set($addRenameForm = "")
  #set($addSpanClass = "")
  #if($spaceInListInit &amp;&amp; $masterDoc.hasAccessLevel('edit'))
    #set($addRemoveButton = "[[image:icon:cross||title='Remove folder $spaceEscaped' data-space='$spaceEscaped' class='hierarchy-remove-folder']]")
  #end
  #if($spaceInListNested &amp;&amp; $masterDoc.hasAccessLevel('edit') &amp;&amp; $xwiki.hasAccessLevel('edit', "$spaceEscaped.$reservedDocumentName"))
    #set($addRenameForm = "{{html clean=false}}&lt;input type='hidden' id='renameFolder_old_$spaceEscaped' style='display:none;' value='$spaceEscaped'/&gt;&lt;input type='text' id='renameFolder_$spaceEscaped' style='display:none;'/&gt;{{/html}}")
    #set($addRenameButton = "[[image:icon:pencil||title='Rename folder $subspaceNameEscaped' data-subspace='$subspaceNameEscaped' data-space='$spaceEscaped' class='hierarchy-rename-folder']]")
  #end
  #if(($spaceInListNested || $spaceInListInit) &amp;&amp; $masterDoc.hasAccessLevel('edit'))
    #set($addSpanClass = '(% class="hierarchy-right" %)')
  #end
  #if($spaceInListNested)
    #set($xwql = "select doc.name from Document doc where doc.space=:space order by doc.name asc")
    #set($spacePageList = $services.query.xwql($xwql).bindValue('space', $space).execute())
  #else
    #set($spacePageList = [])
    #foreach($page in $pagesList)
      #set($document = $xwiki.getDocument($page))
      #if($space == $document.space)
        #set($discard = $spacePageList.add($document.name))
      #end
    #end
    #set($spacePageList = $sorttool.sort($spacePageList))
  #end
  $addStars* (% class="hierarchy-toggleFolder" data-space="$spaceEscapedBackslash" %)((([[image:icon:$folderIcon||id="hierarchyFolderIcon_$spaceEscapedBackslash"]][[image:icon:folder]] {{html clean=false}}&lt;span$!{displayCurrentSpace}&gt;&lt;span id="hierarchyDisplaySpace_$spaceEscaped"&gt;$subspaceName&lt;/span&gt; ($spacePageList.size())&lt;/span&gt; {{/html}})))$!addRenameForm $!addSpanClass$!addRenameButton$!addRemoveButton
  (% id="hierarchySpace_$spaceEscapedBackslash" class="hierarchy-list${contentDisplay}" %)
  #if($xwiki.hasAccessLevel('edit', "$spaceEscaped.$reservedDocumentName") &amp;&amp; $spaceInListNested) ## Check if the user can create a page in that space and if the space is in the folder list
    $addStars** image:icon:add {{html clean=false}}&lt;a href="#!XWebIDE" data-space="$spaceEscaped" class="newPage" data-toggle="modal" data-target="#hierarchyPageModal"&gt;Add new page&lt;/a&gt;{{/html}}
  #end
  #set($pageCount = 0)
  #foreach($page in $spacePageList)
    #set($pageEscaped = $escapetool.url($page).replace("+", "%20"))
    #if($nestedSpaces)
      #set($pageFullName = "${space}.${page.replace('\', '\\').replace('.', '\.')}")
      #set($pageEscapedBackslash = $escapetool.url($page).replace("+", "%20"))
    #else
      #set($pageFullName = "${space.replace('\', '\\').replace('.', '\.')}.${page.replace('\', '\\').replace('.', '\.')}")
      #set($pageEscapedBackslash = $escapetool.url($page.replace('\', '\\').replace('.', '\.')).replace("+", "%20"))
    #end
    #set($pageInPagesList = $pagesList.contains($pageFullName))
    #set($pageFullNameEscaped = $escapetool.url($pageFullName).replace("+", "%20"))
    #set($pageRawTitleEscaped = $escapetool.url($xwiki.getDocument($pageFullName).title).replace("+", "%20"))
    #set($pageClassHidden = " hierarchy-hidden")
    #set($iconBulletToggle = "bullet_toggle_plus")
    #if($visiblePages.contains($pageFullNameEscaped) || $pageFullName == $currentDoc.fullName)
      #set($pageClassHidden = "")
      #set($iconBulletToggle = "bullet_toggle_minus")
    #end
    #if($currentEditor == "view" &amp;&amp; "$!request.action" != "edit")
      #set($displayedIcon = 'page')
    #elseif($currentEditor == "object")
      #set($displayedIcon = 'application_edit')
    #elseif($currentEditor == "class")
      #set($displayedIcon = 'monitor_edit')
    #else
      #set($displayedIcon = 'page_edit')
    #end
    #if($pageFullName == $currentDoc.fullName)
      #set($pageName = "{{html clean=false}}&lt;span id='hierarchyDisplayPage_$pageFullNameEscaped' class='hierarchyCurrentSpacePageAction'&gt;$page&lt;/span&gt;{{/html}})))")
    #else
      #set($pageName = "{{html clean=false}}&lt;span id='hierarchyDisplayPage_$pageFullNameEscaped'&gt;$page&lt;/span&gt;{{/html}})))")
    #end
    #set($addSpanClass = "")
    #set($addRemoveButton = "")
    #set($addRenameButton = "")
    #set($addRenameForm = "")
    #if($pageInPagesList &amp;&amp; $masterDoc.hasAccessLevel('edit'))
      #set($addSpanClass = '(% class="hierarchy-right" %)')
      #set($addRemoveButton = "[[image:icon:cross||title='Remove page $pageFullNameEscaped' data-pageid='$pageFullNameEscaped' class='hierarchy-remove-page']]")
    #end
    #if($pageInPagesList &amp;&amp; $masterDoc.hasAccessLevel('edit') &amp;&amp; $currentDoc.hasAccessLevel('edit'))
      #set($addRenameForm = "{{html clean=false}}&lt;input type='text' id='renamePage_$pageFullNameEscaped' style='display:none;' value='$pageFullName'/&gt;{{/html}}")
      #set($addRenameButton = "[[image:icon:pencil||title='Rename page $pageFullNameEscaped' data-pageid='$pageFullNameEscaped' class='hierarchy-rename-page']]")
    #end
    #set($attachmentCount = $xwiki.getDocument($pageFullName).getAttachmentList().size())
    #if($xwiki.getDocument($pageFullName).hasAccessLevel('edit'))
      #set($pageCount = $pageCount + 1)
      #set($objectCount = $services.query.xwql("select count(obj.className) from BaseObject as obj, Document as doc where obj.name  = doc.fullName and doc.fullName = :pageFullName and doc.translation=0").bindValue('pageFullName', $pageFullName).execute()[0])
      #set($classCount = $xwiki.getClass($pageFullName).properties.size())
      $addStars** (% data-pageid="$spaceEscapedBackslash.$pageEscapedBackslash" class="hierarchy-displayPage" %)((([[image:icon:$iconBulletToggle||class="hierarchyDisplayPageIcon"]][[image:icon:$displayedIcon||class="hierarchyContextActionIcon"]]$pageName $!addRenameForm $!addSpanClass$!addRenameButton $!addRemoveButton
      (% id='hierarchyPageDetails_$spaceEscapedBackslash.$pageEscapedBackslash' class='hierarchy-list${pageClassHidden}' %)
      #if($currentEditor == "view" &amp;&amp; $pageFullName == $currentDoc.fullName)
        $addStars*** image:icon:page {{html clean=false}}&lt;span class='hierarchyCurrentSpacePageAction'&gt;View&lt;/span&gt;{{/html}}
      #else
        $addStars*** [[image:icon:page View&gt;&gt;path:$xwiki.getURL("$pageFullName", 'view')]]
      #end
      #if($currentEditor == "wiki" &amp;&amp; $pageFullName == $currentDoc.fullName)
        $addStars*** image:icon:page_edit {{html clean=false}}&lt;span class='hierarchyCurrentSpacePageAction'&gt;Edit (wiki) &lt;span id="hierarchyStar" class="hierarchy-hidden"&gt;*&lt;/span&gt;&lt;/span&gt;{{/html}}
      #elseif($currentEditor == "wiki" || $currentEditor == "view" || $currentEditor == "object")
        $addStars*** image:icon:page_edit {{html clean=false}}&lt;a href='#' data-space='$spaceEscaped' data-page='$pageEscaped' data-rawtitle="$pageRawTitleEscaped" class='editPage'&gt;Edit (wiki)&lt;/a&gt;{{/html}}
      #else
        $addStars*** [[image:icon:page_edit Edit (wiki)&gt;&gt;path:$xwiki.getURL($masterDoc.fullName, 'view')#!XWebIDE&amp;!!wiki&amp;!!$pageEscaped&amp;!!$spaceEscaped]]
      #end
      #if($currentEditor == "object" &amp;&amp; $pageFullName == $currentDoc.fullName)
        $addStars*** image:icon:application_edit {{html clean=false}}&lt;span class='hierarchyCurrentSpacePageAction'&gt;Objects ($objectCount)&lt;/span&gt;{{/html}}
      #elseif($currentEditor == "wiki" || $currentEditor == "view" || $currentEditor == "object")
        $addStars*** image:icon:application_edit {{html clean=false}}&lt;a href='#' data-space='$spaceEscaped' data-page='$pageEscaped' data-rawtitle="$pageRawTitleEscaped" class='editObject'&gt;Objects ($objectCount)&lt;/a&gt;{{/html}}
      #else
        $addStars*** [[image:icon:application_edit Objects ($objectCount)&gt;&gt;path:$xwiki.getURL($masterDoc.fullName, 'view')#!XWebIDE&amp;!!object&amp;!!$pageEscaped&amp;!!$spaceEscaped]]
      #end
      #if($currentEditor == "class" &amp;&amp; $pageFullName == $currentDoc.fullName)
        $addStars*** image:icon:monitor_edit {{html clean=false}}&lt;span class='hierarchyCurrentSpacePageAction'&gt;Class ($classCount)&lt;/span&gt;{{/html}}
      #else
        $addStars*** [[image:icon:monitor_edit Class ($classCount)&gt;&gt;path:$xwiki.getURL("$pageFullName", 'edit', 'editor=class')#!XWebIDE]]
      #end
      $addStars*** [[image:icon:attach Attachments ($attachmentCount)&gt;&gt;path:$xwiki.getURL("$pageFullName", 'view')#Attachments]]
    #elseif($xwiki.getDocument($pageFullName).hasAccessLevel('view'))
      #set($pageCount = $pageCount + 1)
      $addStars** (% data-pageid="$spaceEscapedBackslash.$pageEscapedBackslash" class="hierarchy-displayPage" %)((([[image:icon:$iconBulletToggle||class="hierarchyDisplayPageIcon"]][[image:icon:$displayedIcon||class="hierarchyContextActionIcon"]]$pageName $!addRemoveButton
      (% id='hierarchyPageDetails_$spaceEscapedBackslash.$pageEscapedBackslash' class='hierarchy-list${pageClassHidden}' %)
      #if($xcontext.action != "edit" &amp;&amp; "$!request.action" != "edit" &amp;&amp; $pageFullName == $currentDoc.fullName)
        $addStars*** image:icon:page {{html clean=false}}&lt;span class='hierarchyCurrentSpacePageAction'&gt;View&lt;/span&gt;{{/html}}
      #else
        $addStars*** [[image:icon:page View&gt;&gt;path:$xwiki.getURL("$pageFullName", 'view')]]
      #end
      $addStars*** [[image:icon:attach Attachments ($attachmentCount)&gt;&gt;path:$xwiki.getURL("$pageFullName", 'view')#Attachments]]
    #end
  #end
  #if($pageCount == 0 &amp;&amp; $spacePageList.size() != 0) ##Space not empty but user doesn't have the right to view any page
    $addStars** //Unauthorized//
  #elseif($pageCount == 0 &amp;&amp; $spacePageList.size() == 0)
    $addStars** //Empty//
  #end
#end
{{html clean=false}}&lt;input type="hidden" id="hierarchyDocTitle" value="$escapetool.url($currentDoc.title).replace("+", "%20")" /&gt;{{/html}}
)))

{{html}}
## Modal should not add #!XWebIDE when the macro is used in view mode (e.g. in the master page)
  &lt;div class="modal fade text-left hierarchy-hidden" id="hierarchyFolderModal" tabindex="-1" role="dialog" aria-hidden="true"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;Add New Folder&lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          Folder : &lt;input type="text" id="hierarchyNewFolderName" /&gt;
          &lt;button id="hierarchyAddFolder" class="btn btn-success"&gt;Add the folder&lt;/button&gt;&lt;br&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="modal fade text-left hierarchy-hidden" id="hierarchyPageModal" tabindex="-1" role="dialog" aria-hidden="true"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;Add New Page&lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          Folder : &lt;span id="hierarchyPageFolder"&gt;&lt;/span&gt;&lt;br /&gt;
          Page : &lt;input type="text" id="hierarchyNewPageName" /&gt;
          &lt;button id="hierarchyAddPage" class="btn btn-success"&gt;Add the page&lt;/button&gt;&lt;br&gt;
          &lt;p id="hierarchyPageModalError" class="hierarchy-hidden"&gt;&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="modal fade text-left hierarchy-hidden" id="hierarchyExistingPageModal" tabindex="-1" role="dialog" aria-hidden="true"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;Add Existing Page&lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          Page Full Name : &lt;input type="text" id="hierarchyExistingPageName" /&gt;
          &lt;button id="hierarchyAddExistingPage" class="btn btn-success"&gt;Add the page&lt;/button&gt;
          &lt;p id="hierarchyExistingPageModalError" class="hierarchy-hidden"&gt;&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="modal fade text-left hierarchy-hidden" id="hierarchyChangePageModal" tabindex="-1" role="dialog" aria-hidden="true"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;Unsaved content&lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          &lt;p&gt;
            You have unsaved content, do you want to continue? All unsaved modifications will be lost permanently&lt;br /&gt;
            &lt;button id="hierarchySaveAndContinueModal" class="btn btn-success"&gt;Save &amp; Continue&lt;/button&gt; &lt;button id="hierarchyDiscardAndContinueModal" class="btn btn-primary"&gt;Continue without saving&lt;/button&gt; &lt;button class="btn btn-default" data-dismiss="modal" type="button"&gt;Cancel&lt;/button&gt;
          &lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="modal fade text-left hierarchy-hidden" id="editorDeleteObjectModal" tabindex="-1" role="dialog" aria-hidden="true"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;Delete an object&lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          &lt;p&gt;
            Are you sure you want to delete that object &lt;span id="editorDeletedObjectModalInfo"&gt;&lt;/span&gt;&lt;br /&gt;
            &lt;button id="editorDeleteObjectConfirmed" class="btn btn-danger"&gt;Delete the object&lt;/button&gt; &lt;button class="btn btn-default" data-dismiss="modal" type="button"&gt;Cancel&lt;/button&gt;
          &lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="hierarchy-hidden"&gt;&lt;input type="hidden" id="hierarchyMasterDocName" value="$escapetool.url($masterDoc.name)" /&gt;&lt;input type="hidden" id="hierarchyMasterDocSpace" value="$escapetool.url($masterDoc.space)" /&gt;&lt;input type="hidden" id="hierarchyNextDocName" value="$escapetool.url($currentDoc.name)" /&gt;&lt;input type="hidden" id="hierarchyNextDocSpace" value="$escapetool.url($currentDoc.space)" /&gt;&lt;input type="hidden" id="xwikiVersion" value="$xwiki.version" /&gt;&lt;/div&gt;

&lt;div id="backgroundModalNoBootstrap"&gt;&lt;/div&gt;

{{/html}}

{{/velocity}}</content>
</xwikidoc>
