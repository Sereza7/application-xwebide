<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
-->

<xwikidoc reference="WebIDECode.ApplicationHierarchy" locale="">
  <web>WebIDECode</web>
  <name>ApplicationHierarchy</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <parent>WebIDECode.ApplicationClass</parent>
  <creator>xwiki:XWiki.Admin</creator>
  <author>xwiki:XWiki.Admin</author>
  <customClass/>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <creationDate>1434704312000</creationDate>
  <date>1446114284000</date>
  <contentUpdateDate>1446114284000</contentUpdateDate>
  <version>1.1</version>
  <title>ApplicationHierarchy</title>
  <defaultTemplate/>
  <validationScript/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>true</hidden>
  <object>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WebIDECode.ApplicationHierarchy</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>95d6ad85-599f-40f3-b936-d2312fb7a8df</guid>
    <property>
      <cache>forbid</cache>
    </property>
    <property>
      <code>require(['jquery', 'xwiki-meta'], function ($, xm) {

$(function(){

  /*
   * STRUCTURE:
   ** Variables
   ** WebIDE initialization
   ** Hierarchy initialization
   ** Wiki Editor API (load/save)
   ** Object Editor API (load/save)
   ** Commons API
   *** Project browsing tools
   *** Common setters/getters
   *** Title tools
   *** Tabs tools
   *** CodeMirror editor tools
   *** Modals tools
   *** Nested Spaces tools
   ** Hierarchy API (add/remove content)
   ** Other
   */

  //-------------------------------------
  //------------ Variables --------------
  //-------------------------------------

  // currentPage and currentSpace are used in REST queries
  var currentPage;
  var currentSpace;
  var currentObject;
  var currentNumber;
  var currentLocale = 'default';
  // currentPageEscaped and currentSpaceEscaped are used in ajax queries with XWiki pages
  var currentPageEscaped;
  var currentSpaceEscaped;
  var currentObjectEscaped;
  setCurrentPage(getDocumentReferenceData('page'));
  setCurrentSpace(getDocumentReferenceData('space'));
  setDocumentReferenceData();
  var masterSpace = getDocumentReferenceData('space');
  var masterPage = getDocumentReferenceData('page');
  var currentTree = getCookieHierarchy('currentTree') || 'logical';
  var currentEditor = (XWiki.editor == 'class') ? XWiki.editor : 'view';
  var syntaxHighlightingState = function() {return ($('#syntaxHState').val() === 'new') ? true : (typeof(CodeMirror) !== 'undefined')};
  var syntaxHighlighting = ($('#syntaxHState').val() === 'new' || $('#syntaxHState').val() === 'old') ? true : false;
  if($('#syntaxHState').val() === 'old') {
    initCodeMirrorInternals();
  }
  var savedContent = [];
  var saving = false;
  var loading = false;
  var nextTabToClose = null;
  var tabNumber = 0;
  var saveAllList = [];
  var savedAll = -1;
  var savedAllError = [];
  var insertTags = function(){return true}; // Prevent issues with Syntax Highligthing extension
  var bootstrap = function() { // Determine if bootstrap is enabled or not for modals
    return (typeof($.fn.modal) !== 'undefined');
  }
  var NESTED_SPACES = checkNestedSpaces();
  var TAB_MAIN_CONTAINER = '#contentMainBlock';
  var TITLE_INPUT = '#xwikidoctitleinput';
  var TITLE_VIEW = '#editorObjectTitle';
  var visibleSpaces = getCookieHierarchy('visibleSpaces').split(',');
  var visiblePages = getCookieHierarchy('visiblePages').split(',');
  var visibleCategory = getCookieHierarchy('visibleCategory').split(',');
  if(XWiki.webapppath.substr(0,1) === '/') {
    XWiki.webapppath = XWiki.webapppath.substr(1,(XWiki.webapppath.length-1));
  }
  // Get the "get" and "view" url structure for ajax queries
  var wikiGetURL = '/'+XWiki.webapppath+''+XWiki.servletpath+'get/';
  if(window.docgeturl.indexOf('/get/') &gt;= 0) {
    wikiGetURL = window.docgeturl.substring(0,window.docgeturl.indexOf('/get/')+5);
  }
  var wikiViewURL = '/'+XWiki.webapppath+''+XWiki.servletpath+'view/';
  if(window.docviewurl.indexOf('/'+XWiki.currentSpace+'/') &gt;= 0) {
    wikiViewURL = window.docviewurl.substring(0,window.docviewurl.indexOf('/'+XWiki.currentSpace+'/')+1);
  }
  // Change current editor and page if there is a hash
  var hashURL = window.location.hash.substring(1).split('&amp;!!');
  if(hashURL.size() == 6){
    currentEditor = hashURL[1];
    currentTree = hashURL[2];
    setCurrentPage(decodeURIComponent(hashURL[3]));
    setCurrentSpace(decodeURIComponent(hashURL[4]));
    currentLocale = hashURL[5]
    setCurrentObject(null);
    setCurrentNumber(null);
    window.location.hash = '';
  }
  else if(hashURL.size() == 8){
    currentEditor = hashURL[1];
    currentTree = hashURL[2];
    setCurrentPage(decodeURIComponent(hashURL[3]));
    setCurrentSpace(decodeURIComponent(hashURL[4]));
    currentLocale = hashURL[5]
    setCurrentObject(decodeURIComponent(hashURL[6]));
    setCurrentNumber(hashURL[7]);
    window.location.hash = '';
  }

  //-------------------------------------
  //------- WebIDE initialization -------
  //-------------------------------------

  // Initialize the hierarchy menu events
  hierarchyInitialization();
  initializeModals();
  // Initialize the first editor to display
  if(currentEditor == "wiki") {
    goToNewPage('wiki', currentPage, currentSpace, null, null, currentLocale);
  }
  else if(currentEditor == "view") {
    initViewEditor();
    setActiveTab('view', currentPage, currentSpace);
  }
  else if(currentEditor == "object") {
    goToNewPage('object', currentPage, currentSpace, currentObject, currentNumber, currentLocale);
  }
  else if(currentEditor == 'class') {
    setActiveTab('class', currentPage, currentSpace);
  }
  // Improve the F5 shortcut to stay on the current editor and the current page
  if(currentEditor !== 'class') {
    shortcut.add("F5", function() {
      var addCurrentObject = '';
      if(getCurrentObject(false)) {
        addCurrentObject = '&amp;!!'+getCurrentObject(false)+'&amp;!!'+currentNumber;
      }
      window.location = window.docviewurl+'#!XWebIDE&amp;!!'+currentEditor+'&amp;!!'+currentTree+'&amp;!!'+encodeURIComponent(getCurrentPage(false))+'&amp;!!'+encodeURIComponent(getCurrentSpace(false))+'&amp;!!'+currentLocale+addCurrentObject;
      location.reload();
    });
  }

  // Display a warning message when the user try to close/reload the tab/window and he has unsaved content
  window.onbeforeunload = function() {
    var unsaved = false;
    $('.editorTabButton').each(function(index, elt) {
      var tabNumberId = $(elt).attr('data-tabnumber');
      if(savedContent[tabNumberId] != getCurrentContent(tabNumberId)) {
        unsaved = true;
      }
    });
    if(unsaved) {
      return "You have unsaved content! Are you sure you want to close the page?";
    }
  };

  // Change CodeMirror default parameters when an instance of the editor is created
  $('body').on('DOMNodeInserted', function(e) {
    if ($(e.target).is('.CodeMirror')) {
      window.setTimeout(function() {
        var cmInstance = $(e.target)[0].CodeMirror;
        cmInstance.setOption('lineWrapping', true);
        var parentTab = $(e.target).closest('.editorTab');
        if(parentTab.hasClass('editorWikiTab')) {$(e.target).addClass('editorWikiCodeMirror');}
        else if(parentTab.hasClass('editorObjectTab')) {$(e.target).addClass('editorObjectCodeMirror');}
      }, 50);
    }
  });

  // Add the click events for the buttons to hide or show the hierarchy
  $('#hierarchyClose').click(function(e){
    $('#hierarchyContent').hide();
    $('#hierarchyOpenBlock').show();
    $('#hierarchyCloseBlock').hide();
    $("#hierarchyBlock").css({
      "min-width": "0px",
      "width": "42px"
    });
  });
  $('#hierarchyOpenBlock').click(function(e){
    $('#hierarchyOpenBlock').hide();
    $('#hierarchyCloseBlock').show();
    $('#hierarchyContent').show();
    $("#hierarchyBlock").css({
      "minWidth": "250px",
      "width": "auto"
    });
  });
  $('#hierarchyRefresh').on('click', reloadHierarchy);
  $('#hierarchyChangeTree').on('click', changeTreeView);

  // Save or discard the content when a tab is closed ? :
  $('#hierarchySaveAndCloseModal, #hierarchyDiscardAndCloseModal').click(function(e){
    e.preventDefault();
    if(!saving &amp;&amp; !loading &amp;&amp; nextTabToClose) {
      var closedTab = nextTabToClose;
      var tabNumberId = $(closedTab).attr('data-tabnumber');
      var tabElement = $('.editorTab[data-tabnumber="'+tabNumberId+'"]');;
      $('body').removeClass('modal-open');
      if(bootstrap()) {
        $('#hierarchyCloseTabModal').modal('hide');
      }
      else {
        closeModalNoBootstrap();
      }
      var file = decodeURIComponent($(closedTab).attr('data-page'));
      var folder = decodeURIComponent($(closedTab).attr('data-space'));
      var locale = $(closedTab).attr('data-locale');
      var objName = null;
      var objNumber = null;
      if($(closedTab).attr('data-object')) {
        objName = decodeURIComponent($(closedTab).attr('data-object'));
        objNumber = decodeURIComponent($(closedTab).attr('data-objectnumber'));
      }
      var rawTitle = $('input[data-space="'+encodeURIComponent(folder)+'"][data-page="'+encodeURIComponent(file)+'"]').val();
      // Determine the editor used in the selected tab
      var selectedTabEditor = 'object';
      if($(tabElement).hasClass('editorWikiTab')) {
        selectedTabEditor = 'wiki';
      }
      if(selectedTabEditor === "wiki") {
        if($(this).attr('id') === 'hierarchySaveAndCloseModal') {
          savePage(folder, file, locale, false, true, false);
        }
        removeTab(closedTab, tabNumberId);
      }
      else if (selectedTabEditor === "object") {
        if($(this).attr('id') === 'hierarchySaveAndCloseModal') {
          saveObjects(folder, file, objName, objNumber, true, true, false);
        }
        removeTab(closedTab, tabNumberId);
      }
    }
  });

  //-------------------------------------
  //----- Hierarchy Initialization ------
  //-------------------------------------

  // Contains all events that have to be registered again each time the hierarchy is updated (mostly "click" events on elements in the hierarchy)
  function hierarchyInitialization() {
    // Display or hide the content of a folder by clicking on its name
    $('.hierarchy-toggleFolder').click(function(){
      var spaceToggle = $(this).attr('data-space');
      $(document.getElementById('hierarchySpace_'+spaceToggle)).toggle();
      var indexSpace = $.inArray(spaceToggle, visibleSpaces);
      if($(document.getElementById('hierarchySpace_'+spaceToggle)).is(':hidden')) {
        if(indexSpace &gt;= 0) {
          visibleSpaces.splice(indexSpace, 1);
        }
        $(document.getElementById('hierarchyFolderIcon_'+spaceToggle)).find('span').attr('class', 'fa fa-caret-right');
      }
      else {
        if(indexSpace &lt; 0) {
          visibleSpaces.push(spaceToggle);
        }
        $(document.getElementById('hierarchyFolderIcon_'+spaceToggle)).find('span').attr('class', 'fa fa-caret-down');
      }
      setCookieHierarchy('visibleSpaces', visibleSpaces, 365);
    });
    // Display or hide the details of a page by clicking on its name
    $('.hierarchy-displayPage').click(function(){
      var pageToggle = $(this).attr('data-pageid');
      $(document.getElementById('hierarchyPageDetails_'+pageToggle)).toggle();
      var indexPage = $.inArray(pageToggle, visiblePages);
      if($(document.getElementById('hierarchyPageDetails_'+pageToggle)).is(':hidden')) {
        if(indexPage &gt;= 0) {
          visiblePages.splice(indexPage, 1);
        }
        $(this).find('.hierarchyDisplayPageIcon &gt; span').attr('class', 'fa fa-caret-right');
      }
      else {
        if(indexPage &lt; 0) {
          visiblePages.push(pageToggle);
        }
        $(this).find('.hierarchyDisplayPageIcon &gt; span').attr('class', 'fa fa-caret-down');
      }
      setCookieHierarchy('visiblePages', visiblePages, 365);
    });
    $('.hierarchy-toggleCategory').click(function(){
      var category = $(this).attr('data-category');
      $(document.getElementById('hierarchyCategory_'+category)).toggle();
      var indexCategory = $.inArray(category, visibleCategory);
      if($(document.getElementById('hierarchyCategory_'+category)).is(':hidden')) {
        if(indexCategory &gt;= 0) {
          visibleCategory.splice(indexCategory, 1);
        }
        $(this).find('.hierarchyDisplayPageIcon &gt; span').attr('class', 'fa fa-caret-right');
      }
      else {
        if(indexCategory &lt; 0) {
          visibleCategory.push(category);
        }
        $(this).find('.hierarchyDisplayPageIcon &gt; span').attr('class', 'fa fa-caret-down');
      }
      setCookieHierarchy('visibleCategory', visibleCategory, 365);
    });

    // Add a page (if no bootstrap) / Change the folder to use when adding a new page
    $('.newPage').click(function(e){
      e.preventDefault();
      var modal = true;
      $('#hierarchyAddPageTypeBlock').hide();
      $('#hierarchyAddPageLocaleBlock').hide();
      $('#hierarchyNewPageName').attr('disabled', false);
      $('#hierarchyPageFolder').attr('disabled', false);
      var folder = $(this).attr('data-space') || '';
      var file = $(this).attr('data-page') || '';
      file = encodeURIComponent(file);

      $('#hierarchyPageFolder').val(folder);
      $('#hierarchyNewPageName').val(file);

      if($(this).hasClass('newClass')) {
        $('#hierarchyAddPageTitle').html('Add new class');
        $('#hierarchyAddPageLabel').html('Class name');
        $('#hierarchyAddPage').attr('data-type', 'class');
      }
      else if($(this).hasClass('newSheet')) {
        addPage(folder, file, 'sheet');
        modal = false;
      }
      else if($(this).hasClass('newTemplate')) {
        addPage(folder, file, 'template');
        modal = false;
      }
      else if($(this).hasClass('newLanguage')) {
        $('#hierarchyAddPageTitle').html('Add new language');
        $('#hierarchyAddPageLabel').html('Page');
        $('#hierarchyAddPage').attr('data-type', 'language');
        $('#hierarchyNewPageName').attr('disabled', true);
        $('#hierarchyPageFolder').attr('disabled', true);
        $('#hierarchyAddPageLocaleBlock').show();
      }
      else {
        // If there are classes in the project, ask for item or content page
        if($('#hierarchyUpdatedClassList').length &amp;&amp; !$('#hierarchyUpdatedClassList').is(':empty')) {
          $('#hierarchyAddPageTypeBlock').show();
        }
        $('#hierarchyAddPageTitle').html('Add new page');
        $('#hierarchyAddPageLabel').html('Page name');
        $('#hierarchyAddPage').attr('data-type', 'page');
      }
      if(!bootstrap() &amp;&amp; modal) {
        openModalNoBootstrap('#hierarchyPageModal');
        addPageShortcut();
      }
    });
    // Add a folder (if no bootstrap)
    $('.newFolder').click(function(e){
      e.preventDefault();
      if(!bootstrap()) {
        openModalNoBootstrap('#hierarchyFolderModal');
        addFolderShortcut();
      }
    });
    // Add an existing page (if no bootstrap)
    $('.newExistingPage').click(function(e){
      e.preventDefault();
      if(!bootstrap()) {
        openModalNoBootstrap('#hierarchyExistingPageModal');
        addExistingPageShortcut();
      }
    });
    // Add an existing page (if no bootstrap)
    $('.newLocalObject, .newGlobalObject').click(function(e){
      e.preventDefault();
      var modal = true;
      var folder = $(this).attr('data-space') || '';
      var file = $(this).attr('data-page') || '';
      file = encodeURIComponent(file);
      $('#hierarchyObjectSpace').html(folder);
      $('#hierarchyObjectPageInputDefault').val('');
      $('#hierarchyObjectPageInput').val('');
      $('#hierarchyObjectPage').html('');
      var objType = 'JS';
      var objScope = 'local';

      if($(this).hasClass('newJSObject')) {
        $('#hierarchyObjectClassName').val('XWiki.JavaScriptExtension');
      }
      else if($(this).hasClass('newCSSObject')) {
        objType = 'CSS';
        $('#hierarchyObjectClassName').val('XWiki.StyleSheetExtension');
      }
      else if($(this).hasClass('newMacroObject')) {
        objType = 'Macro';
        $('#hierarchyObjectClassName').val('XWiki.WikiMacroClass');
      }
      else if($(this).hasClass('newTranslationObject')) {
        objType = 'Translation';
        $('#hierarchyObjectClassName').val('XWiki.TranslationDocumentClass');
      }

      if($(this).hasClass('newGlobalObject')) {
        objScope = 'global';
        $('#hierarchyObjectPageInput').val(file);
        $('#hierarchyObjectPageInputDefault').val(file);
        $('#hierarchyObjectPageBlock').hide();
        $('#hierarchyObjectPageInputBlock').show();
      }
      else if($(this).hasClass('newLocalObject')) {
        // Add the object without modal
        var className = $('#hierarchyObjectClassName').val();
        addObject(null, className, true, folder, file, false, true);
        modal = false;
      }
      $('#hierarchyAddObject').html('Add '+objScope+' '+objType);
      if(!bootstrap()) {
        openModalNoBootstrap('#hierarchyObjectModal');
        addObjectShortcut();
      }
    });

    $('#hierarchyAddNewElement').click(function(e) {
      e.preventDefault();
      $('#hierarchyElementToAdd').toggle();
    });
    $('#hierarchyElementToAdd').on('mouseenter', function() {
      $(this).on('mouseleave', function() {
        $(this).hide();
        $(this).unbind('mouseleave');
      });
    });

    // Remove a folder by clicking on the cross
    $('.hierarchy-remove-folder').click(function(){
      removeFolder(decodeURI($(this).attr('data-space')));
    });
    // Remove a page by clicking on the cross
    $('.hierarchy-remove-page').click(function(){
      removePage(decodeURI($(this).attr('data-pageid')));
    });
    // Rename a folder by clicking on the pencil
    $('.hierarchy-rename-folder').click(function(){
      var selector = document.getElementById('renameFolder_'+$(this).attr('data-space'));
      var selector2 = document.getElementById('hierarchyDisplaySpace_'+$(this).attr('data-space'));
      $(selector).show();
      $(selector).val(decodeURIComponent($(this).attr('data-subspace')));
      var renameFrom = $(this).attr('data-space');
      $(selector2).parent().hide();
      $(selector).focus();
      $(selector).focusout(function() {
        $(selector).hide();
        $(selector).val(renameFrom);
        $(selector2).parent().show();
        shortcut.remove("Esc");
        shortcut.remove("Enter");
      });
      shortcut.add("Esc", function() {
        $(selector).hide();
        $(selector).val(renameFrom);
        $(selector2).parent().show();
        shortcut.remove("Esc");
        shortcut.remove("Enter");
      });
      shortcut.add("Enter", function() {
        var renameTo = $(selector).val();
        renameHierarchyElement('space', renameFrom, renameTo);
        shortcut.remove("Esc");
        shortcut.remove("Enter");
      });
    });
    // Rename a page by clicking on the pencil
    $('.hierarchy-rename-page').click(function(){
      var selector = document.getElementById('renamePage_'+$(this).attr('data-pageid'));
      var selector2 = document.getElementById('hierarchyDisplayPage_'+$(this).attr('data-pageid'));
      var updatePageList = $(selector).attr('data-pageinlist');
      $(selector).show();
      $(selector).val(decodeURIComponent($(this).attr('data-pageid')));
      var renameFrom = $(selector).val();
      $(selector2).hide();
      $(selector).focus();
      $(selector).focusout(function() {
        $(selector).hide();
        $(selector).val(renameFrom);
        $(selector2).show();
        shortcut.remove("Esc");
        shortcut.remove("Enter");
      });
      shortcut.add("Esc", function() {
        $(selector).hide();
        $(selector).val(renameFrom);
        $(selector2).show();
        shortcut.remove("Esc");
        shortcut.remove("Enter");
      });
      shortcut.add("Enter", function() {
        var renameTo = $(selector).val();
        renameHierarchyElement('page', renameFrom, renameTo, updatePageList);
        shortcut.remove("Esc");
        shortcut.remove("Enter");
      });
    });
    $(".hierarchy-right").css({
      "backgroundColor" : $("#hierarchyBlock").css('backgroundColor')
    });
    // User wants to edit a new page
    $('.editPage').click(function(e){
      e.preventDefault();
      if(!saving &amp;&amp; !loading) {
        var folder = $(this).attr('data-space');
        var file = $(this).attr('data-page');
        var locale = $(this).attr('data-locale') || 'default';
        goToNewPage('wiki', file, folder, null, null, locale);
      }
    });
    $('.editObject').click(function(e){
      e.preventDefault();
      if(!saving &amp;&amp; !loading) {
        var folder = $(this).attr('data-space');
        var file = $(this).attr('data-page');
        var objectSelected = null;
        var objectNumber = null;
        if($(this).attr('data-object') &amp;&amp; $(this).attr('data-objectnumber')) {
          objectSelected = $(this).attr('data-object');
          objectNumber = $(this).attr('data-objectnumber');
        }
        goToNewPage('object', file, folder, objectSelected, objectNumber, 'default');
      }
    });
    // Reset page name and folder name in modals
    $('#hierarchyNewPageName').val('');
    $('#hierarchyNewFolderName').val('');
  }

  //-------------------------------------
  //---------- Wiki Editor API ----------
  //-------------------------------------
  /**
   * loadPage()
   * savePage(string space, string page, boolean changeSavedContent, boolean continueEditing)
   * cancelAndViewIDE()
   */
  function loadPage() {
    if(!loading &amp;&amp; currentEditor === 'wiki') {
      setLoadingState(true);
      var urlSpaces = getCurrentSpace(false, true);
      var urlPage = getCurrentPage(false);
      var locale = (currentLocale &amp;&amp; currentLocale !== '') ? currentLocale : 'default';
      $.ajax({
        url: wikiViewURL+urlSpaces+"/"+urlPage+"?xpage=plain&amp;raw=2&amp;language="+locale,
        type: "GET",
        contentType: "plain/text",
      }).success(function(dataContent){
        var tabId = getTabId('wiki', getCurrentSpace(false), getCurrentPage(false), null, null, locale);
        var jQueryTabId = '#'+tabId;
        var tabNumberId = getTabNumber(jQueryTabId);
        $(jQueryTabId+' &gt; .editorWikiTabContent &gt; textarea').val(dataContent);
        if(syntaxHighlighting) {
          // Add the CodeMirror editor
          initCodeMirrorsCustom('wiki', tabId);
        }
        setSavedContent(tabNumberId);
        setLoadingState(false, 'Loaded', 2500);
      });
    }
  }

  function savePage(space, page, locale, changeSavedContent, continueEditing, saveAll) {
    if(!saving || saveAll) {
      if(!saveAll) {
        setSavingState(true);
      }
      var restSpaces = getRestSpacesString(space);
      var restLocale = (locale === 'default' || locale === '') ? '' : '/translations/'+locale;
      var jQueryTabId = '#'+getTabId('wiki', space, page, null, null, locale);
      var tabNumberId = getTabNumber(jQueryTabId);
      if(space === getCurrentSpace(false) &amp;&amp; page === getCurrentPage(false) &amp;&amp; currentEditor === 'wiki') {
        $('input[data-space="'+encodeURIComponent(getCurrentSpace(false))+'"][data-page="'+encodeURIComponent(getCurrentPage(false))+'"].editorHiddenTitle').val(getCurrentTitle());
      }
      var fileTitle = $('input[data-space="'+encodeURIComponent(space)+'"][data-page="'+encodeURIComponent(page)+'"]').val();
      var fileContent = getCurrentContent(tabNumberId);
      $.ajax({
        url: "/"+XWiki.webapppath+"rest/wikis/"+getDocumentReferenceData('wiki')+"/"+restSpaces+"/pages/"+page+restLocale,
        type: "PUT",
        contentType: "application/x-www-form-urlencoded",
        accept: "application/xml",
        data: "title="+encodeURIComponent(fileTitle)+"&amp;content="+encodeURIComponent(fileContent),
      }).error(function(xhr, errorStatus){
        if(!saveAll) {
          setSavingState(false, xhr.statusText, 4000, 'red');
          return false;
        }
        else {
          continueSaveAll(false, xhr, space, page);
        }
      }).success(function(data){
        if(changeSavedContent) {
          setSavedContent(tabNumberId);
        }
        setStar(false, tabNumberId);
        if(!saveAll) {
          setSavingState(false, 'Saved', 2500);
          if(continueEditing) return true;
          else window.location.href = wikiViewURL+space+'/'+page;
        }
        else {
          continueSaveAll(true);
        }
      });
    }
  }

  function cancelAndViewIDE() {
    if(currentEditor == 'wiki' &amp;&amp; savedContent != getCurrentContent()) {
      if(confirm("Are you sure?")) {
        window.location.href = wikiViewURL+currentSpace+'/'+currentPage;
      }
    }
    else {
      window.location.href = wikiViewURL+currentSpace+'/'+currentPage;
    }
  }

  //-------------------------------------
  //--------- Object Editor API ---------
  //-------------------------------------
  /**
   * loadObject()
   * startDisplayObjects(dataContent, urlSpaces, file)
   * loadObjectsDetails(objectsList, index, objectsListSize, oldClass, menuNode, dataNode)
   * endDisplayObjects(objectsListSize)
   * addObject(String className)
   * initObjects()
   * removeObject(String className, Int number)
   * saveObjects(boolean continueEdit)
   */

  /**
   * Get the list of object in the current page
   */
  function loadObject() {
    if(!loading &amp;&amp; currentEditor === 'object') {
      setLoadingState(true);
      var selectedObjectURL = '';
      if(getCurrentObject(false) &amp;&amp; getCurrentObject(false) !== 'XWiki.WikiMacroClass') {
        selectedObjectURL = '/'+getCurrentObject(false)+'/'+currentNumber;
      }
      var restSpaces = getCurrentSpace(false, false, true);
      $.ajax({
        url: '/'+XWiki.webapppath+'rest/wikis/'+getDocumentReferenceData('wiki')+'/'+restSpaces+'/pages/'+getCurrentPage(false)+'/objects'+selectedObjectURL,
        type: "GET",
        contentType: "application/xml",
      }).success(function(dataContent){
        var tabId = getTabId('object', getCurrentSpace(false), getCurrentPage(false), getCurrentObject(false), currentNumber, 'default');
        var jQueryTabId = '#'+tabId;
        // Creation of the list of objects in the page
        if(!getCurrentObject(false) || getCurrentObject(false) == 'XWiki.WikiMacroClass') {
          if(!getCurrentObject(false)) {
            var objectsList = $(dataContent).find('objectSummary');
          }
          else {
            var objectsList = $(dataContent).find('objectSummary').filter(function(i, elmt) {
              return ($(elmt).find('className').text() === 'XWiki.WikiMacroClass' || $(elmt).find('className').text() === 'XWiki.WikiMacroParameterClass');
            });
          }
          objectsList.sort(function(a, b){
            if($(a).find('className').text()&gt;$(b).find('className').text()) return 1;
            else if($(a).find('className').text()&lt;$(b).find('className').text()) return -1;
            else return (parseInt($(a).find('number').text())-parseInt($(b).find('number').text()));
          });
        }
        else {
          var objectsList = $(dataContent).find('object');
        }
        startDisplayObjects(jQueryTabId, objectsList);
      });
    }
  }

  /**
   * Start the loading of the object editor. Create the main DOM elements and call the function to continue the loading process.
   * @input String jQueryTabId : id of the div where to put the data
   * @input List objectsList : list of objects to display from XWiki Rest API
   */
  function startDisplayObjects(jQueryTabId, objectsList) {
    var form_token = getDocumentReferenceData('form_token');
    var currentTabNumber = getTabNumber(jQueryTabId);
    var urlSpaces = getCurrentSpace(false, true);
    var file = getCurrentPage(false);
    var objectsListSize = objectsList.size();
    $(jQueryTabId).html('');
    var menuNode = null;
    var addObjectNode = null;
    // Creation of the page structure
    if(!getCurrentObject(false)) {
      menuNode = $('&lt;div id="tab'+currentTabNumber+'_editorObjectMenuContent" class="editorObjectMenuContent"&gt;&lt;/div&gt;').appendTo($('&lt;div id="tab'+currentTabNumber+'_editorObjectMenu" class="editorObjectMenu"&gt;&lt;span id="tab'+currentTabNumber+'_editorObjectMenuTitle" class="editorObjectMenuTitle"&gt;Quick Access&lt;/span&gt;&lt;/div&gt;').appendTo($(jQueryTabId)));
      addObjectNode = $('&lt;div id="tab'+currentTabNumber+'_addObjectBlock" class="addObjectBlock"&gt;&lt;/div&gt;').appendTo($(jQueryTabId));
    }
    var dataNode = $('&lt;form method="post" action="/'+XWiki.webapppath+''+XWiki.servletpath+'save/'+urlSpaces+'/'+file+'" id="tab'+currentTabNumber+'_objectIDEform" class="objectIDEform"&gt;&lt;input type="hidden" name="form_token" value="'+form_token+'" /&gt;&lt;/form&gt;').appendTo($(jQueryTabId));
    if(getCurrentObject(false)) {
      $(dataNode).append('&lt;input type="button" class="btn btn-default editorDisplayAdvancedFields" value="Advanced fields" /&gt;');
      menuNode = $('&lt;div class="editorOtherFieldsBlock"&gt;&lt;/div&gt;').appendTo(dataNode);
      if(getCurrentObject(false) === 'XWiki.WikiMacroClass') {
        $('&lt;input type="hidden" id="tab'+currentTabNumber+'_addClassList" value="XWiki.WikiMacroParameterClass" /&gt;&lt;button class="btn btn-success" id="tab'+currentTabNumber+'_editorObjectAddButton"&gt;Add a parameter&lt;/button&gt;&lt;br&gt;').appendTo(menuNode);
      }
      loadObjectsDetails(jQueryTabId, objectsList, 0, objectsListSize, '', menuNode, dataNode, null);
    }
    else {
      // Add the list which propose the user to add an object from a selected class
      var url = wikiViewURL+"WebIDECode/ApplicationObjects?xpage=plain&amp;allClasses=1";
      $.ajax({
        url: url,
        type: "GET",
        contentType: "plain/text",
      }).success(function(dataContent){
        var dataContentTmp = $('&lt;div/&gt;').html(dataContent);
        var tabAdd = 'tab'+currentTabNumber+'_';
        fixIds(dataContentTmp, tabAdd);
        addObjectNode.html(dataContentTmp.html());
        // loadObjectsDetails : Add details recursively for each object and call the finalizing function
        loadObjectsDetails(jQueryTabId, objectsList, 0, objectsListSize, '', menuNode, dataNode, null);
      });
    }
  }


  /**
   * Load details for each object recursively and display them in the page.
   * Call the finilazing function at the end
   * @input String jQueryTabId : id of the div where to put the data
   * @input List objectsList : the list of objects in the page
   * @input Int index : the object to display in the list
   * @input Int objectsListSize : the objects list size
   * @input String oldClass : the class of the previous object displayed
   * @input DOMElements menuNode, dataNode : The element in which object details have to be added
   */
  function loadObjectsDetails(jQueryTabId, objectsList, index, objectsListSize, oldClass, menuNode, dataNode, currentClassNode) {
    if(objectsListSize == 0) {endDisplayObjects(jQueryTabId, objectsListSize);}
    else {
      var currentTabNumber = getTabNumber(jQueryTabId);
      var className = $(objectsList[index]).find('className').text();
      var number = $(objectsList[index]).find('number').text();
      if(className != oldClass &amp;&amp; !getCurrentObject(false)) {
        dataNode.append('&lt;h2 class="wikigeneratedheader editorObjectClassTitle" data-classname="'+className+'"&gt;'+className+'&lt;/h2&gt;');
        var currentClassNode = $('&lt;div id="tab'+currentTabNumber+'_editorObjects-'+className+'" class="editorObjectClassDetails"&gt;&lt;/div&gt;').appendTo(dataNode);
      }
      else {
        var currentClassNode = dataNode;
      }
      var isSelectedObject = '';
      if(getCurrentObject(false)) {
        isSelectedObject = '&amp;selectedObject';
      }
      var url = wikiViewURL+"WebIDECode/ApplicationObjects?xpage=plain&amp;docFullName="+getCurrentSpace(true)+'.'+getCurrentPage(true)+'&amp;className='+className+'&amp;number='+number+isSelectedObject;
      $.ajax({
        url: url,
        type: "GET",
        contentType: "plain/text",
      }).success(function(dataContent){
        var dataContentTmp = $('&lt;div/&gt;').html(dataContent);
        var tabAdd = 'tab'+currentTabNumber+'_';
        fixIds(dataContentTmp, tabAdd);
        dataContent = dataContentTmp.html();
        if(getCurrentObject(false)) {
          $(menuNode).append(dataContent);
          var currentMainBlock = $('&lt;div class="editorDisplayedObject"&gt;&lt;/div&gt;').appendTo(currentClassNode);
          $(menuNode).find('.editorCodeField').detach().appendTo(currentMainBlock);
        }
        else {
          var anchor = $('&lt;div /&gt;').append(dataContent).find('h4').attr('id');
          menuNode.append('&lt;a href="#'+anchor+'" class="editorObjectMenuLink" data-classname="'+className+'" data-number="'+number+'"&gt;'+className+' - '+number+'&lt;/a&gt;&lt;br&gt;');
          currentClassNode.append('&lt;div class="editorDisplayedObject"&gt;'+dataContent+'&lt;/div&gt;');
        }
      }).error(function(xhr) {
        currentClassNode.append('Error while loading object '+className+' '+number+' : '+xhr.statusText+'&lt;br&gt;');
      }).complete(function(xhr) {
        index++;
        if(index &lt; objectsListSize) {loadObjectsDetails(jQueryTabId, objectsList, index, objectsListSize, className, menuNode, dataNode, currentClassNode);}
        else {endDisplayObjects(jQueryTabId, objectsListSize);}
      });
    }
  }

  /**
   * Complete the loading of object editor
   * @input String jQueryTabId : id of the div where to put the data
   * @input number of objects in the page
   */
  function endDisplayObjects(jQueryTabId, objectsListSize) {
    // Initialize the events (click on link/buttons) for all the objects
    initObjects(true, jQueryTabId);
    // Objects should be hidden if there are more than 2
    if(objectsListSize &lt; 3) {$('.editorObjectDetails').show();}
    // Start the code mirror instances for objects with a textarea field
    if(syntaxHighlighting) {initCodeMirrorsCustom('object', jQueryTabId);}
    var tabNumberId = getTabNumber(jQueryTabId);
    setSavedContent(tabNumberId);
    setLoadingState(false, 'Loaded', 2500);
  }

  /**
   * Add the selected object to the page
   * @input String jQueryTabId : id of the div where to put the data
   * @input String className : class of the object to add
   */
  function addObject(jQueryTabId, className, newTab, space, page, global, redirect, properties, type) {
    if(!saving &amp;&amp; !loading) {
      setSavingState(true);
      setLoadingState(true);
      var objPage = page || getCurrentPage(true);
      var objSpace = space || getCurrentSpace(true);
      var isSelectedObject = '';
      var isGlobal = '';
      var addProperties = '';
      if(getCurrentObject(false) || newTab) {
        isSelectedObject = '&amp;selectedObject';
      }
      if(global) {
        isGlobal = '&amp;isGlobal';
      }
      if(properties) {
        addProperties = '&amp;properties='+properties;
      }
      if(className != "") {
        $.ajax({
          url: wikiViewURL+"WebIDECode/ApplicationObjects?xpage=plain&amp;addObject="+className+"&amp;docFullName="+objSpace+'.'+objPage+isSelectedObject+isGlobal+addProperties,
          type: "GET",
          dataType: "html"
        }).error(function(xhr) {
          setSavingState(false, 'Unable to add object: '+xhr.statusText, 4000, 'red');
        }).success(function(dataContent) {
          setSavingState(false, 'Saved', 2500);
          var number = $('&lt;div/&gt;').append(dataContent).find('div[data-number]').attr('data-number');
          if(newTab) { // Add an object from the menu
            setLoadingState(false, 'Loaded', 2500);
            if(redirect) { // Create an object and redirect to a new tab with that object
              if(global &amp;&amp; className === 'XWiki.TranslationDocumentClass') {
                goToNewPage('wiki', page, space, null, null, 'default');
              }
              else {
                goToNewPage('object', page, space, className, number, 'default');
              }
              reloadHierarchy();
            }
            else if(type &amp;&amp; type === 'class') { // Create a class with the logical view and add the ClassSheet : redirect to the class editor
              window.location.href = '/'+XWiki.webapppath+''+XWiki.servletpath+'edit/'+getURLSpacesString(space)+'/'+page+'?editor=class#!XWebIDE';
            }
            else {
              reloadHierarchy();
            }
          }
          else { // Add an object from an object editor tab
            var currentTabNumber = getTabNumber(jQueryTabId);
            var divSelector = 'div[id="tab'+currentTabNumber+'_editorObjects-'+className+'"]';
            var dataContentTmp = $('&lt;div/&gt;').html(dataContent);
            var tabAdd = 'tab'+currentTabNumber+'_';
            fixIds(dataContentTmp, tabAdd);
            dataContent = dataContentTmp.html();
            var anchor = $('&lt;div /&gt;').append(dataContent).find('h4').attr('id');
            var newObjectId = '#tab'+currentTabNumber+'_editorObject-'+className+'-'+number;
            if(getCurrentObject(false)) { // Single object editor : add in the "other fields" block
              $(jQueryTabId+' .editorOtherFieldsBlock').append(dataContent);
            }
            else { // Classic object editor
              // Add the object in the right class if an object of that class is already in that page
              if($(divSelector).length){
                $(divSelector).show();
                $(divSelector).append('&lt;div class="editorDisplayedObject"&gt;'+dataContent+'&lt;/div&gt;');
              }
              // Else add the object at the end of the page and quick access menu
              else {
                $('#tab'+currentTabNumber+'_objectIDEform').append('&lt;h2 class="wikigeneratedheader editorObjectClassTitle" data-classname="'+className+'"&gt;'+className+'&lt;/h2&gt;&lt;div id="tab'+currentTabNumber+'_editorObjects-'+className+'" class="editorObjectClassDetails"&gt;&lt;div class="editorDisplayedObject"&gt;'+dataContent+'&lt;/div&gt;&lt;/div&gt;');
              }
              // Add the shortcut in the Quick Access Menu
              if($('#tab'+currentTabNumber+'_editorObjectMenu a[data-classname="'+className+'"]:last').length) {
                $('#tab'+currentTabNumber+'_editorObjectMenu a[data-classname="'+className+'"]:last').after('&lt;br&gt;&lt;a href="#'+anchor+'" class="editorObjectMenuLink" data-classname="'+className+'" data-number="'+number+'"&gt;'+className+' - '+number+'&lt;/a&gt;');
              }
              else if($('#tab'+currentTabNumber+'_editorObjectMenu a:last').length) {
                $('#tab'+currentTabNumber+'_editorObjectMenu a:last').after('&lt;br&gt;&lt;a href="#'+anchor+'" class="editorObjectMenuLink" data-classname="'+className+'" data-number="'+number+'"&gt;'+className+' - '+number+'&lt;/a&gt;');
              }
              else {
                $('#tab'+currentTabNumber+'_editorObjectMenuContent').append('&lt;a href="#'+anchor+'" class="editorObjectMenuLink" data-classname="'+className+'" data-number="'+number+'"&gt;'+className+' - '+number+'&lt;/a&gt;');
              }
            }
            initObjects(false, jQueryTabId);
            if(syntaxHighlighting) {
              initCodeMirrorsCustom('object', newObjectId);
            }
          }
        }).complete(function() {
          if(newTab){
            if(bootstrap()) {$('#hierarchyObjectModal').modal('hide');}
            else {closeModalNoBootstrap();}
          }
          setLoadingState(false, 'Complete', 2500);
        });
      }
    }
  }

  /**
   * Initialize the different events related to object editor
   * Show/hide objects with click events
   * Add/Remove objects with click events
   */
  function initObjects(allObjects, jQueryTabId){
    var currentTabNumber = getTabNumber(jQueryTabId);

    $(jQueryTabId+' textarea').attr('spellcheck','false');
    $(jQueryTabId+' textarea').attr('autocomplete','off');

    function clickOnClass() {
      var divSelector = 'div[id="tab'+currentTabNumber+'_editorObjects-'+$(this).attr('data-classname')+'"]';
      $(divSelector).toggle();
      // If the textarea was initially hidden, Syntax Highlighting editor will only appear when the user click on the textarea : force the click with jQuery
      $(divSelector+' textarea').click();
    }
    function clickOnObject() {
      var divSelector = 'div[id="tab'+currentTabNumber+'_editorObject-'+$(this).parent().attr('data-classname')+'-'+$(this).parent().attr('data-number')+'"]';
      $(divSelector).toggle();
      // If the textarea was initially hidden, Syntax Highlighting editor will only appear when the user click on the textarea : force the click with jQuery
      $(divSelector+' textarea').click();
    }
    function clickOnMenu(e) {
      $(jQueryTabId+' .editorObjectDetails').hide();
      var divSelector = 'div[id="tab'+currentTabNumber+'_editorObjects-'+$(this).attr('data-classname')+'"]';
      var divSelectorInternal = 'div[id="tab'+currentTabNumber+'_editorObject-'+$(this).attr('data-classname')+'-'+$(this).attr('data-number')+'"]';
      $(divSelector).show();
      $(divSelectorInternal).show();
      $(divSelector+' textarea').click();
    }
    function clickOnRemoveObject(e) {
      e.preventDefault();
      $('#editorDeletedObjectModalInfo').html($(this).attr('data-classname')+' - '+$(this).attr('data-number'));
      $('#editorDeleteObjectConfirmed').attr('data-classname', $(this).attr('data-classname'));
      $('#editorDeleteObjectConfirmed').attr('data-number', $(this).attr('data-number'));
      if(bootstrap()) {
        $('#editorDeleteObjectModal').modal('show');
      }
      else {
        openModalNoBootstrap('#editorDeleteObjectModal');
      }
    }
    $(jQueryTabId+' .editorObjectClassTitle').unbind('click');
    $(jQueryTabId+' .editorObjectTitle h4').unbind('click');
    $(jQueryTabId+' .editorObjectMenuLink').unbind('click');
    $(jQueryTabId+' .editorRemoveObject').unbind('click');
    $(jQueryTabId+' .editorObjectClassTitle').on('click', clickOnClass);
    $(jQueryTabId+' .editorObjectTitle h4').on('click', clickOnObject);
    $(jQueryTabId+' .editorObjectMenuLink').on('click', clickOnMenu);
    $(jQueryTabId+' .editorRemoveObject').on('click', clickOnRemoveObject);

    if(allObjects) { //Executed only when the page is loaded for the first time (not when an object is added)
      if(getCurrentObject(false)){
        $(jQueryTabId+' .editorOtherFieldsBlock').css({'backgroundColor' : $('#hierarchyBlock').css('backgroundColor')});
        $(jQueryTabId+' .editorDisplayAdvancedFields').click(function() {
          $(jQueryTabId+' .editorOtherFieldsBlock').toggle();
          if($(jQueryTabId+' .editorOtherFieldsBlock').is(':visible')) {
            $(jQueryTabId+' .editorDisplayedObject').css({
              'width' : ($(jQueryTabId+' .objectIDEform').width()-410)+'px',
              'max-width' : ($(jQueryTabId+' .objectIDEform').width()-410)+'px'
            });
          }
          else {
            $(jQueryTabId+' .editorDisplayedObject').css({
              'width' : '100%',
              'max-width' : '100%'
            });
          }
        });
      }
      // Event : Expand/Collapse objects list
      $('#tab'+currentTabNumber+'_editorExpandAllButton').on('click', function(e) {
        e.preventDefault();
        $(jQueryTabId+' .editorObjectDetails, .editorObjectClassDetails').show();
        $(jQueryTabId+' .editorObjectDetails textarea').click();
      });
      $('#tab'+currentTabNumber+'_editorCollapseAllButton').on('click', function(e) {
        e.preventDefault();
        $('.editorObjectClassDetails').show();
        $('.editorObjectDetails').hide();
      });
      // Event : Add an object
      $('#tab'+currentTabNumber+'_editorObjectAddButton').on('click', function(e) {
        e.preventDefault();
        var selectedObj = $('#tab'+currentTabNumber+'_addClassList').val();
        addObject(jQueryTabId, selectedObj);
      });
    }
  }

  /**
   * Remove the specified object from the page
   * @input String className: the class of the object to remove
   * @input String number: the number of the object to remove
   */
  function removeObject(className, number) {
    if(!saving &amp;&amp; !loading) {
      setSavingState(true, 'Deleting object...');
      setLoadingState(true, 'Removing text...');
      var jQueryTabId = '#'+getTabId('object', getCurrentSpace(false), getCurrentPage(false), getCurrentObject(false), currentNumber, 'default');
      var currentTabNumber = getTabNumber(jQueryTabId);
      var restCurrentSpaces = getRestSpacesString(getCurrentSpace());
      $.ajax({
        url: '/'+XWiki.webapppath+'rest/wikis/'+getDocumentReferenceData('wiki')+'/'+restCurrentSpaces+'/pages/'+getCurrentPage()+'/objects/'+className+'/'+number,
        type: "DELETE",
      }).success(function(dataContent){
        setSavingState(false, 'Deleted', 2500);
        var divSelectorInternal = 'div[id="tab'+currentTabNumber+'_editorObject-'+className+'-'+number+'"]';
        $(divSelectorInternal).parent().remove();
        $('#tab'+currentTabNumber+'_editorObjectMenu a[data-classname="'+className+'"][data-number="'+number+'"]').next('br').remove();
        $('#tab'+currentTabNumber+'_editorObjectMenu a[data-classname="'+className+'"][data-number="'+number+'"]').remove();
        $('#hierarchySavingState').html('&lt;strong&gt;Deleted&lt;/strong&gt;').show().delay(2500).queue(function(n) {
          $(this).hide().html('');
          n();
        });
        if(bootstrap()) {
          $('#editorDeleteObjectModal').modal('hide');
        }
        else {
          closeModalNoBootstrap();
        }
      }).error(function(xhr){
        setSavingState(true, xhr.statusText, 5000, 'red');
      }).complete(function() {
        $('#editorDeletedObjectModalInfo').html('');
        setLoadingState(false, 'Removed', 2500);
      });
    }
  }

  /**
   * Save the displayed objects
   * @input String folder: The folder where is located the document to save
   * @input String file: The file whose objects have to be saved
   * @input String objName: name of the object displayed (JSX, SSX, macro) when single-object editor
   * @input String objNumber: number of the object displayed (JSX, SSX, macro) when single-object editor
   * @input Boolean changeSavedContent: true = change the value of savedContent, false = don't change the value, the tab is going to be closed
   * @input Boolean continueEditing: true = stay in the editor, false = go to the view mode of the page after saving
   */
  function saveObjects(folder, file, objName, objNumber, changeSavedContent, continueEditing, saveAll, tokenUpToDate) {
    if(!saving || saveAll) {
      if(!saveAll) {
        setSavingState(true, 'Saving...', null, 'green');
      }
      var jQueryTabId = '#'+getTabId('object', folder, file, objName, objNumber, 'default');
      var tabNumberId = getTabNumber(jQueryTabId);
      if(syntaxHighlighting) {
        synchronizeCodeMirrorContent();
      }
      $.ajax({
        url: $('#tab'+tabNumberId+'_objectIDEform').attr('action'),
        type: $('#tab'+tabNumberId+'_objectIDEform').attr('method'),
        data: $('#tab'+tabNumberId+'_objectIDEform').serialize(),
        success: function() {
          if(changeSavedContent) {
            setSavedContent(tabNumberId);
          }
          setStar(false, tabNumberId);
          if(!saveAll) {
            setSavingState(false, 'Saved', 2500);
            if(continueEditing) return true;
            else window.location.href = wikiViewURL+space+'/'+page;
          }
          else {
            continueSaveAll(true);
          }
        },
        error: function(xhr) {
          if(!saveAll) {
            setSavingState(false, xhr.statusText, 5000, 'red');
          }
          if(xhr.status == 401 &amp;&amp; !tokenUpToDate){
            getUpdatedToken(saveObjects, [folder, file, objName, objNumber, changeSavedContent, continueEditing, saveAll]);
          }
          else {
            continueSaveAll(false, xhr, folder, file);
          }
        }
      });
    }
  }

  /**
   * Get all the inputs (input, textarea, select, etc.) in the object editor, except those created by CodeMirror
   * @input DOM tabElement: a div element containing the data of a tab
   * @return List[DOM elements] The list of editable elements in the selected object editor tab
   */
  function getObjectInputFields(tabElement) {
    return $(tabElement).find('.editorDisplayedObject textarea, .editorDisplayedObject input, .editorDisplayedObject select').not('.CodeMirror textarea')
  }

  //-------------------------------------
  //------------ COMMONS API ------------
  //------ Wiki and object editors ------
  //-------------------------------------
  // Project browsing tools
  // Common setters/getters
  // Title tools
  // Tabs tools
  // CodeMirror editor tools
  // Modals tools
  // Nested Spaces tools
  //-------------------------------------

  /*
   * Project browsing
   * ---------------------------------
   * initEditor()
   * initViewEditor()
   * goToNewPage(mode, file, folder, objectSelected, objectNumber, locale)
   * getHash(mode, file, folder, objectSelected, objectNumber, locale)
   * saveAll()
   * continueSaveAll(success, xhr, folder, file)
   * addSaveEvents(addEvents)
   * setStar(state, tabNumberId)
   */

  /**
   * Initialize editors
   * initEditor() : one-time initialization of the wiki/object editor (with tabs)
   * initViewEditor() : one-time initialization of the view mode for the master page
   */
  function initEditor() {
    $('.editorViewElement').hide();
    $('.editorEditElement').css({"display" : "block"});
    $('.editorWikiElement').css({"display" : "block"});
    $(TITLE_INPUT).css({"display" : "inline-block"});
    addSaveEvents(true);
  }
  function initViewEditor() {
    $('.editorEditElement').hide();
    $('.editorWikiElement').hide();
    $('.editorViewElement').css({"display" : "block"});
    $(TITLE_INPUT).hide();
    $(TITLE_VIEW).hide();
    addSaveEvents(false);
  }

  /**
   * goToNewPage() : change the current page to display
   * @input String mode: the edition mode to use (wiki or object)
   * @input String file: the file name of the document to edit
   * @input String folder: the folder name where is located the document to edit
   * @input String objectSelected: name of the object displayed (JSX, SSX, macro) when single-object editor
   * @input String objectNumber: number of the object displayed (JSX, SSX, macro) when single-object editor
   * @input String locale: the locale of the new tab
   */
  function goToNewPage(mode, file, folder, objectSelected, objectNumber, locale) {
    if(mode === 'class') {
      window.location.href = '/'+XWiki.webapppath+''+XWiki.servletpath+'edit/'+getURLSpacesString(folder)+'/'+file+'?editor=class#!XWebIDE';
    }
    else if(currentEditor === 'class') {
      var redirectLocale = locale || 'default';
      var redirectHash = getHash(mode, file, folder, objectSelected, objectNumber, locale);
      window.location.href = '/'+XWiki.webapppath+''+XWiki.servletpath+'view/'+getURLSpacesString(masterSpace)+'/'+masterPage+redirectHash;
    }
    else {
      if(!$(TAB_MAIN_CONTAINER).is(":visible")) {
        initEditor();
      }
      else if(currentEditor === 'wiki') {
        //Save the current title
        $('input[data-space="'+encodeURIComponent(getCurrentSpace(false))+'"][data-page="'+encodeURIComponent(getCurrentPage(false))+'"].editorHiddenTitle').val(getCurrentTitle());
      }
      // Display a star in the old tab button if there is unsaved content when we leave it
      var tabId = getTabId(currentEditor, getCurrentSpace(false), getCurrentPage(false), getCurrentObject(false), currentNumber, currentLocale);
      var jQueryTabId = '#'+tabId;
      var tabNumberId = getTabNumber(jQueryTabId);
      if(tabNumber &gt; 0) {
        var unsavedState = (savedContent[tabNumberId] !== getCurrentContent(tabNumberId));
        setStar(unsavedState, tabNumberId);
      }
      // Load the new tab data
      setCurrentPage(file);
      setCurrentSpace(folder);
      setCurrentObject(objectSelected);
      setCurrentNumber(objectNumber);
      currentLocale = locale;
      currentEditor = mode;
      tabId = getTabId(mode, getCurrentSpace(false), getCurrentPage(false), getCurrentObject(false), currentNumber, currentLocale);
      jQueryTabId = '#'+tabId;
      if(mode === 'wiki') {
        $(TITLE_INPUT).show();
        $(TITLE_VIEW).hide();
      }
      else if(mode === 'object') {
        $(TITLE_INPUT).hide();
        $(TITLE_VIEW).show();
      }
      //Open the tab
      if(!$(jQueryTabId).length) { //Create a new tab
        createTab(mode, tabId, getCurrentSpace(false), getCurrentPage(false), getCurrentObject(false), currentNumber, currentLocale);
        if(mode === 'wiki') {
          loadPage();
        }
        else if(mode === 'object') {
          loadObject(objectSelected, objectNumber);
        }
      }
      else { //Open an existing tab
        $('.editorTab').hide();
        $(jQueryTabId).show();
        setActiveTab(mode, getCurrentPage(false), getCurrentSpace(false), getCurrentObject(false), currentNumber, currentLocale);
      }
      //Add the correct title in the title fields
      setTitleInForm($('input[data-space="'+encodeURIComponent(folder)+'"][data-page="'+encodeURIComponent(file)+'"]').val()); //Insert title of new page in the title element
    }
  }

  /**
   * Get the hash which has to be added to the url to reload the current tab when reloading the page
   * @input String mode: the edition mode to use (wiki or object)
   * @input String file: the file name of the document to edit
   * @input String folder: the folder name where is located the document to edit
   * @input String objectSelected: name of the object displayed (JSX, SSX, macro) when single-object editor
   * @input String objectNumber: number of the object displayed (JSX, SSX, macro) when single-object editor
   * @input String locale: the locale of the new tab
   */
  function getHash(mode, file, folder, objectSelected, objectNumber, locale) {
    var addSelectedObj = '';
    if(objectSelected) {
      addSelectedObj = '&amp;!!'+objectSelected+'&amp;!!'+objectNumber;
    }
    return '#!XWebIDE&amp;!!'+mode+'&amp;!!'+currentTree+'&amp;!!'+file+'&amp;!!'+folder+'&amp;!!'+locale+addSelectedObj;
  }

  /**
   * Get the list of tabs which need to be saved and initialize the saving phase.
   */
  function saveAll() {
    var tabNumberId, mode, folder, file, objName, objNumber, locale;
    if(saveAllList.length === 0) {
      $('.editorTabButton').each(function(index, elmt) {
        tabNumberId = $(elmt).attr('data-tabnumber');
        mode = $(elmt).attr('data-editor');
        folder = $(elmt).attr('data-space');
        file = $(elmt).attr('data-page');
        objName = $(elmt).attr('data-object') || null;
        objNumber = $(elmt).attr('data-objectnumber') || null;
        locale = $(elmt).attr('data-locale') || null;
        if(savedContent[tabNumberId] != getCurrentContent(tabNumberId)) {
          saveAllList.push([mode, folder, file, objName, objNumber, locale]);
        }
      });
      if(saveAllList.length &gt; 0) {
        setSavingState(true, "Saving all tabs...");
        continueSaveAll(true);
      }
      else {
        setSavingState(false, "All tabs are already saved!", 2500);
      }
    }
  }
  /**
   * Save the tabs in the "saveAllList" one by one
   * @input Boolean success : Page successfully saved?
   * @input (opt) xhr : xhr object in case of error
   * @input (opt) String folder : Name of the folder in which the error happened
   * @input (opt) String file : Name of the file whose saving has failed
   */
  function continueSaveAll(success, xhr, folder, file) {
    savedAll = savedAll + 1;
    var saveTotal = saveAllList.length;
    if(!success) {
      savedAllError.push([xhr.statusText, folder, file]);
    }
    if(savedAll === saveTotal) {
      var msg = 'All tabs are saved!';
      var cssClass = 'green';
      var delay = 2500;
      if(savedAllError.length &gt; 0) {
        msg = 'Tabs saved. Error while saving:';
        savedAllError.each(function(index, elt) {
          msg += ' ['+elt[1]+'.'+elt[2]+' : '+elt[0]+']';
        });
        cssClass = 'red';
        delay = 5000;
      }
      setSavingState(false, msg, delay, cssClass);
      savedAll = -1;
      saveAllList = [];
      savedAllError = [];
    }
    else if(savedAll &lt; saveTotal) {
      if(savedAll !== 0) {
        var msg = savedAll+'/'+saveTotal+' tabs done...';
        var cssClass = 'green';
        if(savedAllError.length &gt; 0) {
          msg += ' (Errors: '+savedAllError.length+')';
          cssClass = 'red';
        }
        setSavingState(true, msg, null, cssClass);
      }
      var nextSave = saveAllList[savedAll];
      var mode = nextSave[0];
      var file = nextSave[2];
      var folder = nextSave[1];
      var objName = nextSave[3];
      var objNumber = nextSave[4];
      var locale = nextSave[5];
      if(mode === 'wiki') {
        var jQueryTabId = '#'+getTabId('wiki', folder, file, null, null, locale);
        var tabNumberId = getTabNumber(jQueryTabId);
        var rawTitle = $('input[data-space="'+encodeURIComponent(folder)+'"][data-page="'+encodeURIComponent(file)+'"]').val();
        savePage(folder, file, locale, true, true, true);
      }
      else if(mode === 'object') {
        saveObjects(folder, file, objName, objNumber, true, true, true);
      }
    }
  }

  /**
   * addSaveEvents(addEvents)
   * Recreate the default shortcuts to save a page in XWiki in the Web IDE (Alt+S, Alt+Shift+S, Alt+C)
   * Remove the existing events and add them again if requested
   * @input Boolean addEvents : add the events or not?
   */
  function addSaveEvents(addEvents) {
    shortcut.remove("Alt+Shift+S");
    shortcut.remove("Alt+S");
    shortcut.remove("Alt+C");
    if(addEvents) {
      // Add events on buttons and shortcuts
      $('#hierarchySaveButtonIDE').click(function(e){
        e.preventDefault();
        saveEventsFunction(true);
      });
      $('#hierarchySaveViewButtonIDE').click(function(e){
        e.preventDefault();
        saveEventsFunction(false);
      });
      $('#hierarchyDiscardViewButtonIDE').click(function(e){
        e.preventDefault();
        cancelAndViewIDE();
      });
      shortcut.add("Alt+Shift+S", function() {
        saveEventsFunction(true);
      });
      shortcut.add("Alt+S", function() {
        saveEventsFunction(false);
      });
      shortcut.add("Alt+C", function() {
        cancelAndViewIDE();
      });
    }
  }
  function saveEventsFunction(continueEdit) {
    if(syntaxHighlighting) {
      synchronizeCodeMirrorContent();
    }
    if(currentEditor === 'wiki') {savePage(currentSpace, currentPage, currentLocale, true, continueEdit, false);}
    else {saveObjects(getCurrentSpace(true), getCurrentPage(true), getCurrentObject(false), currentNumber, true, continueEdit, false);}
  }

  /**
   * Write a star in a inactive tab button if its content is unsaved
   * @input Boolean state : true = add the star, false = remove the star
   * @input Int tabNumberId : the number ID of the selected tab
   */
  function setStar(state, tabNumberId) {
    var tabStarElement = $('.editorTabButton[data-tabnumber="'+tabNumberId+'"] .unsavedTab');
    // Add a star in the hierarchy if the content has changed
    if(state == true) {
      tabStarElement.show();
    }
    else {
      tabStarElement.hide();
    }
  }

  /*
   * Common setters/getters
   * ---------------------------------
   * setSavingState(state, msg, delay, cssClass)
   * setLoadingState(state, msg, delay, cssClass)
   * setHierarchyState(msg, delay, cssClass)
   * setCurrentPage(file)
   * setCurrentSpace(folder)
   * getCurrentPage(escaped)
   * getCurrentSpace(escaped, url, rest)
   * setSavedContent(tab)
   * getCurrentContent(tabNumberId)
   * getDocumentReferenceData(dataType)
   * setDocumentReferenceData()
   */

  /**
   * Set the state of the loading and/or saving variable and the text in the information div
   * @input Boolean state: true = busy, false = not in use
   * @input (Opt) String msg: the message to display in the information div
   * @input (Opt) Int delay: the duration (in millisecond) for the display of the information div (infinite if not provided)
   * @input (Opt) String cssClass: The CSS class to add to the information div (only "red" is available for now)
   */
  function setSavingState(state, msg, delay, cssClass) {
    setState(1, state, msg, delay, cssClass);
  }
  function setLoadingState(state, msg, delay, cssClass) {
    setState(2, state, msg, delay, cssClass);
  }
  function setHierarchyState(msg, delay, cssClass) {
    setState(3, true, msg, delay, cssClass);
  }
  function setState(type, state, msg, delay, cssClass) {
    if(type === 1) { //saving
      saving = state;
      var message = 'Saving...';
      var htmlElement = $('#hierarchySavingState');
    }
    else if(type === 2) { //loading
      loading = state;
      var message = 'Loading...';
      var htmlElement = $('#hierarchyLoadingState');
    }
    else { //other operation
      var message = 'Processing...';
      var htmlElement = $('#hierarchyState');
    }
    if(msg) {message = msg;}
    if(cssClass) {
      htmlElement.attr('class', cssClass);
    }
    htmlElement.html('&lt;strong&gt;'+message+'&lt;/strong&gt;').show();
    if(delay) {
      htmlElement.delay(delay).queue(function(n) {
        $(this).hide().removeAttr('class').html('');
        n();
      });
    }
  }

  /**
   * Set data about the current document edited
   * @input String file/folder/objName/objNumber: the value currently used in the editor
   */
  function setCurrentPage(file) {
    currentPage = file;
    currentPageEscaped = getEscapedValue(currentPage);
  }
  function setCurrentSpace(folder) {
    currentSpace = folder;
    currentSpaceEscaped = getSpacesEscaped(currentSpace);
  }
  function setCurrentObject(objName) {
    currentObject = objName;
    currentObjectEscaped = (currentObject === null) ? null : getEscapedValue(currentObject);
  }
  function setCurrentNumber(objNumber) {
    currentNumber = objNumber;
  }
  /**
   * Get data about the current document edited
   * @input Boolean escaped: return an escaped (with backslashes) string of the requested data (My\.Folder.My\.Nested\.Folder or My\.Page)
   * @input Boolean url: return an URL-formatted string representing the folder (A/B/C)
   * @input Boolean rest: return an REST-formatted string representing the folder (spaces/A/spaces/B/spaces/C/)
   */
  function getCurrentPage(escaped) {
    if(escaped) {return currentPageEscaped;}
    else {return currentPage;}
  }
  function getCurrentSpace(escaped, url, rest) {
    if(escaped) {return currentSpaceEscaped;}
    else if(url) {return getURLSpacesString(currentSpace)}
    else if(rest) {return getRestSpacesString(currentSpace);}
    else {return currentSpace;}
  }
  function getCurrentObject(escaped) {
    if(escaped) {return currentObjectEscaped;}
    else {return currentObject;}
  }
  function getEscapedValue(file) {
    return file.replace('%5C', '%5C%5C').replace(/\\/g, '%5C%5C').replace(/\./g, '%5C.');
  }

  /**
   * Save the value of the document saved in XWiki for the selected tab
   * @input Int tab: the number ID of a tab
   * The "savedContent" variable can then be compared with the current content (getCurrentContent(tab)) to know if modifications have been done in the document
   */
  function setSavedContent(tab) {
    if(tab) {
      savedContent[tab] = getCurrentContent(tab);
    }
  }
  /**
   * Get a text value of the selected tab's content
   * @input Int tabNumberId: the number ID of a tab
   * @out The textarea value of a wiki editor tab or the concatenated string value of an object editor tab
   */
  function getCurrentContent(tabNumberId) {
    var currentContent = '';
    var tabElement = null;
    // Get the tab main "div" from its number or from the current tab
    if(tabNumberId) {
      tabElement = $('.editorTab[data-tabnumber="'+tabNumberId+'"]');
    }
    else {
      tabElement = $('#'+getTabId(currentEditor, currentSpace, currentPage, currentObject, currentNumber, currentLocale));
    }
    // Determine the editor used in the selected tab
    var selectedTabEditor = 'object';
    if($(tabElement).hasClass('editorWikiTab')) {
      selectedTabEditor = 'wiki';
    }
    // Get the content of the tab, depending on its editor
    if(syntaxHighlighting) {synchronizeCodeMirrorContent();}
    if(selectedTabEditor === 'object') {
      var arrayVal = getObjectInputFields(tabElement);
      arrayVal.each(function(elemt, index) {
        currentContent += $(index).val();
      });
    }
    else if(selectedTabEditor === 'wiki') {
      var tabWikiElement = $(tabElement).find('textarea:first');
      currentContent = $(tabWikiElement).val();
    }
    return currentContent;
  }

  /**
   * Get data from about the current document (i.e. the master page) from XWiki API
   */
  function getDocumentReferenceData(dataType) {
    var restURL = xm ? xm.restURL : $('meta[name="restURL"]').attr('content');
    switch(dataType) {
      case 'wiki':
        return xm ? xm.wiki : $('meta[name="wiki"]').attr('content');
        break;
      case 'space':
        return xm ? xm.space : $('meta[name="space"]').attr('content');
        break;
      case 'page':
        return xm ? xm.page : $('meta[name="page"]').attr('content');
        break;
      case 'fullName':
        return xm ? xm.document : $('meta[name="document"]').attr('content');
        break;
      case 'form_token':
        return xm ? xm.form_token : $('meta[name="form_token"]').attr('content');
        break;
      case 'restURL':
        return (typeof restURL != 'undefined') ? restURL : '/'+XWiki.webapppath+'rest/wikis/'+getDocumentReferenceData('wiki')+'/'+getRestSpacesString(getDocumentReferenceData('space'))+'/pages/'+getDocumentReferenceData('page');
        break;
      default:
        return xm ? (xm.documentReference ? xm.documentReference : xm.wiki+':'+xm.space+'.'+xm.page) : $('meta[name="wiki"]').attr('content')+':'+$('meta[name="space"]').attr('content')+'.'+$('meta[name="page"]').attr('content');
    }
  }
  /**
   * Override or create a 'xm' variable in the __class__ editor in order to get the right values.
   * "xm" (xwiki-meta) represents an XWiki document and should contain data about the master page.
   */
  function setDocumentReferenceData() {
    if(XWiki.editor == 'class') {
      xm = {
        wiki: getDocumentReferenceData('wiki'),
        space: $('#hierarchyMasterDocSpace').val(),
        page: $('#hierarchyMasterDocName').val(),
        document: $('#hierarchyMasterDocSpace').val()+'.'+$('#hierarchyMasterDocName').val(),
        form_token: getDocumentReferenceData('form_token'),
        restURL: '/'+XWiki.webapppath+'rest/wikis/'+getDocumentReferenceData("wiki")+'/'+getRestSpacesString($('#hierarchyMasterDocSpace').val())+'/pages/'+$('#hierarchyMasterDocName').val(),
        documentReference: getDocumentReferenceData('wiki')+':'+$('#hierarchyMasterDocSpace').val()+'.'+$('#hierarchyMasterDocName').val()
      };
    }
  }

  /**
   * Update the CSRF token for the current user (the token can be wrong if the wiki has been restarted)
   * @input (opt) Function callback : the function to call when the token is updated
   * @input (opt) Array args : the arguments to apply to the callback function when it is called
   */
  function getUpdatedToken(callback, args) {
    if(!loading) {
      setLoadingState(true, 'Updating CSRF token...');
      $.ajax({
        url: wikiViewURL+"WebIDECode/ApplicationObjects?xpage=plain&amp;updateToken",
        type: "GET",
        dataType: "html"
      }).success(function(dataContent) {
        var newToken = $('&lt;div /&gt;').append(dataContent).find('#currentToken p').html();
        if(newToken !== getDocumentReferenceData('form_token')) {
          if(xm) {
            xm.form_token = newToken;
          }
          else {
            $('meta[name="form_token"]').attr('content', newToken);
          }
          $('input[name="form_token"]').val(newToken);
          setLoadingState(false, 'CSRF token updated!', 2500);
          if(callback &amp;&amp; args) {
            args.push(true);
            callback.apply(null, args);
          }
        }
        else {
          setLoadingState(false, 'Token already up-to-date', 1000);
        }
      }).error(function(xhr) {
        setLoadingState(false, xhr.statusText, 4000, 'red');
      });
    }
  }

  /*
   * Title tools
   * ---------------------------------
   * getRawTitle(folder, file)
   * setTitleInForm(rawTitle)
   * getCurrentTitle()
   */

  /**
   * Get the old raw title of the selected document
   * @input String folder: the space of the document
   * @input String file: the name of the document
   */
  function getRawTitle(folder, file, locale) {
    var editPageTitle = $('.editPage[data-space="'+folder+'"][data-page="'+file+'"][data-locale="'+locale+'"]').attr('data-rawtitle');
    return (editPageTitle || editPageTitle === '') ? editPageTitle : $('.editObject[data-space="'+folder+'"][data-page="'+file+'"]').attr('data-rawtitle');
  }
  /**
   * Write the title in the corresponding fields
   * @input String rawTitle: the title to write
   */
  function setTitleInForm(rawTitle) {
    $(TITLE_INPUT).val(decodeURIComponent(rawTitle));
    $(TITLE_VIEW).html(decodeURIComponent(rawTitle));
  }
  /**
   * Get the title from the input field in the page
   */
  function getCurrentTitle() {
    return $(TITLE_INPUT).val();
  }

  /*
   * Tabs tools
   * ---------------------------------
   * createTab(mode, id, folder, file, objectSelected, objectNumber)
   * closeTab(element, tabName)
   * removeTab(element, tabNumberId)
   * setActiveTab(mode, file, folder)
   * getTabId(mode, folder, file, objectSelected, objectNumber)
   * getTabNumber(jTabId)
   * fixIds(elem, prefix)
   */

   /**
   * Create a new tab when the user wants to edit a page not already opened
   * @input String mode: Editor mode (wiki or object for now)
   * @input String id: id to use for the tab (can be retrieved with getTabId)
   * @input String folder: name of the folder for the document in the tab
   * @input String file: name of the file for the document in the tab
   * @input String objectSelected: name of the object displayed (JSX, SSX, macro) when single-object editor
   * @input String objectNumber: number of the object displayed (JSX, SSX, macro) when single-object editor
   */
  function createTab(mode, id, folder, file, objectSelected, objectNumber, locale) {
    var jQueryId = '#'+id;
    $('.editorTab').hide();
    tabNumber++;
    var tabName = file+' ('+decodeURIComponent(folder)+')';
    if(tabName.length &gt; 20) tabName = tabName.substr(0,16)+'...';
    var rawtitle = getRawTitle(folder, file, locale);
    var prettyModeName;
    var iconModeId;
    var tabModeClass;
    var addTextareaWiki = '';
    var addSelectedObject = '';
    if(tabNumber == 1) { //first tab creation
      var tabButton = $('&lt;span class="btn btn-success"&gt;Save all tabs&lt;/span&gt;').appendTo('#editorTabBar').on('click', function(e) {
        e.preventDefault();
        saveAll();
        return false;
      });
    }
    if(mode === 'wiki') {
      prettyModeName = 'Wiki';
      iconModeId = '#editorWikiIcon p';
      tabModeClass = 'editorWikiTab';
      addTextareaWiki = '&lt;div class="editorWikiTabContent"&gt;&lt;textarea id="content_'+id+'"&gt;&lt;/textarea&gt;&lt;/div&gt;';
    }
    else if(mode === 'object') {
      prettyModeName = 'Object';
      iconModeId = '#editorObjectIcon p';
      tabModeClass = 'editorObjectTab';
      if(objectSelected) {
        addSelectedObject = 'data-object="'+encodeURI(objectSelected)+'" data-objectnumber="'+objectNumber+'"';
      }
    }
    if(!$(jQueryId).length) {
      $(TAB_MAIN_CONTAINER).append('&lt;div id="'+id+'" class="editorTab '+tabModeClass+'" data-tabnumber="'+tabNumber+'"&gt;'+addTextareaWiki+'&lt;/div&gt;');
      if(!$('input[data-space="'+encodeURIComponent(folder)+'"][data-page="'+encodeURIComponent(file)+'"]').length) {
        $(TAB_MAIN_CONTAINER).append('&lt;input class="editorHiddenTitle" data-space="'+encodeURIComponent(folder)+'" data-page="'+encodeURIComponent(file)+'" type="hidden" value="'+rawtitle+'"&gt;');
      }
      var tabButton = $('&lt;span class="editorTabButton" data-tabnumber="'+tabNumber+'" data-editor="'+mode+'" data-space="'+encodeURIComponent(folder)+'" data-page="'+encodeURIComponent(file)+'" data-locale="'+locale+'" '+addSelectedObject+' title="('+prettyModeName+') '+folder+'.'+file+'"&gt;'+$(iconModeId).html()+' &lt;strong class="unsavedTab"&gt;*&lt;/strong&gt;'+tabName+'&lt;/span&gt;').appendTo('#editorTabBar').on('mousedown', function(e) {
        e.preventDefault();
        if(e.which === 1) { // Left-click
          if(decodeURIComponent(file) !== getCurrentPage(false) || decodeURIComponent(folder) !== getCurrentSpace(false) || decodeURIComponent(objectSelected) !== getCurrentObject(false) || objectNumber !== currentNumber || currentEditor !== mode) {
            goToNewPage(mode, file, folder, objectSelected, objectNumber, locale);
          }
        }
        else if(e.which === 2) { // Wheel click
          closeTab($(this), '('+prettyModeName+') '+tabName);
        }
        return false;
      });
      $($('#editorCrossIcon').html()).appendTo(tabButton).click(function() {
        closeTab($(this).parent(), '('+prettyModeName+') '+tabName);
        return false;
      });
      setActiveTab(mode, file, folder, objectSelected, objectNumber, locale);
    }
  }

  /**
   * Beginning the process of closing a tab (the user has just clicked on the cross)
   * @input DOM element: JS element representing the closed tab button
   * @input String tabName: Name of the tab which is going to be closed (needed for the confirmation modal)
   */
  function closeTab(element, tabName) {
    var tabNumberId = $(element).attr('data-tabnumber');
    if(savedContent[tabNumberId] != getCurrentContent(tabNumberId)) {
      if(nextTabToClose === null) {
        nextTabToClose = element;
        $('#hierarchyCloseTabModalInfo').html(tabName);
        if(bootstrap()) {$('#hierarchyCloseTabModal').modal('show');}
        else {openModalNoBootstrap('#hierarchyCloseTabModal');}
      }
    }
    else {removeTab(element, tabNumberId);}
  }
  /**
   * Removing the tab (the user has confirmed his action in the modal if unsaved content)
   * @input DOM element: JS element representing the closed tab button
   * @input Int tabNumberId: The tab number id which is going to be closed
   */
  function removeTab(element, tabNumberId) {
    var isActiveTab = $(element).hasClass('editorActiveTab');
    nextTabToClose = null;
    $('.editorTab[data-tabnumber="'+tabNumberId+'"]').remove();
    $(element).remove();
    // If all tabs are closed, open master page, else, open the first tab in the list
    if(!$('.editorTab').length) {
      initViewEditor();
      setCurrentPage(masterPage);
      setCurrentSpace(masterSpace);
      currentEditor = 'view';
      setActiveTab('view', masterPage, masterSpace, null, null, 'default');
    }
    else if(isActiveTab) {
      var firstTab = $('.editorTabButton:first');
      var tabMode = firstTab.attr('data-editor');
      var tabFile = firstTab.attr('data-page');
      var tabFolder = firstTab.attr('data-space');
      var tabLocale = firstTab.attr('data-locale');
      var tabObj = null;
      var tabObjNumber = null;
      if(firstTab.attr('data-object')) {
        tabObj = firstTab.attr('data-object');
        tabObjNumber = firstTab.attr('data-objectnumber');
      }
      goToNewPage(tabMode, tabFile, tabFolder, tabObj, tabObjNumber, tabLocale);
    }
  }

  /**
   * Change the active tab (style of the buttons and of the menu only)
   * @input String mode: Editor mode (wiki or object for now)
   * @input String folder: name of the folder for the document in the tab
   * @input String file: name of the file for the document in the tab
   * @input String objectSelected: name of the object displayed (JSX, SSX, macro) when single-object editor
   * @input String objectNumber: number of the object displayed (JSX, SSX, macro) when single-object editor
   */
  function setActiveTab(mode, file, folder, objectSelected, objectNumber, locale) {
    var tabId = getTabId(mode, folder, file, objectSelected, objectNumber, locale);
    var jQueryTabId = '#'+tabId;
    var tabNumber = getTabNumber(jQueryTabId);
    var menuElement;
    // Change the style of the tab buttons :
    $('.editorTabButton').removeClass('editorActiveTab');
    $('.editorTabButton[data-tabnumber='+tabNumber+']').addClass('editorActiveTab');
    // Change the active page in the menu :
    $('.hierarchy-page-active').removeClass('hierarchy-page-active');
    if(mode === 'wiki') {
      menuElement = $('.editPage[data-space="'+folder+'"][data-page="'+file+'"][data-locale="'+locale+'"]');
    }
    else if(mode === 'object') {
      menuElement;
      if(objectSelected) {
        menuElement = $('.editObject[data-space="'+folder+'"][data-page="'+file+'"][data-object="'+objectSelected+'"][data-objectnumber="'+objectNumber+'"]');
      }
      else {
        menuElement = $('.editObject[data-space="'+folder+'"][data-page="'+file+'"]').not('[data-object]');
      }
    }
    else if(mode === 'class') {
      menuElement = $('.editClass[data-space="'+folder+'"][data-page="'+file+'"]');
    }
    else {
      menuElement = $('.hierarchy-viewElement[data-space="'+folder+'"][data-page="'+file+'"]');
    }
    menuElement.addClass('hierarchy-page-active');
    menuElement.parents().siblings('.hierarchy-displayPage, .hierarchy-toggleFolder').find('span[id^="hierarchyDisplayPage"], span[id^="hierarchyDisplaySpace"]').addClass('hierarchy-page-active');
    menuElement.parents('ul.hierarchy-list').show();
  }

  /**
   * Get the id of a tab from the name of the document and the edition mode
   * @input String mode: Editor mode (wiki or object for now)
   * @input String folder: name of the folder for the document in the tab
   * @input String file: name of the file for the document in the tab
   * @input String objectSelected: name of the object displayed (JSX, SSX, macro) when single-object editor
   * @input String objectNumber: number of the object displayed (JSX, SSX, macro) when single-object editor
   */
  function getTabId(mode, folder, file, objectSelected, objectNumber, locale) {
    var addSelectedObject = '';
    var tabLocale = locale || 'default';
    if(objectSelected) {
      addSelectedObject = '_'+encodeURIComponent(objectSelected).replace(/\./g, '2E').replace(/%/g, '')+'_'+objectNumber;
    }
    return 'tab_'+mode+'_'+encodeURIComponent(folder).replace(/\./g, '2E').replace(/%/g, '')+'_'+encodeURIComponent(file).replace(/\./g, '2E').replace(/%/g, '')+'_'+tabLocale+addSelectedObject;
  }

  /**
   * Get the number of a tab from its id
   * @input String jTabId: The id used for the tab main "div"
   */
  function getTabNumber(jTabId) {
    if($(jTabId).length) {
      return $(jTabId).attr('data-tabnumber');
    }
    else return 0;
  }

  /**
   * Add the "tab{Tab Number ID}_" prefix to the id of every element in an object
   * @input DOM elem: The element representing the whole object (all the IDs of its children will be changed)
   * @input String prefix: The prefix to add in the IDs
   */
  function fixIds(elem, prefix) {
    $(elem).find("[id]").add(elem).each(function() {
        this.id = prefix+this.id;
    })
  }

  /*
   * CodeMirror editor tools
   * ---------------------------------
   * initCodeMirrorsCustom(mode, id)
   * synchronizeCodeMirrorContent()
   */

  /**
   * Initialize all possible CodeMirror instances
   * @input String mode: the edition mode concerned (wiki or object)
   * @input String id: The id of the tab (in order to avoid the creation of CodeMirror instances for existing textarea in other tabs)
   */
  function initCodeMirrorsCustom(mode, id) {
    // SyntaxHighlighting extension is installed but we have to wait for it to be loaded in that page
    if(syntaxHighlighting &amp;&amp; syntaxHighlightingState()) {
      if(mode === 'object') {
        id = id.replace( /(:|\.|\[|\]|,)/g, "\\$1" );
        initCodeMirror(id+" textarea[name^='XWiki.StyleSheetExtension_'][name$='_code']", 'css');
        initCodeMirror(id+" textarea[name^='XWiki.JavaScriptExtension_'][name$='_code']", 'javascript');
        initCodeMirror(id+" textarea[name^='XWiki.XWikiSkins_'][name$='.css']", 'css');
        initCodeMirror(id+" textarea[name^='XWiki.XWikiSkins_'][name$='.js']", 'javascript');
        initCodeMirror(id+" textarea[name^='XWiki.XWikiSkins_'][name$='.vm']", 'velocity');
        initCodeMirror(id+" textarea[name^='XWiki.WikiMacroClass_'][name$='_code']", XWiki.docsyntax);
      }
      else {
        if($('#syntaxHState').val() === 'old') {
          initCodeMirror('#content_'+id, 'xwiki');
        }
        else {
          initCodeMirror('#content_'+id, XWiki.docsyntax);
        }
      }
    }
    else {
      setTimeout(function() {initCodeMirrorsCustom(mode, id)}, 150);
    }
  }
  /**
   * Synchronize the original textareas' contents with the codemirrors' contents.
   */
  function synchronizeCodeMirrorContent() {
    if(syntaxHighlighting &amp;&amp; syntaxHighlightingState()) {
      $('.CodeMirror').each(function (index) {
        $('.CodeMirror')[index].CodeMirror.save();
      });
    }
    else {
      setTimeout(synchronizeCodeMirrorContent, 150);
    }
  }

  /*
   * Modals tools
   * ---------------------------------
   * initializeModals()
   * resetTabToClose()
   * openModalNoBootstrap(modalId)
   * closeModalNoBootstrap()
   * addFolderShortcut()
   * addPageShortcut()
   * addExistingPageShortcut()
   * removeEnterShortcut()
   */

  /**
   * Initialize the modals (with or without Bootstrap) and their one-time events (shown, hidden, clicks)
   */
  function initializeModals() {
    // If Bootstrap is disabled (Colibri skin), create custom modals. Let a delay before testing bootstrap in case it is loaded after the Web IDE.
    window.setTimeout(function () {
      if(!bootstrap()) {
        $('button[data-dismiss="modal"]').click(function() {
          closeModalNoBootstrap();
        });
        $('.modal').css({
          "width" : "40%",
          "border" : "1px solid black",
          "backgroundColor" : "#FFFFFF",
          "borderRadius" : "5px",
          "position" : "fixed",
          "left" : "30%",
          "top" : "20%",
          "padding" : "10px",
          "zIndex" : "1000"
        });
        $('.modal-header .close').css({
          "float" : "right",
          "position" : "absolute",
          "right" : "5px",
          "top" : "5px"
        });
        // Add support for the bootstrap buttons in Colibri skin (.btn, .btn-primary, .btn-success, .btn-danger, .btn-default)
        $('html &gt; head').append($('&lt;style&gt;.btn{border-radius:5px;padding:3px;color:white;cursor:pointer;}.btn-primary{background-color:#337AB7;border-color:#2E6DA4;}.btn-success{background-color:#5CB85C;border-color:#4CAE4C;}.btn-danger{background-color:#C9302C;border-color:#AC2925;}.btn-default{border-color:#000000;color:black;}&lt;/style&gt;'));
      }
    }, 100);
    $('input[type=radio][name=hierarchyAddPageType]').change(function() {
      if(this.value == 'content') {
        $('#hierarchyAddPageItemBlock').hide();
      }
      else if(this.value == 'item') {
        $('#hierarchyAddPageItemBlock').show();
        $('#hierarchyAddPageItem').html($('#hierarchyUpdatedClassList').html());
      }
    });
    $('#backgroundModalNoBootstrap').click(closeModalNoBootstrap);
    // Reset the tab to close when the user cancel the action :
    $('#hierarchyCloseTabModal').on('hidden.bs.modal', resetTabToClose);
    // Autofocus on text inputs when a modal appears and "Enter" shortcut:
    $('#hierarchyFolderModal').on('shown.bs.modal', addFolderShortcut);
    $('#hierarchyExistingPageModal').on('shown.bs.modal', addExistingPageShortcut);
    $('#hierarchyPageModal').on('shown.bs.modal', addPageShortcut);
    $('#hierarchyObjectModal').on('shown.bs.modal', addObjectShortcut);
    $('#hierarchyFolderModal').on('hidden.bs.modal', removeEnterShortcut);
    $('#hierarchyExistingPageModal').on('hidden.bs.modal', removeEnterShortcut);
    $('#hierarchyPageModal').on('hidden.bs.modal', removeEnterShortcut);
    $('#hierarchyObjectModal').on('hidden.bs.modal', removeEnterShortcut);
    // Modals click events :
    $('#hierarchyAddPage').on('click', function(e){
      $('body').removeClass('modal-open');
      e.preventDefault();
      var folder = $('#hierarchyPageFolder').val();
      var file = encodeURIComponent($('#hierarchyNewPageName').val());
      if(folder.trim() &amp;&amp; file.trim()) {
        // Check if it is a page, a class, a sheet or a template :
        var type = 'page';
        if($('#hierarchyAddPage').attr('data-type')) {
          type = $('#hierarchyAddPage').attr('data-type');
        }
        // Check if item page
        var itemvalue;
        if(type === 'page' &amp;&amp; $('input[type=radio][name=hierarchyAddPageType]:checked').val() === 'item') {
          type = 'item';
          itemvalue = $('#hierarchyAddPageItem').val();
        }
        // Check if if is a translation
        if(type === 'language') {
          itemvalue = $('#hierarchyAddPageLocale').val();
        }
        // Create the page :
        addPage(folder, file, type, itemvalue);
      }
    });
    $('#hierarchyAddFolder').click(function(e){
      $('body').removeClass('modal-open');
      e.preventDefault();
      if($('#hierarchyNewFolderName').val().trim()) {
        addFolder($('#hierarchyNewFolderName').val());
      }
    });
    $('#hierarchyAddExistingPage').click(function(e){
      $('body').removeClass('modal-open');
      e.preventDefault();
      if($('#hierarchyExistingPageName').val().trim()) {
        addExistingPage($('#hierarchyExistingPageName').val());
      }
    });
    $('#hierarchyAddObject').click(function(e){
      $('body').removeClass('modal-open');
      e.preventDefault();
      var folder = $('#hierarchyObjectSpace').html();
      var file = !$('#hierarchyObjectPage').is(':empty') ? $('#hierarchyObjectPage').html() : ($('#hierarchyObjectPageInput').val() !== '' ?  $('#hierarchyObjectPageInput').val() : $('#hierarchyObjectPageInputDefault').val());
      var className = $('#hierarchyObjectClassName').val();
      if(folder.trim() &amp;&amp; file.trim() &amp;&amp; className.trim()) {
        var global = ($('#hierarchyObjectPageInputDefault').val() !== '');
        addObject(null, className, true, folder, file, global, true);
      }
    });
    $('#editorDeleteObjectConfirmed').click(function(e){
      $('body').removeClass('modal-open');
      e.preventDefault();
      removeObject($(this).attr('data-classname'), $(this).attr('data-number'));
    });
  }

  /**
   * Reset the value of the next tab to close if the user cancel its action in the modal
   */
  function resetTabToClose() {
    nextTabToClose = null;
  }

  /**
   * Open the selected modal (if Bootstrap isn't available)
   * @input String modalId : the id of the modal to open
   */
  function openModalNoBootstrap(modalId) {
    $(modalId).show();
    $('#backgroundModalNoBootstrap').show();
  }

  /**
   * Close all the opened modals (if Bootstrap isn't available)
   */
  function closeModalNoBootstrap() {
    resetTabToClose(); // In case of "CloseTab" modal
    removeEnterShortcut(); // In case of "Add folder/page/existingpage" modal
    $('#backgroundModalNoBootstrap').hide();
    $('.modal').hide();
  }

  /**
   * Add/Remove the "Enter" shortcut (meaning the user aggred to do the selected action) when a modal is shown/hidden
   * The shortcut has to be removed since the user need to be able to press enter in the wiki/object editors
   */
  function addFolderShortcut() {
    $('#hierarchyNewFolderName').focus();
    shortcut.add("Enter", function() {
      $('#hierarchyAddFolder').click();
    });
  }
  function addPageShortcut() {
    $('#hierarchyNewPageName').focus();
    shortcut.add("Enter", function() {
      $('#hierarchyAddPage').click();
    });
  }
  function addExistingPageShortcut() {
    $('#hierarchyExistingPageName').focus();
    shortcut.add("Enter", function() {
      $('#hierarchyAddExistingPage').click();
    });
  }
  function addObjectShortcut() {
    $('#hierarchyObjectPageInput').focus();
    shortcut.add("Enter", function() {
      $('#hierarchyAddObject').click();
    });
  }
  function removeEnterShortcut() {
    shortcut.remove('Enter');
  }

  /*
   * Nested Spaces tools
   * ---------------------------------
   * checkNestedSpaces()
   * getRestSpacesString(spaces)
   * getURLSpacesString(spaces)
   * getSpacesEscaped(spaces)
   * getSpaceAndName(fullName)
   * getSpacesList(spaces)
   */

  /**
   * Check if Nested spaces are available if that version of XWiki
   * @return boolean
   */
  function checkNestedSpaces() {
    var xwikiNested = $('#xwikiNested').val();
    return (xwikiNested === "true");
  }

  /**
   * @param spaces The string describing spaces with XWiki classic format 'A.B'
   * @return The string describing spaces with XWiki REST format 'spaces/A/spaces/B'
   */
  function getRestSpacesString(spaces) {
    if(NESTED_SPACES) {
      var spacesEnc = spaces.replace(/%5C\./g, '%5C%2E').replace(/\\\./g, '%5C%2E');
      var spacesList = spacesEnc.split('.');
      var restFormat = '';
      for(var i=0; i&lt;spacesList.length; i++) {
        restFormat += 'spaces/'+spacesList[i].replace('%5C%2E', '\.')+'/';
      }
      return restFormat.substring(0, restFormat.length - 1);
    }
    else return 'spaces/'+spaces+'';
  }

  /**
   * @param spaces The string describing spaces with XWiki classic format 'A.B'
   * @return The string describing spaces with XWiki URL format 'A/B'
   */
  function getURLSpacesString(spaces) {
    if(NESTED_SPACES) {
      var spacesEsc = spaces.replace(/%5C\./g, '%5C%2E').replace(/\\\./g, '%5C%2E');
      var spacesList = spacesEsc.split('.');
      var restFormat = '';
      for(var i=0; i&lt;spacesList.length; i++) {
        restFormat += spacesList[i].replace('%5C%2E', '\.')+'/';
      }
      return restFormat.substring(0, restFormat.length - 1);
    }
    else return spaces;
  }

  /**
   * @param spaces The string describing a space with XWiki classic format 'A.B' (without nested space)
   * @return The string describing escaped space name 'A\.B'
   */
  function getSpacesEscaped(spaces) {
    if(NESTED_SPACES) {
      return spaces;
    }
    else return spaces.replace('%5C', '%5C%5C').replace(/\\/g, '%5C%5C').replace(/\./g, '%5C.');
  }

  /**
   * @param fullName The string describing the full name of a page 'A.B.WebHome'
   * @return The list of the space and the name ['A.B', 'WebHome']
   */
  function getSpaceAndName(fullName) {
    var fullNameEsc = fullName.replace(/%5C\./g, '%5C%2E').replace(/\\\./g, '%5C%2E');
    var existingPageSpace = fullNameEsc.substring(0, fullNameEsc.lastIndexOf(".")).replace('%5C%2E', '\.') || '';
    var existingPageName = fullNameEsc.substring(fullNameEsc.lastIndexOf(".") + 1, fullNameEsc.length).replace('%5C%2E', '\.') || '';
    return [existingPageSpace, existingPageName];
  }

  /**
   * @param spaces The string describing a space with XWiki classic format 'A.B' (without nested space)
   * @return The list of nested spaces the page is in
   */
  function getSpacesList(spaces) {
    if(NESTED_SPACES) {
      var spacesEsc = spaces.replace(/%5C\./g, '%5C%2E').replace(/\\\./g, '%5C%2E');
      var spacesList = spacesEsc.split('.');
      var nestedList = [];
      var previousLevel = '';
      for(var i=0; i&lt;spacesList.length; i++) {
        previousLevel += spacesList[i].replace('%5C%2E', '%5C.');
        nestedList.push(previousLevel);
        previousLevel += '.';
      }
      return nestedList;
    }
    else return [spaces];
  }


  //-------------------------------------
  //----------- Hierarchy API -----------
  //-------------------------------------
  //
  //reloadHierarchy()
  //removeFolder(string folder)
  //removePage(string page)
  //addFolder()
  //addPage()
  //addExistingPage()

  /**
   * Reload completely the project content (hierarchy) :
   * 1/ Get the plain content of ApplicationHierarchy
   * 2/ Change the html content and call "hierarchyInitialization()" to register again the "click" events in the menu
  */
  function reloadHierarchy() {
    var iconSrc = $('#hierarchyRefresh').attr('src');
    $('#hierarchyRefresh').off('click', reloadHierarchy);
    $('#hierarchyRefresh').attr('src', '/'+XWiki.webapppath+'resources/icons/xwiki/spinner.gif');
    $.ajax({
      url: wikiGetURL+"WebIDECode/ApplicationHierarchy?xpage=plain&amp;language="+$('#hierarchyMainLanguage').val(),
      type: "GET",
      datatype : "html",
      data : "action="+XWiki.contextaction+"&amp;editor="+currentEditor+"&amp;masterPage="+masterSpace+"."+masterPage+"&amp;remotePage="+getCurrentSpace(true)+"."+getCurrentPage(true)+"&amp;visibleSpaces="+encodeURIComponent(visibleSpaces)+"&amp;visiblePages="+encodeURIComponent(visiblePages)+"&amp;visibleCategory="+encodeURIComponent(visibleCategory)+"&amp;treeview="+currentTree,
      contentType: "text/html",
    }).success(function(data){
      //Update the hierarchy content (list of documents only)
      var result = $('&lt;div /&gt;').append(data).find('#hierarchyContent').html();
      $('#hierarchyContent').html(result);
      $('#hierarchyPageFolder').html($('#hierarchyUpdatedFolderList').html())
      setActiveTab(currentEditor, getCurrentPage(false), getCurrentSpace(false), getCurrentObject(false), currentNumber, currentLocale);
      hierarchyInitialization();
    }).complete(function() {
      $('#hierarchyRefresh').on('click', reloadHierarchy);
      $('#hierarchyChangeTree').on('click', changeTreeView);
      $('#hierarchyRefresh').attr('src', iconSrc);
    });
  }

  /**
   * Change the current tree view in the menu
  */
  function changeTreeView() {
    $('#hierarchyChangeTree').off('click', changeTreeView);
    if(currentTree == 'physical') {
      currentTree = 'logical';
    }
    else {
      currentTree = 'physical';
    }
    setCookieHierarchy('currentTree', currentTree, 365);
    reloadHierarchy();
  }

  /**
   * Rename a page or a folder in the project :
   * 1/ Use the ApplicationRename page to rename the content
   * 2/ Update the hierarchy if success
   * @input String type : the type of content to rename (file or folder)
   * @input String renameFrom : the name to change
   * @input String renameTo : the new name
  */
  function renameHierarchyElement(type, renameFrom, renameTo, updateList) {
    if(!saving) {
      setSavingState(true, 'Renaming in progress...');
      var addUpdateList = '&amp;updateList='+updateList;
      $.ajax({
        url: wikiGetURL+"WebIDECode/ApplicationRename",
        type: "POST",
        data: "outputSyntax=plain&amp;"+type+"=1&amp;masterPage="+masterSpace+"."+masterPage+"&amp;renameFrom="+renameFrom+"&amp;renameTo="+renameTo+addUpdateList,
      }).success(function(data) {
        setSavingState(false, 'Renaming performed', 2500);
        reloadHierarchy();
      }).error(function(xhr) {
        setSavingState(false, xhr.statusText, 4000, 'red');
      });
    }
  }

  /**
   * Remove a folder from the hierarchy (= from the project) :
   * 1/ Get the list of folders in the project
   * 2/ Check if the folder is in the project and remove it if necessary
   * 3/ Update the hierarchy if success
   * @input String folder
  */
  function removeFolder(folder) {
    setHierarchyState('Removing folder...');
    $.ajax({
      url: getDocumentReferenceData('restURL')+"/objects/WebIDECode.ApplicationClass/0/properties/spaces",
      type: "GET",
      contentType: "application/xml",
    }).success(function(res){
      var oldSpaces = $(res).find('value').text();
      var spaceArray = oldSpaces.split('|');
      var indexSpace = $.inArray(decodeURIComponent(folder), spaceArray)
      if(indexSpace &gt;= 0) {
        spaceArray.splice(indexSpace, 1);
        $.ajax({
          url: getDocumentReferenceData('restURL')+"/objects/WebIDECode.ApplicationClass/0/properties/spaces",
          type: "PUT",
          contentType: "application/x-www-form-urlencoded",
          accept: "application/xml",
          data: "property#spaces="+encodeURIComponent(spaceArray),
        }).success(function(){
          setHierarchyState('Folder removed from project', 2500);
          reloadHierarchy();
        }).error(function(xhr){
          setHierarchyState(xhr.statusText, 4000, 'red');
        });
      }
      else {
        console.log("Folder "+folder+" not found in the list of folders in this project.");
      }
    });
  }

  /**
   * Remove a page from the hierarchy (= from the project) :
   * 1/ Get the list of pages in the project
   * 2/ Check if the page is in the project and remove it if necessary
   * 3/ Update the hierarchy if success
   * @input String page
  */
  function removePage(page) {
    setHierarchyState('Removing page...');
    $.ajax({
      url: getDocumentReferenceData('restURL')+"/objects/WebIDECode.ApplicationClass/0/properties/pages",
      type: "GET",
      contentType: "application/xml",
    }).success(function(res){
      var oldPages = $(res).find('value').text();
      var pageArray = oldPages.split('|');
      var indexSpace = $.inArray(page, pageArray)
      if(indexSpace &gt;= 0) {
        pageArray.splice(indexSpace, 1);
        $.ajax({
          url: getDocumentReferenceData('restURL')+"/objects/WebIDECode.ApplicationClass/0/properties/pages",
          type: "PUT",
          contentType: "application/x-www-form-urlencoded",
          accept: "application/xml",
          data: "property#pages="+encodeURIComponent(pageArray),
        }).success(function(){
          setHierarchyState('Page removed from project', 2500);
          reloadHierarchy();
        }).error(function(xhr){
          setHierarchyState(xhr.statusText, 4000, 'red');
        });
      }
    });
  }

  /**
   * Add a folder in the hierarchy list :
   * 1/ Check that the folder doesn't already exists
   * 2/ Add the folder in the list alphabetically sorted
   * 3/ Update the hierarchy
   * @input String folder
  */
  function addFolder(folder) {
    setHierarchyState('Adding folder...');
    $.ajax({
      url: getDocumentReferenceData('restURL')+"/objects/WebIDECode.ApplicationClass/0/properties/spaces",
      type: "GET",
      contentType: "application/xml",
    }).success(function(res){
      var oldSpaces = $(res).find('value').text();
      var spaceArray = oldSpaces.split('|');
      if($.inArray(folder, spaceArray) == -1) {
        spaceArray.push(folder);
        spaceArray = spaceArray.sort();
        $.ajax({
          url: getDocumentReferenceData('restURL')+"/objects/WebIDECode.ApplicationClass/0/properties/spaces",
          type: "PUT",
          contentType: "application/x-www-form-urlencoded",
          accept: "application/xml",
          data: "property#spaces="+encodeURIComponent(spaceArray),
        }).success(function(){
          $('#hierarchyNewFolderName').val('');
          if(bootstrap()) {
            $('#hierarchyFolderModal').modal('hide');
          }
          else {
            closeModalNoBootstrap();
          }
          setHierarchyState('Folder added', 2500);
          reloadHierarchy();
        }).error(function(xhr){
          $('#hierarchyNewFolderName').val('');
          if(bootstrap()) {
            $('#hierarchyFolderModal').modal('hide');
          }
          else {
            closeModalNoBootstrap();
          }
          setHierarchyState(xhr.statusText, 4000, 'red');
        });
      }
    });
  }

  /**
   * Add a page in a folder :
   * 1/ Check that the page doesn't already exists
   * 2/ Create the page in the wiki
   * 3/ Update the hierarchy
   * @input String folder, String file
  */
  function addPage(folder, file, type, itemValue) {
    var restSpaces = getRestSpacesString(folder);
    setHierarchyState('Adding page...');
    if(type === 'class' &amp;&amp; file.substr(file.length - 5) !== 'Class') {
      file += 'Class';
    }
    var addRestLanguage = '';
    if(type === 'language') {
      addRestLanguage = '/translations/'+itemValue;
    }
    $.ajax({
      url: "/"+XWiki.webapppath+"rest/wikis/"+getDocumentReferenceData('wiki')+"/"+restSpaces+"/pages/"+file+addRestLanguage,
      type: "GET",
      contentType: "application/xml",
    }).success(function(xhr){
      $('#hierarchyPageModalError').html('ERROR : A page with the same name already exist').show().delay(4000).queue(function(n) {
        $(this).hide().html('');
        n();
      });
      setHierarchyState('ERROR : Name already used!', 4000, 'red');
    }).error(function(res){
      $.ajax({
        url: "/"+XWiki.webapppath+"rest/wikis/"+getDocumentReferenceData('wiki')+"/"+restSpaces+"/pages/"+file+addRestLanguage,
        type: "PUT",
        contentType: "application/x-www-form-urlencoded",
        accept: "application/xml",
        data: "title="+file+"&amp;content=&amp;parent="+currentSpaceEscaped+"."+currentPageEscaped,
      }).success(function(){
        $('#hierarchyNewPageName').val('');
        if(bootstrap()) {
          $('#hierarchyPageModal').modal('hide');
        }
        else {
          closeModalNoBootstrap();
        }
        setHierarchyState('Page added', 2500);
        if(type === 'class') { //New class : add "Class" sheet
          var properties = '{"sheet" : "XWiki.ClassSheet"}';
          addObject(null, 'XWiki.DocumentSheetBinding', true, folder, file, false, false, encodeURIComponent(properties), type);
        }
        else if(type === 'sheet') { //New sheet : bind the sheet to the class
          if(file.substr(file.length - 10) === 'ClassSheet') {
            var properties = '{"sheet" : "'+file+'"}';
            var classFile = file.substr(0, file.length - 5);
            addObject(null, 'XWiki.ClassSheetBinding', true, folder, classFile, false, false, encodeURIComponent(properties));
          }
        }
        else if(type === 'template') { //New template : add the related object
          if(file.substr(file.length - 13) === 'ClassTemplate') {
            var classFile = folder+'.'+file.substr(0, file.length - 8);
            addObject(null, classFile, true, folder, file, false, null);
          }
        }
        else if(type === 'item' &amp;&amp; itemValue) { //New item page : add the related object
          addObject(null, itemValue, true, folder, file, false, null);
        }
        else {
          reloadHierarchy();
        }
      }).error(function(xhr){
        $('#hierarchyNewPageName').val('');
        if(bootstrap()) {
          $('#hierarchyPageModal').modal('hide');
        }
        else {
          closeModalNoBootstrap();
        }
        setHierarchyState(xhr.statusText, 4000, 'red');
      });
    });
  }

  /**
   * Add an existing page in the hierarchy list :
   * 1/ Check that the page exists
   * 2/ Add the page in the list alphabetically sorted
   * 3/ Update the hierarchy
   * @input String fullName
  */
  function addExistingPage(pageFullName) {
    var existingPage = pageFullName;
    var existingPageList = getSpaceAndName(existingPage);
    var existingPageSpace = existingPageList[0];
    var existingPageName = existingPageList[1];
    var restSpaces = getRestSpacesString(existingPageSpace);
    var restSpacesMaster = getRestSpacesString(masterSpace);
    setHierarchyState('Adding page...');
    $.ajax({
      url: "/"+XWiki.webapppath+"rest/wikis/"+getDocumentReferenceData('wiki')+"/"+restSpaces+"/pages/"+existingPageName,
      type: "GET",
      contentType: "application/xml",
    }).error(function(){
      $('#hierarchyExistingPageModalError').html('ERROR : Unexisting page').show().delay(4000).queue(function(n) {
        $(this).hide().html('');
        n();
      });
    }).success(function(){
      $.ajax({
        url: "/"+XWiki.webapppath+"rest/wikis/"+getDocumentReferenceData('wiki')+"/"+restSpacesMaster+"/pages/"+masterPage+"/objects/WebIDECode.ApplicationClass/0/properties/pages",
        type: "GET",
        contentType: "application/xml",
      }).success(function(res){
        var oldPages = $(res).find('value').text();
        var pageArray = oldPages.split('|');
        if($.inArray(existingPage, pageArray) == -1) {
          pageArray.push(existingPage);
          pageArray = pageArray.sort();
          $.ajax({
            url: getDocumentReferenceData('restURL')+"/objects/WebIDECode.ApplicationClass/0/properties/pages",
            type: "PUT",
            contentType: "application/x-www-form-urlencoded",
            accept: "application/xml",
            data: "property#pages="+encodeURIComponent(pageArray),
          }).success(function(){
            $('#hierarchyExistingPageName').val('');
            if(bootstrap()) {
              $('#hierarchyExistingPageModal').modal('hide');
            }
            else {
              closeModalNoBootstrap();
            }
            setHierarchyState('Page added', 2500);
            reloadHierarchy();
          }).error(function(xhr){
            $('#hierarchyExistingPageName').val('');
            if(bootstrap()) {
              $('#hierarchyExistingPageModal').modal('hide');
            }
            else {
              closeModalNoBootstrap();
            }
            setHierarchyState(xhr.statusText, 4000, 'red');
          });
        }
      });
    });
  }

  //-------------------------------------
  //--------------- OTHER ---------------
  //-------------------------------------

  /**
   * Cookies management
   * Create or read cookies whose name begin with "NameOfTheMasterPage-"
   */
  function setCookieHierarchy(cname, cvalue, exdays) {
    var d = new Date();
    d.setTime(d.getTime() + (exdays*24*60*60*1000));
    var expires = "expires="+d.toUTCString();
    document.cookie = masterPage+"-"+cname + "=" + cvalue + "; " + expires + ";path=/";
  }
  function getCookieHierarchy(cname) {
    var name = masterPage+"-"+cname + "=";
    var ca = document.cookie.split(';');
    for(var i=0; i&lt;ca.length; i++) {
      var c = ca[i];
      while (c.charAt(0)==' ') c = c.substring(1);
      if (c.indexOf(name) == 0) return c.substring(name.length,c.length);
    }
    return "";
  }
});
});</code>
    </property>
    <property>
      <name>Hierarchy panel</name>
    </property>
    <property>
      <parse/>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <contentType>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>contentType</name>
        <number>6</number>
        <prettyName>Content Type</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>CSS|LESS</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </contentType>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators>|, </separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage|onDemand|always</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <name>WebIDECode.ApplicationHierarchy</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>0c7773fa-9a7a-49a4-b0db-44800f0bf911</guid>
    <property>
      <cache>forbid</cache>
    </property>
    <property>
      <code>#template('colorThemeInit.vm')

/* Hierarchy Block */
#hierarchyBlock {
  background-color: $theme.fieldGradientColor;
  min-width: 250px;
  overflow-y: auto;
  float: left;
  position: relative;
  height: 100%;
  resize: horizontal;
  box-sizing: border-box;
}
/* Project Block */
#hierarchyContent {
  padding: 5px;
  box-sizing: border-box;
}
#hierarchyMainList {
  -webkit-user-select: none;  /* Chrome all / Safari all */
  -moz-user-select: none;     /* Firefox all */
  -ms-user-select: none;      /* IE 10+ */
  user-select: none;
}
#hierarchyMainList li {
  white-space: nowrap;
  position: relative;
  -webkit-user-select: none;  /* Chrome all / Safari all */
  -moz-user-select: none;     /* Firefox all */
  -ms-user-select: none;      /* IE 10+ */
  user-select: none;
}
.hierarchy-right {
  cursor: pointer;
  position: absolute;
  background-color: $theme.fieldGradientColor;
  right: 0px;
  top: 0px;
  padding: 1px;
}
.hierarchy-right span{
  padding: 1px;
  margin-left: 1px
}
#hierarchyOpenBlock {
  cursor: pointer;
  padding-top: 5px;
  padding-bottom: 5px;
  text-align: center;
}
#hierarchyCloseBlock p {
  padding: 5px;
  margin: 0px;
}
#hierarchyCloseBlock .hierarchy-icon{
  cursor: pointer;
  float: right;
  padding: 5px;
  margin-left: 5px;
}
.exportLink {
  font-weight: bold;
}
#hierarchyBlock p {
  margin : 0;
}
/* Project Block - Colibri skin */
#hierarchyContent ul {
  list-style-type: none;
  margin: 0px;
}
.hierarchy-list p {
  margin: 0px !important;
}
.hierarchy-list img {
  padding: 0px !important;
}
#backgroundModalNoBootstrap {
  position: fixed;
  left: 0px;
  top: 0px;
  right: 0px;
  bottom: 0px;
  z-index: 999;
  background-color: black;
  opacity: 0.3;
  display: none;
}

/* Project Content */
.hierarchy-list {
  list-style-type: none;
  padding-left: 25px;
  margin: 0px;
}
.hierarchy-list p {
  margin: 0px;
}
.hierarchy-no-padding {
  padding-left: 0px;
}
.hierarchy-hidden {
  display: none;
}
.hierarchy-toggleFolder {
  cursor: pointer;
  display: inline-block;
}
.hierarchy-toggleFolder:hover .hierarchySpaceName{
  text-decoration: underline;
}
.hierarchy-toggleFolder p{
  margin-bottom:0;
}
.hierarchy-displayPage {
  cursor: pointer;
  display: inline-block;
}
.hierarchy-displayPage:hover .hierarchyPageName{
  text-decoration: underline;
}
.hierarchy-displayPage p{
  margin-bottom:0;
}
.hierarchy-toggleCategory {
  cursor: pointer;
}
.hierarchy-toggleCategory:hover strong{
  text-decoration: underline;
}
.hierarchyCurrentSpacePageAction{
  font-weight: bold;
}
.hierarchy-page-active {
  font-weight: bold;
  color: black;
}
.hierarchy-export {
  background: none !important;
  border: none;
  padding: 0 !important;
  font: inherit;
  cursor: pointer;
}
.masterExportForm {
  display: inline-block;
  width: 100%;
}
.hierarchy-export-button {
  display: inline-block;
  width: 100%;
}
#hierarchyChangeTree {
  display: inline-block;
  width: 50%;
  box-sizing: border-box;
}
#hierarchyAddNewElement {
  display: inline-block;
  width: 50%;
  box-sizing: border-box;
}
#hierarchyElementToAdd {
  background: white;
  position:absolute;
  margin-top: 0px;
  z-index: 100;
  border:1px solid black;
  right: 5px;
  left: 5px;
  padding: 10px;
  box-sizing: border-box;
}
#hierarchyElementToAdd h4 {
  margin: 0px;
}
#hierarchyElementToAdd p {
  margin: 0;
}
/* Page state info */
#hierarchySavingState, #hierarchyLoadingState, #hierarchyState {
  float: right;
  background-color: green;
  color: white;
  border: 2px solid grey;
  padding: 2px;
  display: none;
}
#hierarchySavingState.red, #hierarchyLoadingState.red, #hierarchyState.red {
  background-color: red;
}
#hierarchyBottomActionsBar {
  margin-top: 10px;
}
#hierarchyBottomActionsBar input {
  margin-left: 10px;
}
#hierarchyExistingPageModalError, #hierarchyPageModalError {
  font-weight: bold;
  color: #8A0808;
}</code>
    </property>
    <property>
      <contentType>CSS</contentType>
    </property>
    <property>
      <name>Hierarchy CSS</name>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <content>{{velocity}}
#set($masterDoc = 'Main.WebHome')
#if($xwiki.exists(${request.masterPage}))
  #set($masterDoc = $xwiki.getDocument(${request.masterPage}))
#elseif($xwiki.exists($util.decodeURI(${request.masterPage})))
  #set($masterDoc = $xwiki.getDocument($util.decodeURI(${request.masterPage})))
#end
#if($xwiki.exists(${request.remotePage}))
  #set($currentDoc = $xwiki.getDocument(${request.remotePage}))
#elseif($xwiki.exists($util.decodeURI(${request.remotePage})))
  #set($currentDoc = $xwiki.getDocument($util.decodeURI(${request.remotePage})))
#else
  #set($currentDoc = $doc)
#end
#set($currentEditor = $!request.editor)
#set($currentTree = 'logical')
#if($!request.treeview)
  #set($currentTree = $!request.treeview)
#end
#if("$!{request.visibleSpaces}" != "")
  #set($visibleSpacesString = $!{request.visibleSpaces})
#end
#set($visibleSpaces = $!visibleSpacesString.split("[,]"))
#if("$!{request.visiblePages}" != "")
  #set($visiblePagesString = $!{request.visiblePages})
#end
#set($visiblePages = $!visiblePagesString.split("[,]"))
#if("$!{request.visibleCategory}" != "")
  #set($visibleCategoryString = $!{request.visibleCategory})
#end
#set($visibleCategory = $!visibleCategoryString.split("[,]"))
(% class="hierarchy-hidden" id="hierarchyOpenBlock" %)(((
[[image:icon:control_end_blue||title="Open menu"]]
)))
(% id="hierarchyCloseBlock" %)(((
**Project :** $masterDoc.display('projectName', 'view') (% title="Hide menu" id="hierarchyClose" class="hierarchy-icon" %)$services.icon.render('step-backward', 'Font Awesome') (% title="Refresh the menu" id="hierarchyRefresh" class="hierarchy-icon" %)$services.icon.render('refresh', 'Font Awesome')
)))
#set($nestedSpaces = false)
#if($services.model.serialize($services.model.createDocumentReference("wiki", ["A", "B"], "page"), 'default') == 'wiki:A.B.page')
  #set($nestedSpaces = true)
#end
#set($masterObj = $masterDoc.getObject('WebIDECode.ApplicationClass'))
#set($spacesListInit = $masterObj.getProperty('spaces').value)## The value of 'spaces' in the object (before checking for nested spaces)
#set($spacesListNested = $sorttool.sort($spacesListInit))## Same as $spacesListInit if nested spaces don't exist, or add all the subspaces if they exist
#if($nestedSpaces)
  #foreach($space in $spacesListInit)
    #set($xwql = "select space.reference from XWikiSpace as space where space.parent=:space order by space.name")
    #set($spacePageList = $services.query.xwql($xwql).bindValue('space', $space).execute())
    #foreach($i in [0..1000])
      #if($i &gt;= $spacePageList.size())
        #break
      #end
      #set($addToList =[])
      #set($discard = $finalList.add($spacePageList[$i]))
      #set($xwql = "select space.reference from XWikiSpace as space where space.parent=:space order by space.name")
      #set($addToList = $services.query.xwql($xwql).bindValue('space', $spacePageList[$i]).execute())
      #foreach($item in $addToList)
        #set($discard = $spacePageList.add($item))
      #end
    #end
    #foreach($spaceElement in $spacePageList)
      #if(!$spacesListNested.contains($spaceElement))
        #set($discard = $spacesListNested.add($spaceElement))
      #end
    #end
  #end
  #set($spacesListNested = $sorttool.sort($spacesListNested))
#end
#set($spacesList = $sorttool.sort($spacesListNested))## Will also contains spaces from existing pages ('pages' in the object)
#set($spacesListAdd = [])
#set($pagesList = $sorttool.sort($masterObj.getProperty('pages').value))
#foreach($page in $pagesList)
  #set($document = $xwiki.getDocument($page))
  #if(!$spacesList.contains($document.space))
    #set($discard = $spacesList.add($document.space))
  #end
#end
#set($spacesList = $sorttool.sort($spacesList))
## Determine the list of parents of the current document to be able to open and **bold** them in the hierarchy
#if($nestedSpaces)
  #set($spaceParentList = [])
  #set($spacePath = "")
  #set($spaceParentListTemp = $currentDoc.space.replace('\.', '%5C%2E').split('\.'))
  #foreach($item in $spaceParentListTemp)
    #set($spacePath = "${spacePath}$item.replace('%5C%2E', '\.')")
    #set($discard = $spaceParentList.add($spacePath))
    #set($spacePath = "${spacePath}.")
  #end
#else
  #set($spaceParentList = [$currentDoc.space])
#end
(% id="hierarchyContent" %) (((
#if($masterDoc.hasAccessLevel('edit'))
  {{html clean=false}}&lt;form method="post" action="$masterDoc.getURL('view')" class="masterExportForm"&gt;&lt;input type="hidden" name="export" value="1" /&gt;&lt;input class="btn btn-default hierarchy-export-button" type="submit" value="Export the project (XAR)" title="Export the project"/&gt;&lt;/form&gt;{{/html}}
#end
#if($currentTree == 'physical')
  {{include reference="WebIDECode.PhysicalTree" /}}
#else
  {{include reference="WebIDECode.LogicalTree" /}}
#end
{{html clean=false}}
&lt;div id="hierarchyUpdatedFolderList" class="hierarchy-hidden"&gt;
#foreach($space in $spacesListNested)
  #if($xwiki.hasAccessLevel('edit', "$space.$reservedDocumentName"))
    &lt;option value="$escapetool.url($space).replace('+', '%20')"&gt;$space&lt;/option&gt;
  #end
#end
&lt;/div&gt;
{{/html}}
)))
{{html clean="false" wiki="true"}}
  &lt;div class="modal fade text-left hierarchy-hidden" id="hierarchyFolderModal" tabindex="-1" role="dialog" aria-hidden="true"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;Add New Folder&lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          Folder : &lt;input type="text" id="hierarchyNewFolderName" /&gt;
          &lt;button id="hierarchyAddFolder" class="btn btn-success"&gt;Add the folder&lt;/button&gt;&lt;br&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="modal fade text-left hierarchy-hidden" id="hierarchyPageModal" tabindex="-1" role="dialog" aria-hidden="true"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title" id="hierarchyAddPageTitle"&gt;Add New Page&lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          Folder : &lt;select id="hierarchyPageFolder"&gt;
          #foreach($space in $spacesListNested)
            #if($xwiki.hasAccessLevel('edit', "$space.$reservedDocumentName"))
              &lt;option value="$escapetool.url($space).replace('+', '%20')"&gt;$space&lt;/option&gt;
            #end
          #end
          &lt;/select&gt;&lt;br&gt;
          &lt;span id="hierarchyAddPageLabel"&gt;Page&lt;/span&gt; : &lt;input type="text" id="hierarchyNewPageName" /&gt;&lt;br&gt;
          &lt;div id="hierarchyAddPageTypeBlock"&gt;Type: &lt;input type="radio" name="hierarchyAddPageType" id="hierarchyAddPageTypeContent" value="content" checked="checked"/&gt; &lt;label for="hierarchyAddPageTypeContent"&gt;Content page &lt;/label&gt; &lt;input type="radio" name="hierarchyAddPageType" id="hierarchyAddPageTypeItem" value="item"/&gt; &lt;label for="hierarchyAddPageTypeItem"&gt;Item page&lt;/label&gt;&lt;br&gt;
            &lt;p&gt;**Content page**: Page where you can edit the content and add JS, CSS, etc...&lt;br&gt;
            **Item page**: Page with an instance of your class&lt;/p&gt;
          &lt;div id="hierarchyAddPageItemBlock" class="hierarchy-hidden"&gt;&lt;select id="hierarchyAddPageItem"&gt;
          &lt;/select&gt;&lt;/div&gt;&lt;/div&gt;
          &lt;div id="hierarchyAddPageLocaleBlock"&gt;Language: &lt;select id="hierarchyAddPageLocale"&gt;
          #foreach($locale in $xwiki.getDocument('XWiki.XWikiPreferences').getObject('XWiki.XWikiPreferences').getProperty('languages').value.split(','))
            #set($language = $services.localization.toLocale($locale.trim()).getDisplayLanguage())
            #set($displayLanguage = $language)
            #if($language.length() &gt; 0)
              #set($displayLanguage = "${language.substring(0, 1).toUpperCase()}${language.substring(1)}")
            #end
            &lt;option value="$locale.trim()"&gt;$displayLanguage&lt;/option&gt;
          #end
          &lt;/select&gt; (Supported languages list from your wiki administration)&lt;/div&gt;
          &lt;button id="hierarchyAddPage" class="btn btn-success"&gt;Add the page&lt;/button&gt;&lt;br&gt;
          &lt;p id="hierarchyPageModalError" class="hierarchy-hidden"&gt;&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="modal fade text-left hierarchy-hidden" id="hierarchyObjectModal" tabindex="-1" role="dialog" aria-hidden="true"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;Add Object&lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          Space : &lt;span id="hierarchyObjectSpace"&gt;&lt;/span&gt;&lt;br&gt;
          &lt;div id="hierarchyObjectPageBlock"&gt;Page : &lt;span id="hierarchyObjectPage"&gt;&lt;/span&gt;&lt;/div&gt;
          &lt;div id="hierarchyObjectPageInputBlock"&gt;Name : &lt;input type="text" id="hierarchyObjectPageInput" value=""/&gt;&lt;input type="hidden" id="hierarchyObjectPageInputDefault" value=""/&gt;&lt;/div&gt;
          &lt;input type="hidden" id="hierarchyObjectClassName" /&gt;
          &lt;button id="hierarchyAddObject" class="btn btn-success"&gt;Add the object&lt;/button&gt;
          &lt;p id="hierarchyObjectModalError" class="hierarchy-hidden"&gt;&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="modal fade text-left hierarchy-hidden" id="hierarchyExistingPageModal" tabindex="-1" role="dialog" aria-hidden="true"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;Add Existing Page&lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          Page Full Name : &lt;input type="text" id="hierarchyExistingPageName" /&gt;
          &lt;button id="hierarchyAddExistingPage" class="btn btn-success"&gt;Add the page&lt;/button&gt;
          &lt;p id="hierarchyExistingPageModalError" class="hierarchy-hidden"&gt;&lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="modal fade text-left hierarchy-hidden" id="hierarchyCloseTabModal" tabindex="-1" role="dialog" aria-hidden="true"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;Unsaved content&lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          &lt;p&gt;
            You have unsaved content in this tab (&lt;span id="hierarchyCloseTabModalInfo"&gt;&lt;/span&gt;), do you want to continue? All unsaved modifications will be lost permanently&lt;br /&gt;
            &lt;button id="hierarchySaveAndCloseModal" class="btn btn-success"&gt;Save &amp; close the tab&lt;/button&gt; &lt;button id="hierarchyDiscardAndCloseModal" class="btn btn-danger"&gt;Close without saving&lt;/button&gt; &lt;button class="btn btn-default" data-dismiss="modal" type="button"&gt;Cancel&lt;/button&gt;
          &lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="modal fade text-left hierarchy-hidden" id="editorDeleteObjectModal" tabindex="-1" role="dialog" aria-hidden="true"&gt;
    &lt;div class="modal-dialog"&gt;
      &lt;div class="modal-content"&gt;
        &lt;div class="modal-header"&gt;
          &lt;button type="button" class="close" data-dismiss="modal" aria-hidden="true"&gt;×&lt;/button&gt;
          &lt;h4 class="modal-title"&gt;Delete an object&lt;/h4&gt;
        &lt;/div&gt;
        &lt;div class="modal-body"&gt;
          &lt;p&gt;
            Are you sure you want to delete that object &lt;span id="editorDeletedObjectModalInfo"&gt;&lt;/span&gt;&lt;br /&gt;
            &lt;button id="editorDeleteObjectConfirmed" class="btn btn-danger"&gt;Delete the object&lt;/button&gt; &lt;button class="btn btn-default" data-dismiss="modal" type="button"&gt;Cancel&lt;/button&gt;
          &lt;/p&gt;
        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class="hierarchy-hidden"&gt;&lt;input type="hidden" id="hierarchyMasterDocName" value="$escapetool.url($masterDoc.name)" /&gt;&lt;input type="hidden" id="hierarchyMasterDocSpace" value="$escapetool.url($masterDoc.space)" /&gt;&lt;input type="hidden" id="xwikiNested" value="$nestedSpaces" /&gt;&lt;input type="hidden" id="hierarchyMainLanguage" value="$xwiki.getLanguagePreference()" /&gt;&lt;/div&gt;

&lt;div id="backgroundModalNoBootstrap"&gt;&lt;/div&gt;

{{/html}}
(% id="hierarchyStateBlock" %)(((
  (% id="hierarchyState" %)((()))(% id="hierarchySavingState" %)((()))(% id="hierarchyLoadingState" %)((()))
)))
{{/velocity}}</content>
</xwikidoc>
